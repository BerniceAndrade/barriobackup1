define("collections/articles",["jquery","underscore","backbone","models/article"],function(e,c,n,o){"use strict";var r=n.Collection.extend({model:o});return r});
define("collections/markers",["jquery","underscore","backbone","models/marker"],function(e,r,n,o){"use strict";var c=n.Collection.extend({model:o});return c});
define("mixins/asyncInit",["jquery","underscore"],function(n,e){"use strict";var i={$def:null,init:function(){return this.$def.promise()}};return i});
define("mixins/domwatcher",["jquery"],function(e){"use strict";var t={watchDOM:function(t,o,n){if(!o)throw"Empty selector in watchDOM()";if(0===e(o).length){var d=function(){e(o).length>0&&(e(document.body).off("DOMNodeInserted",d),n.resolve())};e(document.body).on("DOMNodeInserted",d),window.setTimeout(function(){e(document.body).off("DOMNodeInserted",d),n.reject()},t)}else n.resolve()}};return t});
define("mixins/fetchxml",["jquery"],function(e){"use strict";var r={fetchXML:function(r){var t=e.Deferred();return e.ajax({type:"GET",url:r,dataType:"xml",success:function(e){t.resolve(e)},error:function(e,r,n){t.reject()}}),t.promise()}};return r});
define("mixins/xml2html",["jquery","underscore"],function(e,t){"use strict";var r={_doc:function(e){var t;if("string"==typeof e)t=(new DOMParser).parseFromString(e,"text/xml");else{if(!(e instanceof Document))throw new Error("Unrecognized document input in XML2HTML");t=e}if(null==t||!t.hasOwnProperty("getElementsByTagName")&&t.getElementsByTagName("parsererror").length>0)throw new Error("Failed to parse document in xml2html");return t},xml2html:function(e,r,n,o){var i=this._doc(e),m=this._doc(r),a=new XSLTProcessor;a.importStylesheet(m),"object"==typeof n&&t.each(t.keys(n),function(e){a.setParameter(null,e,n[e])});var s;try{var c=a.transformToDocument(i);s=-1!=navigator.userAgent.indexOf("Firefox")?"text"===o?c.documentElement.textContent:c.documentElement:"text"===o?c.documentElement.textContent:s=c.body.innerHTML}catch(u){throw new Error("Error in XSLT transform: "+u.toString())}return s}};return r});
define("models/app",["jquery","underscore","backbone","routes/router","models/issue"],function(e,n,o,i,r){"use strict";var s=o.Model.extend({initialize:function(e){var n=new r({config:e.config});new i({routes:e.config.pages.routes,config:e.config,issue:n})}});return s});
define("models/article",["jquery","underscore","backbone","mixins/fetchxml","mixins/asyncInit","mixins/xml2html","text!xsl/geojson.xsl"],function(e,t,n,r,i,o,s){"use strict";var l=n.Model.extend({initialize:function(){var t=this;t.$def=e.Deferred();var n=t.fetchXML(t.get("path"));e.when(n).done(function(e){t.set("xml",e),t.$def.resolve(t)}).fail(function(){t.$def.reject()})},defaults:{xml:null,marker:null},select:function(){this.trigger("active")},unselect:function(){this.trigger("inactive")},geojson:function(){var e="{}";try{var t=this.get("xml"),n=this.xml2html(t,s,{},"text");e=JSON.parse(n)}catch(r){throw new Error("Failed to parse to json: "+r.toString())}return e}});return t.extend(l.prototype,r),t.extend(l.prototype,i),t.extend(l.prototype,o),l});
define("models/issue",["jquery","underscore","backbone","models/article","collections/articles","mixins/asyncInit"],function(e,t,i,n,c,l){"use strict";var r=i.Model.extend({initialize:function(i){var l=this;l.$def=e.Deferred();var r=i.config.articles.pathBase;r.match(/\/$/)||(r+="/");var a=i.config.articles.files,o=new c;l.config=i.config,l.set("collection",o);var s=t.map(t.range(a.length),function(){return void 0});t.each(a,function(e,t){s[t]=new n({articleid:t,articledir:r,path:r+e})});var f=t.map(s,function(e){return e.init()});e.when({},f).fail(function(){l.$def.reject()}),e.when.apply(null,f).done(function(){o.add(s),l.on("select",function(e){l._selectArticle(e)}),l.$def.resolve(l)}),e.when.apply(null,f).always(function(){t.forEach(f,function(e){"rejected"===e.state()&&l.$def.reject()}),l.$def.resolve(l)})},defaults:{activeArticle:null},_selectArticle:function(e){var t,i=this,n=i.get("collection");if("object"==typeof e)t=e;else{if("number"!=typeof e&&"string"!=typeof e)throw"Bad argument to models/issue";t=n.at(e)}(null===this.get("activeArticle")||this.get("activeArticle")!=e)&&(this.get("activeArticle")&&this.get("activeArticle").unselect(),i.set("activeArticle",t),t.init().done(function(){i.trigger("update",t),t.select()}))}});return t.extend(r.prototype,l),r});
define("models/map",["jquery","underscore","backbone","collections/markers","models/marker","mixins/asyncInit"],function(e,n,o,i,r,t){"use strict";var s=o.Model.extend({initialize:function(n){var o=this;if(o.$def=e.Deferred(),o.issue=n.issue,void 0===o.issue)throw new Error("Missing issue model in map model");if(o.set("router",n.router),!n.router)throw new Error("No router in MapModel");var i=e.Deferred();e.getJSON(n.config.map.config,function(e){o.set("mapconfig",e),i.resolve()}).fail(function(e,n,o){i.reject(),console.log("Failed to load map config file: "+o)}),e.when.apply({},[o.issue.init(),i]).done(function(){o._makeCollection(o.issue.get("collection").models,{success:function(){o.$def.resolve(o)},fail:function(){o.$def.reject()}})}).fail(function(){o.$def.reject()}).always(function(){o.$def.reject()})},defaults:{mapconfig:{}},_makeCollection:function(o,t){var s=this,c=[],f=new i;s.set("collection",f);var a=n.map(n.range(o.length),function(){return void 0}),u=!1,l="";o.forEach(function(n,o){var i=e.Deferred();c.push(i),n.init().done(function(){var e;try{e=new r({issue:s.issue,article:n,json:n.geojson(),router:s.router})}catch(t){return u=!0,l+="\n"+t.toString(),void i.resolve()}a[o]=e,i.resolve()})}),e.when.apply({},c).done(function(){if(f.add(a),u)throw new Error(l);t.success()}).fail(function(){t.fail()})}});return n.extend(s.prototype,t),s});
define("models/marker",["jquery","underscore","backbone"],function(e,i,t){"use strict";var r=t.Model.extend({article:null,json:{},initialize:function(e){var i=this;i.app=e.app,i.article=e.article,i.router=e.router,e.issue.init().done(function(e){i.listenTo(i.article,"active",function(){i.trigger("active")})})}});return r});
define("routes/router",["jquery","underscore","backbone","models/error/user","views/error/user","views/clear","views/issue","views/map","views/menu"],function(e,i,r,s,t,n,a,o,u){var g=r.Router.extend({pages:{},config:{},issue:null,initialize:function(e){var s=this;this.config=e.config,this.pages=e.config.pages,this.issue=e.issue,this.issue.init().done(function(){i.has(s.pages.router,"history")&&s.pages.router.history&&r.history.start()})},navigate:function(e,i){r.history.fragment!==e&&r.history.navigate(e,i)},page:function(e){var r,s=this;try{if(e||(e=this.pages.home),r=this.pages.pages[e],void 0===r)throw new Error("Missing config in router/page")}catch(t){return this.page("404")}(new n).render(),i.each(r,function(r){var t,n={config:s.config,issue:s.issue,router:s},a=JSON.parse(JSON.stringify(r));if(i.has(a,"view"))t=a.view;else{if(!i.has(a,"partial")){if(i.has(a,"full"))return void(window.location.href=a.full.page);throw new Error("Unsupported page type in router: "+e)}t="views/partial",a.partial.page=s.pages.pathBase+a.partial.page,n=i.extend(n,a.partial)}require([t],function(e){var i=new e(n);i.render()})})},article:function(i){e("#titlepage").remove();var r=this,s={config:r.config,issue:r.issue,router:r};if(0===e("#issue").length){var t=new a(s);t.render()}if(0===e("#map").length){var n=new o(s);n.render()}if(0===e("#menu").children().length){var g=new u(s);g.render()}r.issue.trigger("select",i)}});return g});
define("views/app",["jquery","underscore","backbone"],function(e,n,i){"use strict";var o=i.View.extend({el:"body",initialize:function(){e(window).resize(function(){document.location.reload()})}});return o});
define("views/article",["jquery","underscore","backbone","mixins/domwatcher","mixins/xml2html","text!xsl/article.xsl","text!partials/popover.html","text!partials/popover-content.html","slidesjs"],function(e,t,i,s,r,o,l,n){"use strict";var a=i.View.extend({id:"article",initialize:function(e){var t=this;t.config=e.config},render:function(){var t=this;t.$el=e("#"+t.id);var i=this.xml2html(this.model.get("xml"),o,{"article-dir":t.config.articles.pathBase});try{e(".article-content").remove(),e("#"+this.id).append(i)}catch(s){console.log("article load error: "+s.toString())}if(0===e("img.slidesjs-slide").length)e("#footer").remove(),e("article").removeClass("before-footer").addClass("no-footer");else try{t.postprocess()}catch(s){throw new Error("Failed to handle article images")}return t},remove:function(){},postprocess:function(){var i=this,s=e("#article article").height()-e("#header").outerHeight(!0);e("#body").css({height:s});var r=t.template(n);e("img.slidesjs-slide").each(function(t,i){var s=i.getAttribute("id"),o=e(".popover."+s).remove(),n=o.find(".head").text();e(i).attr("alt",o.find(".desc").text());var a=r({attr:o.find(".attr").text()});e(i).popover({container:"body",html:!0,content:a,title:n,template:l,trigger:"hover",placement:"left"})});var o=[];return i.$el.find("img.slidesjs-slide").each(function(t,i){var s=e.Deferred();e(i).load(function(){e(i).removeClass("remove"),s.resolve()}),e(i).error(function(){window.setTimeout(function(){s.reject()},500)}),o.push(s)}),e.when.apply({},o).always(function(){e("img.slidesjs-slide.remove").remove(),e(".image-loading").removeClass("image-loading"),e("#slides").slidesjs({navigation:{active:e("img.slidesjs-slide").length>1,effect:"fade"},pagination:{active:e("img.slidesjs-slide").length>1,effect:"fade"},effect:{fade:{speed:100,crossfade:!0}},callback:{loaded:function(t){var i=e(".slidesjs-control").children(":eq("+(t-1)+")");i.css({visibility:"hidden"}),i.css({height:e(".slidesjs-container").height(),width:"auto"});var s=(e(".slidesjs-container").width()-i.width())/2;i.css({left:s}),i.css({visibility:"visible"})},start:function(t){e(".slidesjs-control").children().css({visibility:"hidden"})},complete:function(t){var i=t-1,s=e(".slidesjs-control").children(":eq("+i+")");s.css({height:e(".slidesjs-container").height(),width:"auto",position:"relative"}),s.css({visibility:"visible"})}}})}),i}});return t.extend(a.prototype,s),t.extend(a.prototype,r),a});
define("views/clear",["jquery","underscore","backbone"],function(e,n,r,t){"use strict";var c=r.View.extend({el:"body",render:function(){e("body").empty()}});return c});
define("views/issue",["jquery","underscore","backbone","text!partials/issue.html","views/article"],function(e,i,t,n,o){"use strict";var r=t.View.extend({el:"#issue",template:i.template(n),initialize:function(e){var i=this;i.model=e.issue,i.model.on("update",function(e){i.select(e)})},render:function(){this.$el.remove(),e("body").append(n)},select:function(e){var i=this,t=new o({model:e,config:i.model.config,issue:i,router:i.model.router});e.on("active",t.render,t),e.on("inactive",t.remove,t)}});return r});
define("views/map",["jquery","underscore","backbone","leaflet","text!partials/map.html","models/map","views/marker"],function(e,n,o,t,i,r,a){"use strict";var p=o.View.extend({id:"map",tagName:"div",initialize:function(e){var n=this;n.config=e.config,n.model=new r(e),n.router=e.router},render:function(){var n=this;e("#"+n.id).children().length>0||(e("body").append(i),this.model.init().done(function(){var e=n.model.get("collection"),o=n.model.get("mapconfig"),i=new t.Map(o.id,o.map),r={},a=function(e){return e.lat.toString()+e.lng.toString()};n.configureMap(i,o,r,a),i.invalidateSize(),window.setTimeout(function(){e.forEach(function(e){n.addMarkerToMap(e,i,r,a,o)})},n.config.map.markerDelay)}))},configureMap:function(e,n,o,i){var r=new t.TileLayer(n.tileLayer.url,n.tileLayer.opts),a=t.control.scale(n.scale);e.setView(new t.LatLng(n.view.lat,n.view.lng),n.view.zoom),e.addLayer(r),a.addTo(e),e.on("popupopen",function(e){o[i(e.popup.getLatLng())]=-1!=navigator.userAgent.indexOf("Firefox")?!0:!0}),e.on("popupclose",function(e){o[i(e.popup.getLatLng())]=-1!=navigator.userAgent.indexOf("Firefox")?!1:!1})},addMarkerToMap:function(e,n,o,i,r){var p=this,c=e.get("json"),u=new a({model:e,router:p.router});u.render(),t.geoJson(c,{onEachFeature:function(n,a){var c=t.popup(r.features.popup);c.setContent(u.el),a.bindPopup(c),a.removeEventListener("click"),a.on("click",function(){e.trigger("active")}),a.on("mouseover",function(){p.config.map.hoverPopup&&(o[i(a.getLatLng())]||a.openPopup())}),e.on("active",function(e){o[i(a.getLatLng())]||a.openPopup()}),o[i(a.getLatLng())]=!1},pointToLayer:function(e,n){return t.marker(n,{icon:t.icon(r.features.icon),clickable:!!e.properties.text,title:e.properties.markername||"",opacity:r.features.opacity,riseOnHover:r.features.riseOnHover})}}).addTo(n)}});return p});
define("views/marker",["jquery","underscore","backbone","text!partials/marker.html"],function(e,t,r,i){"use strict";var l=r.View.extend({template:t.template(i),el:"",router:null,initialize:function(e){var t=this;t.router=e.router,t.model.on("active",function(){var e="article/"+t.model.article.get("articleid");t.router.navigate(e,{trigger:!0}),t.model.get("issue").trigger("select",t.model.get("article"))})},render:function(){this.$el.html(this.template({articleid:this.model.article.get("articleid"),geojson:this.model.article.geojson()}))}});return l});
define("views/menu",["jquery","underscore","backbone","text!partials/menu.html","mixins/domwatcher","views/article/menu"],function(e,t,n,i,r,o){"use strict";var a=n.View.extend({template:t.template(i),id:"menu",tagName:"div",issue:null,config:{},initialize:function(e){this.config=e.config,this.issue=e.issue},render:function(){var n=this;if(0===e("#"+n.id).children().length){var i=this.config.menu,r=[],a={},c={};t.each(i,function(e){if(a[e.partial]="","menu"===e.type){if("collections/articles"!==e.collection)throw new Error("Unhandled collection type requested: "+e.collection);c[e.collection]=n.issue.get("collection")}}),t.each(t.keys(a),function(n){var i=e.Deferred();require(["text!"+n],function(e){a[n]=t.template(e),i.resolve()}),r.push(i.promise())});var l="";e.when.apply(e,r).done(function(){t.forEach(i,function(n,i){var r=n.partial,u={},s="";"page"===n.type||"sep"===n.type?l+=a[r](n):"menu"===n.type&&(c[n.collection].models.forEach(function(t,i){var r,a=n.item.href.replace(":i",i),c=new o({model:t}),l=c.render({href:"#"+a});if("string"==typeof l)r=e(l);else{if(!(l instanceof Element))throw new Error("Unsupported result type for submenu: "+l.toString());if("BODY"===l.nodeName)r=e(l.innerHTML);else{if("LI"!==l.nodeName)throw new Error("Unsupported document element for submenu: "+l.toString());r=e(l.outerHTML)}}r.attr("data-sort-key")?u[r.attr("data-sort-key")]=r.clone():u[r.find("a").text()]=r.clone()}),t.each(t.sortBy(t.keys(u),function(e){return e}),function(e){s+=u[e][0].outerHTML}),l+=a[r]({label:n.label,items:s}))})}).then(function(){e("#"+n.id).empty().append(n.template({content:l}));var t=e.Deferred();t.fail(function(){n.render()}),n.watchDOM(500,"#"+n.id,t)}).fail(function(){throw new Error("Failed to build menu.")})}}});return t.extend(a.prototype,r),a});
define("views/page",["jquery","underscore","backbone","mixins/domwatcher","text!partials/page.html"],function(e,t,n,r,i){"use strict";var a=n.View.extend({el:"body",render:function(){var t=this,n=e.Deferred();n.then(function(){e(t.el).append(i)}),this.watchDOM(1e3,t.el,n)}});return t.extend(a.prototype,r),a});
define("views/partial",["jquery","underscore","backbone","mixins/domwatcher","mixins/asyncInit"],function(e,t,n,i,r){"use strict";var a=n.View.extend({el:"",page:"",initialize:function(t){var n=this;n.el=t.el,n.$def=e.Deferred(),require(["text!"+t.page],function(e){n.page=e,n.$def.resolve(n)})},render:function(){var t=this,n=e.Deferred();t.init().then(function(){e(t.el).append(t.page)}),this.watchDOM(1e3,t.el,n)}});return t.extend(a.prototype,i),t.extend(a.prototype,r),a});
define("models/error/user",["backbone"],function(e){"use strict";var s=e.Model.extend({defaults:{msg:""},initialize:function(e){this.set("msg",e.message)}});return s});
define("views/article/menu",["jquery","underscore","backbone","mixins/xml2html","text!xsl/article-menu.xsl"],function(e,t,i,n,r){"use strict";var l=i.View.extend({render:function(e){var t=this;if("resolved"!==this.model.init().state())throw"Uninitialized article in ArticleMenuView";var i=t.xml2html(t.model.get("xml"),r,e);return i}});return t.extend(l.prototype,n),l});
define("views/error/user",["jquery","backbone","text!partials/error/user.html"],function(e,t,r){"use strict";var i=t.View.extend({template:_.template(r),el:e("#errorDialog"),initialize:function(){this.render()},render:function(){return this.$el.html(this.template(this.model.attributes)),this.$el.modal({keyboard:!0,show:!0}),this}});return i});
require.config({paths:{text:"//cdnjs.cloudflare.com/ajax/libs/require-text/2.0.12/text.min",jquery:"//code.jquery.com/jquery-2.1.4.min",bootstrap:"//maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min",backbone:"//cdnjs.cloudflare.com/ajax/libs/backbone.js/1.1.2/backbone-min",underscore:"//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min",leaflet:"//cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.3/leaflet",slidesjs:"//cdnjs.cloudflare.com/ajax/libs/slidesjs/3.0/jquery.slides.min",partials:"../partials",xsl:"../script/xsl",pages:"../pages"},shim:{bootstrap:{deps:["jquery"]},backbone:{deps:["jquery","underscore"],exports:"Backbone"},underscore:{exports:"_"},text:{deps:[]},slidesjs:{deps:["jquery"]}}}),require(["jquery","models/error/user","views/error/user","models/app","views/app","bootstrap"],function(e,s,o,r,a){"use strict";var n=e("#main").attr("data-config");n?e.getJSON(n,function(e){try{{new a({model:new r({config:e})})}}catch(n){opts.config.debug||new o({model:new s({msg:n.toString()})})}}).fail(function(e,r,a){new o({model:new s({msg:"Failed to load site config file '"+n+"' "+a})})}):new o({model:new s({msg:"No configuration filename specified in home page."})})});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbGxlY3Rpb25zL2FydGljbGVzLmpzIiwiY29sbGVjdGlvbnMvbWFya2Vycy5qcyIsIm1peGlucy9hc3luY0luaXQuanMiLCJtaXhpbnMvZG9td2F0Y2hlci5qcyIsIm1peGlucy9mZXRjaHhtbC5qcyIsIm1peGlucy94bWwyaHRtbC5qcyIsIm1vZGVscy9hcHAuanMiLCJtb2RlbHMvYXJ0aWNsZS5qcyIsIm1vZGVscy9pc3N1ZS5qcyIsIm1vZGVscy9tYXAuanMiLCJtb2RlbHMvbWFya2VyLmpzIiwicm91dGVzL3JvdXRlci5qcyIsInZpZXdzL2FwcC5qcyIsInZpZXdzL2FydGljbGUuanMiLCJ2aWV3cy9jbGVhci5qcyIsInZpZXdzL2lzc3VlLmpzIiwidmlld3MvbWFwLmpzIiwidmlld3MvbWFya2VyLmpzIiwidmlld3MvbWVudS5qcyIsInZpZXdzL3BhZ2UuanMiLCJ2aWV3cy9wYXJ0aWFsLmpzIiwibW9kZWxzL2Vycm9yL3VzZXIuanMiLCJ2aWV3cy9hcnRpY2xlL21lbnUuanMiLCJ2aWV3cy9lcnJvci91c2VyLmpzIiwibWFpbi5qcyJdLCJuYW1lcyI6WyJkZWZpbmUiLCIkIiwiXyIsIkJhY2tib25lIiwiQXJ0aWNsZU1vZGVsIiwiQXJ0aWNsZXNDb2xsZWN0aW9uIiwiQ29sbGVjdGlvbiIsImV4dGVuZCIsIm1vZGVsIiwiTWFya2VyTW9kZWwiLCJNYXJrZXJzQ29sbGVjdGlvbiIsIkFzeW5jSW5pdCIsIiRkZWYiLCJpbml0IiwidGhpcyIsInByb21pc2UiLCJET01XYXRjaGVyIiwid2F0Y2hET00iLCJtcyIsInNlbCIsImxlbmd0aCIsImYiLCJkb2N1bWVudCIsImJvZHkiLCJvZmYiLCJyZXNvbHZlIiwib24iLCJ3aW5kb3ciLCJzZXRUaW1lb3V0IiwicmVqZWN0IiwiRmV0Y2hYTUwiLCJmZXRjaFhNTCIsInVybCIsIiRnZXQiLCJEZWZlcnJlZCIsImFqYXgiLCJ0eXBlIiwiZGF0YVR5cGUiLCJzdWNjZXNzIiwiZGF0YSIsImVycm9yIiwianFYSFIiLCJ0ZXh0U3RhdHVzIiwiZXJyb3JUaHJvd24iLCJYTUwySFRNTCIsIl9kb2MiLCJ4bWwiLCJ4bWxEb2MiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJEb2N1bWVudCIsIkVycm9yIiwiaGFzT3duUHJvcGVydHkiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInhtbDJodG1sIiwieHNsIiwicGFyYW1zIiwibW9kZSIsInhzbERvYyIsInhzbHRQcm9jZXNzb3IiLCJYU0xUUHJvY2Vzc29yIiwiaW1wb3J0U3R5bGVzaGVldCIsImVhY2giLCJrZXlzIiwia2V5Iiwic2V0UGFyYW1ldGVyIiwicmVzdWx0IiwiZG9jIiwidHJhbnNmb3JtVG9Eb2N1bWVudCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImluZGV4T2YiLCJkb2N1bWVudEVsZW1lbnQiLCJ0ZXh0Q29udGVudCIsImlubmVySFRNTCIsImUiLCJ0b1N0cmluZyIsIlJvdXRlciIsIklzc3VlTW9kZWwiLCJBcHBNb2RlbCIsIk1vZGVsIiwiaW5pdGlhbGl6ZSIsIm9wdHMiLCJpc3N1ZSIsImNvbmZpZyIsInJvdXRlcyIsInBhZ2VzIiwiZ2VvSnNvblhzbCIsInRoYXQiLCJnZXQiLCJ3aGVuIiwiZG9uZSIsInNldCIsImZhaWwiLCJkZWZhdWx0cyIsIm1hcmtlciIsInNlbGVjdCIsInRyaWdnZXIiLCJ1bnNlbGVjdCIsImdlb2pzb24iLCJqc29uU3RyaW5nIiwiSlNPTiIsInBhcnNlIiwicHJvdG90eXBlIiwiQXJ0aWNsZUNvbGxlY3Rpb24iLCJhcmdzIiwiYXJ0ZGlyIiwiYXJ0aWNsZXMiLCJwYXRoQmFzZSIsIm1hdGNoIiwiZmlsZXMiLCJjb2wiLCJtYXAiLCJyYW5nZSIsInVuZGVmaW5lZCIsImZpbGUiLCJpIiwiYXJ0aWNsZWlkIiwiYXJ0aWNsZWRpciIsInBhdGgiLCJpbml0cyIsImFydGljbGUiLCJhcHBseSIsImFkZCIsIl9zZWxlY3RBcnRpY2xlIiwiYWx3YXlzIiwiZm9yRWFjaCIsIiRwcm9taXNlIiwic3RhdGUiLCJhY3RpdmVBcnRpY2xlIiwiYXJ0IiwiYXQiLCJNYXBNb2RlbCIsInJvdXRlciIsIiRjb25maWdEZWYiLCJnZXRKU09OIiwianF4aHIiLCJjb25zb2xlIiwibG9nIiwiX21ha2VDb2xsZWN0aW9uIiwibW9kZWxzIiwibWFwY29uZmlnIiwiY2JzIiwiZGVmZXJyZWRzIiwibWFya2VycyIsImVycm9yTXNnIiwiJGFydERlZiIsInB1c2giLCJtbSIsImpzb24iLCJhcHAiLCJsaXN0ZW5UbyIsIlVzZXJFcnJvck1vZGVsIiwiVXNlckVycm9yVmlldyIsIkNsZWFyVmlldyIsIklzc3VlVmlldyIsIk1hcFZpZXciLCJNZW51VmlldyIsImhhcyIsImhpc3RvcnkiLCJzdGFydCIsIm5hdmlnYXRlIiwiZnJhZ21lbnQiLCJvcHRpb25zIiwicGFnZSIsInBhZ2VDb25maWciLCJob21lIiwicmVuZGVyIiwicGMiLCJ2aWV3TmFtZSIsImNvbmlmZyIsInN0cmluZ2lmeSIsInZpZXciLCJsb2NhdGlvbiIsImhyZWYiLCJmdWxsIiwicGFydGlhbCIsInJlcXVpcmUiLCJWaWV3IiwidiIsImlkIiwicmVtb3ZlIiwiaXN2IiwibXB2IiwiY2hpbGRyZW4iLCJtbnYiLCJBcHBWaWV3IiwiZWwiLCJyZXNpemUiLCJyZWxvYWQiLCJwb3BvdmVyVGVtcGwiLCJwb3BvdmVyQ29udGVudFRlbXAiLCJBcnRpY2xlVmlldyIsIiRlbCIsImh0bWwiLCJhcnRpY2xlLWRpciIsImFwcGVuZCIsInJlbW92ZUNsYXNzIiwiYWRkQ2xhc3MiLCJwb3N0cHJvY2VzcyIsImhlaWdodCIsIm91dGVySGVpZ2h0IiwiY3NzIiwicGN0IiwidGVtcGxhdGUiLCJlbHQiLCJnZXRBdHRyaWJ1dGUiLCIkcG8iLCJ0aXRsZSIsImZpbmQiLCJ0ZXh0IiwiYXR0ciIsImNvbnRlbnQiLCJwb3BvdmVyIiwiY29udGFpbmVyIiwicGxhY2VtZW50IiwiZGVmcyIsImltZyIsImxvYWQiLCJzbGlkZXNqcyIsIm5hdmlnYXRpb24iLCJhY3RpdmUiLCJlZmZlY3QiLCJwYWdpbmF0aW9uIiwiZmFkZSIsInNwZWVkIiwiY3Jvc3NmYWRlIiwiY2FsbGJhY2siLCJsb2FkZWQiLCJudW1iZXIiLCIkaW1nIiwidmlzaWJpbGl0eSIsIndpZHRoIiwibGVmdCIsImNvbXBsZXRlIiwibmV3SW1nIiwicG9zaXRpb24iLCJ0bXBsIiwiZW1wdHkiLCJhdiIsIkwiLCJtYXBQYXJ0aWFsIiwiTWFya2VyVmlldyIsInRhZ05hbWUiLCJNYXAiLCJvcGVucG9wdXAiLCJwb3B1cGlkIiwibGF0bG5nIiwibGF0IiwibG5nIiwiY29uZmlndXJlTWFwIiwiaW52YWxpZGF0ZVNpemUiLCJtYXJrZXJNb2RlbCIsImFkZE1hcmtlclRvTWFwIiwibWFya2VyRGVsYXkiLCJ0aWxlbGF5ZXIiLCJUaWxlTGF5ZXIiLCJ0aWxlTGF5ZXIiLCJzY2FsZSIsImNvbnRyb2wiLCJzZXRWaWV3IiwiTGF0TG5nIiwiem9vbSIsImFkZExheWVyIiwiYWRkVG8iLCJldnQiLCJwb3B1cCIsImdldExhdExuZyIsIm1hcmtlclZpZXciLCJnZW9Kc29uIiwib25FYWNoRmVhdHVyZSIsImZlYXR1cmUiLCJtYXBNYXJrZXIiLCJmZWF0dXJlcyIsInNldENvbnRlbnQiLCJiaW5kUG9wdXAiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaG92ZXJQb3B1cCIsIm9wZW5Qb3B1cCIsImFydGlkIiwicG9pbnRUb0xheWVyIiwiaWNvbiIsImNsaWNrYWJsZSIsInByb3BlcnRpZXMiLCJtYXJrZXJuYW1lIiwib3BhY2l0eSIsInJpc2VPbkhvdmVyIiwibWVudVRtcGwiLCJBcnRpY2xlTWVudVZpZXciLCJpdGVtcyIsIm1lbnUiLCJwcm9taXNlcyIsInRlbXBsYXRlcyIsImNvbGxlY3Rpb25zIiwiaXRlbSIsImNvbGxlY3Rpb24iLCJ0ZW1wbCIsInNvcnRlciIsInN1YkNvbnRlbnQiLCJqIiwiJGxpIiwicmVwbGFjZSIsImFtdiIsIkVsZW1lbnQiLCJub2RlTmFtZSIsIm91dGVySFRNTCIsImNsb25lIiwic29ydEJ5IiwibGFiZWwiLCJ0aGVuIiwiJGZhaWxEZWYiLCJQYWdlVmlldyIsIlBhcnRpYWxWaWV3IiwiJHdhdGNoRGVmIiwibXNnIiwibWVzc2FnZSIsImFtWHNsIiwibWVudWl0ZW0iLCJhdHRyaWJ1dGVzIiwibW9kYWwiLCJrZXlib2FyZCIsInNob3ciLCJwYXRocyIsImpxdWVyeSIsImJvb3RzdHJhcCIsImJhY2tib25lIiwidW5kZXJzY29yZSIsImxlYWZsZXQiLCJwYXJ0aWFscyIsInNoaW0iLCJkZXBzIiwiZXhwb3J0cyIsImNvbmZpZ2ZpbGUiLCJzaXRlY29uZmlnIiwiZGVidWciXSwibWFwcGluZ3MiOiJBQUNBQSxPQUFPLHdCQUNILFNBQ0EsYUFDQSxXQUNBLGtCQUNELFNBQVNDLEVBQUVDLEVBQUVDLEVBQVNDLEdBQ3JCLFlBQ0EsSUFBSUMsR0FBcUJGLEVBQVNHLFdBQVdDLFFBQ3pDQyxNQUFPSixHQUVYLE9BQU9DO0FDVlhMLE9BQU8sdUJBQ0gsU0FDQSxhQUNBLFdBQ0EsaUJBQ0QsU0FBU0MsRUFBRUMsRUFBRUMsRUFBU00sR0FDckIsWUFDQSxJQUFJQyxHQUFvQlAsRUFBU0csV0FBV0MsUUFDeENDLE1BQU9DLEdBRVgsT0FBT0M7QUNWWFYsT0FBTyxvQkFDSCxTQUNBLGNBQ0QsU0FBU0MsRUFBRUMsR0FDVixZQUNBLElBQUlTLElBQ0VDLEtBQU0sS0FDTkMsS0FBTSxXQUNKLE1BQU9DLE1BQUtGLEtBQUtHLFdBR3pCLE9BQU9KO0FDWFhYLE9BQU8scUJBQ0gsVUFDRCxTQUFTQyxHQUNSLFlBQ0EsSUFBSWUsSUFDQUMsU0FBVyxTQUFTQyxFQUFHQyxFQUFJUCxHQUN2QixJQUFLTyxFQUFLLEtBQU0sOEJBQ2hCLElBQXNCLElBQWxCbEIsRUFBRWtCLEdBQUtDLE9BQWMsQ0FDckIsR0FBSUMsR0FBSSxXQUNBcEIsRUFBRWtCLEdBQUtDLE9BQVMsSUFDaEJuQixFQUFFcUIsU0FBU0MsTUFBTUMsSUFBSSxrQkFBbUJILEdBQ3hDVCxFQUFLYSxXQUdieEIsR0FBRXFCLFNBQVNDLE1BQU1HLEdBQUcsa0JBQW1CTCxHQUN2Q00sT0FBT0Ms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QWpKLE1BQU8sR0FBSWdKLElBQ1BrSyxJQUFLLG9DQUFzQ2tCLEVBQWEsS0FBT3BTLFFBSzNFLEdBQUlpSCxJQUNBakosTUFBTyxHQUFJZ0osSUFDUGtLLElBQUsiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qZ2xvYmFsIGRlZmluZSAqL1xuZGVmaW5lKCdjb2xsZWN0aW9ucy9hcnRpY2xlcycsIFtcbiAgICAnanF1ZXJ5JywgXG4gICAgJ3VuZGVyc2NvcmUnLCBcbiAgICAnYmFja2JvbmUnLFxuICAgICdtb2RlbHMvYXJ0aWNsZSdcbl0sIGZ1bmN0aW9uKCQsXyxCYWNrYm9uZSxBcnRpY2xlTW9kZWwpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIEFydGljbGVzQ29sbGVjdGlvbiA9IEJhY2tib25lLkNvbGxlY3Rpb24uZXh0ZW5kKHtcbiAgICAgICAgbW9kZWw6IEFydGljbGVNb2RlbFxuICAgIH0pOyAgICBcbiAgICByZXR1cm4gQXJ0aWNsZXNDb2xsZWN0aW9uO1xufSk7XG4iLCIvKmdsb2JhbCBkZWZpbmUgKi9cbmRlZmluZSgnY29sbGVjdGlvbnMvbWFya2VycycsIFtcbiAgICAnanF1ZXJ5JywgXG4gICAgJ3VuZGVyc2NvcmUnLFxuICAgICdiYWNrYm9uZScsXG4gICAgJ21vZGVscy9tYXJrZXInXG5dLCBmdW5jdGlvbigkLF8sQmFja2JvbmUsTWFya2VyTW9kZWwpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIE1hcmtlcnNDb2xsZWN0aW9uID0gQmFja2JvbmUuQ29sbGVjdGlvbi5leHRlbmQoe1xuICAgICAgICBtb2RlbDogTWFya2VyTW9kZWxcbiAgICB9KTsgICAgXG4gICAgcmV0dXJuIE1hcmtlcnNDb2xsZWN0aW9uO1xufSk7XG4iLCIvKmdsb2JhbCBkZWZpbmUgKi9cbmRlZmluZSgnbWl4aW5zL2FzeW5jSW5pdCcsIFtcbiAgICAnanF1ZXJ5JyxcbiAgICAndW5kZXJzY29yZSdcbl0sIGZ1bmN0aW9uKCQsXykge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgQXN5bmNJbml0ID0ge1xuICAgICAgICAgICRkZWY6IG51bGxcbiAgICAgICAgLCBpbml0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRkZWYucHJvbWlzZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQXN5bmNJbml0O1xufSk7XG4iLCIvKmdsb2JhbCBkZWZpbmUgKi9cbmRlZmluZSgnbWl4aW5zL2RvbXdhdGNoZXInLCBbXG4gICAgJ2pxdWVyeScgXG5dLCBmdW5jdGlvbigkKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBET01XYXRjaGVyID0ge1xuICAgICAgICB3YXRjaERPTSA6IGZ1bmN0aW9uKG1zLHNlbCwkZGVmKSB7XG4gICAgICAgICAgICBpZiAoIXNlbCkgdGhyb3cgXCJFbXB0eSBzZWxlY3RvciBpbiB3YXRjaERPTSgpXCI7XG4gICAgICAgICAgICBpZiAoJChzZWwpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHZhciBmID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgkKHNlbCkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJChkb2N1bWVudC5ib2R5KS5vZmYoJ0RPTU5vZGVJbnNlcnRlZCcsIGYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJGRlZi5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICQoZG9jdW1lbnQuYm9keSkub24oJ0RPTU5vZGVJbnNlcnRlZCcsIGYpO1xuICAgICAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAkKGRvY3VtZW50LmJvZHkpLm9mZignRE9NTm9kZUluc2VydGVkJywgZik7XG4gICAgICAgICAgICAgICAgICAgICRkZWYucmVqZWN0KCk7XG4gICAgICAgICAgICAgICAgfSwgbXMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkZGVmLnJlc29sdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIERPTVdhdGNoZXI7XG59KTtcbiIsIi8qZ2xvYmFsIGRlZmluZSAqL1xuZGVmaW5lKCdtaXhpbnMvZmV0Y2h4bWwnLCBbXG4gICAgJ2pxdWVyeSdcbl0sIGZ1bmN0aW9uKCQpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIEZldGNoWE1MID0ge1xuICAgICAgICAvLyByZXR1cm4gYW4gb2JqZWN0IGltcGxlbWVudGluZyB0aGUgUHJvbWlzZSBpbnRlcmZhY2VcbiAgICAgICAgLy8gd2hlbiBzdWNjZXNzZnVsLCB0aGUgUHJvbWlzZSByZXR1cm5zIHRoZSBkYXRhIGZldGNoZWRcbiAgICAgICAgLy8gYnkgdGhlIGFqYXggcmVxdWVzdFxuICAgICAgICAvLyBkYXRhIHJldHVybmVkIGJ5IHRoZSBwcm9taXNlIGlzIGEgRG9jdW1lbnRcbiAgICAgICAgZmV0Y2hYTUwgOiBmdW5jdGlvbih1cmwpIHtcbiAgICAgICAgICAgIHZhciAkZ2V0ID0gJC5EZWZlcnJlZCgpO1xuICAgICAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgICAgICB0eXBlOiAgICAgJ0dFVCcsXG4gICAgICAgICAgICAgICAgdXJsOiAgICAgIHVybCxcbiAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ3htbCcsXG4gICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgJGdldC5yZXNvbHZlKGRhdGEpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKGpxWEhSLCB0ZXh0U3RhdHVzLCBlcnJvclRocm93bikge1xuICAgICAgICAgICAgICAgICAgICAkZ2V0LnJlamVjdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuICRnZXQucHJvbWlzZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gRmV0Y2hYTUw7XG59KTtcbiIsIi8qZ2xvYmFsIGRlZmluZSAqL1xuZGVmaW5lKCdtaXhpbnMveG1sMmh0bWwnLCBbXG4gICAgJ2pxdWVyeScsXG4gICAgJ3VuZGVyc2NvcmUnXG5dLCBmdW5jdGlvbigkLF8pIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIFhNTDJIVE1MID0ge1xuICAgICAgICBfZG9jOiBmdW5jdGlvbih4bWwpIHtcbiAgICAgICAgICAgIHZhciB4bWxEb2M7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHhtbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICB4bWxEb2MgPSBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKHhtbCwndGV4dC94bWwnKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoeG1sIGluc3RhbmNlb2YgRG9jdW1lbnQpIHtcbiAgICAgICAgICAgICAgICB4bWxEb2MgPSB4bWw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVucmVjb2duaXplZCBkb2N1bWVudCBpbnB1dCBpbiBYTUwySFRNTFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh4bWxEb2MgPT0gbnVsbCB8fCAoIXhtbERvYy5oYXNPd25Qcm9wZXJ0eSgnZ2V0RWxlbWVudHNCeVRhZ05hbWUnKSAmJiB4bWxEb2MuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3BhcnNlcmVycm9yJykubGVuZ3RoID4gMCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gcGFyc2UgZG9jdW1lbnQgaW4geG1sMmh0bWxcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geG1sRG9jO1xuICAgICAgICB9LFxuICAgICAgICAvLyByZXR1cm4gSFRNTCBvciBKU09OIHN0cmluZyBmcm9tIFhTTFQgdHJhbnNmb3JtYXRpb25cbiAgICAgICAgeG1sMmh0bWw6IGZ1bmN0aW9uKHhtbCx4c2wscGFyYW1zLG1vZGUpIHtcbiAgICAgICAgICAgIHZhciB4bWxEb2MgPSB0aGlzLl9kb2MoeG1sKSxcbiAgICAgICAgICAgICAgICB4c2xEb2MgPSB0aGlzLl9kb2MoeHNsKTtcbiAgICAgICAgICAgIHZhciB4c2x0UHJvY2Vzc29yID0gbmV3IFhTTFRQcm9jZXNzb3IoKTtcbiAgICAgICAgICAgIHhzbHRQcm9jZXNzb3IuaW1wb3J0U3R5bGVzaGVldCh4c2xEb2MpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgXy5lYWNoKF8ua2V5cyhwYXJhbXMpLCBmdW5jdGlvbihrZXkpe1xuICAgICAgICAgICAgICAgICAgICB4c2x0UHJvY2Vzc29yLnNldFBhcmFtZXRlcihudWxsLGtleSxwYXJhbXNba2V5XSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgZG9jID0geHNsdFByb2Nlc3Nvci50cmFuc2Zvcm1Ub0RvY3VtZW50KHhtbERvYyk7XG4gICAgICAgICAgICAgICAgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpICE9IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vPHRyYW5zZm9ybWlpeDpyZXN1bHQ+Li4uPC90cmFuc2Zvcm1paXg6cmVzdWx0PlxuICAgICAgICAgICAgICAgICAgICBpZiAobW9kZSA9PT0gJ3RleHQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBkb2MuZG9jdW1lbnRFbGVtZW50LnRleHRDb250ZW50O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtb2RlID09PSAndGV4dCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGRvYy5kb2N1bWVudEVsZW1lbnQudGV4dENvbnRlbnQ7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQgPSBkb2MuYm9keS5pbm5lckhUTUw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFcnJvciBpbiBYU0xUIHRyYW5zZm9ybTogJyArIGUudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gWE1MMkhUTUw7XG59KTtcbiIsIi8qZ2xvYmFsIGRlZmluZSAqL1xuZGVmaW5lKCdtb2RlbHMvYXBwJywgW1xuICAgICdqcXVlcnknLFxuICAgICd1bmRlcnNjb3JlJyxcbiAgICAnYmFja2JvbmUnLFxuICAgICdyb3V0ZXMvcm91dGVyJyxcbiAgICAnbW9kZWxzL2lzc3VlJ1xuXSwgZnVuY3Rpb24oJCxfLEJhY2tib25lLFJvdXRlcixJc3N1ZU1vZGVsKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBBcHBNb2RlbCA9IEJhY2tib25lLk1vZGVsLmV4dGVuZCh7XG4gICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKG9wdHMpIHtcbiAgICAgICAgICAgIHZhciBpc3N1ZSA9IG5ldyBJc3N1ZU1vZGVsKHsgY29uZmlnOiBvcHRzLmNvbmZpZyB9KTtcbiAgICAgICAgICAgIG5ldyBSb3V0ZXIoe1xuICAgICAgICAgICAgICAgICAgcm91dGVzOiBvcHRzLmNvbmZpZy5wYWdlcy5yb3V0ZXNcbiAgICAgICAgICAgICAgICAsIGNvbmZpZzogb3B0cy5jb25maWdcbiAgICAgICAgICAgICAgICAsIGlzc3VlOiAgaXNzdWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEFwcE1vZGVsO1xufSk7XG4iLCIvKmdsb2JhbCBkZWZpbmUgKi9cbmRlZmluZSgnbW9kZWxzL2FydGljbGUnLCBbXG4gICAgICAnanF1ZXJ5J1xuICAgICwgJ3VuZGVyc2NvcmUnXG4gICAgLCAnYmFja2JvbmUnXG4gICAgLCAnbWl4aW5zL2ZldGNoeG1sJ1xuICAgICwgJ21peGlucy9hc3luY0luaXQnXG4gICAgLCAnbWl4aW5zL3htbDJodG1sJ1xuICAgICwgJ3RleHQheHNsL2dlb2pzb24ueHNsJ1xuXSwgZnVuY3Rpb24oJCxfLEJhY2tib25lLEZldGNoWE1MLEFzeW5jSW5pdCxYTUwySFRNTCxnZW9Kc29uWHNsKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBBcnRpY2xlTW9kZWwgPSBCYWNrYm9uZS5Nb2RlbC5leHRlbmQoe1xuICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIHRoYXQuJGRlZiA9ICQuRGVmZXJyZWQoKTtcbiAgICAgICAgICAgIHZhciAkZ2V0ID0gdGhhdC5mZXRjaFhNTCh0aGF0LmdldCgncGF0aCcpKTtcbiAgICAgICAgICAgICQud2hlbigkZ2V0KS5kb25lKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB0aGF0LnNldCgneG1sJywgZGF0YSk7XG4gICAgICAgICAgICAgICAgdGhhdC4kZGVmLnJlc29sdmUodGhhdCk7XG4gICAgICAgICAgICB9KS5mYWlsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoYXQuJGRlZi5yZWplY3QoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBkZWZhdWx0czoge1xuICAgICAgICAgICAgLy9UT0RPOiAneG1sJzogc2VyaWFsaXplPyBhbmQgY2FjaGUgdG8gbG9jYWxzdG9yYWdlXG4gICAgICAgICAgICAvLyBhZGQgYWRhcHRlciBmb3IgYWNjZXNzIHRocm91Z2ggLmF0dHJpYnV0ZXNcbiAgICAgICAgICAgIFwieG1sXCIgICA6IG51bGwsICAgICAvLyBEb2N1bWVudFxuICAgICAgICAgICAgXCJtYXJrZXJcIiA6IG51bGwgICAgIC8vIGFzc29jaWF0ZWQgbWFwbWFya2VyIG9iamVjdCwgbmVlZGVkIGZvciBUT0MgbGlua2FnZVxuICAgICAgICB9LFxuICAgICAgICBzZWxlY3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCdhY3RpdmUnKTtcbiAgICAgICAgfSxcbiAgICAgICAgdW5zZWxlY3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCdpbmFjdGl2ZScpO1xuICAgICAgICB9LFxuICAgICAgICBnZW9qc29uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBnZW9qc29uID0gJ3t9JztcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFyIHhtbCA9IHRoaXMuZ2V0KCd4bWwnKTtcbiAgICAgICAgICAgICAgICB2YXIganNvblN0cmluZyA9IHRoaXMueG1sMmh0bWwoeG1sLCBnZW9Kc29uWHNsLCB7fSwgJ3RleHQnKTtcbiAgICAgICAgICAgICAgICBnZW9qc29uID0gSlNPTi5wYXJzZShqc29uU3RyaW5nKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gcGFyc2UgdG8ganNvbjogXCIgKyBlLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGdlb2pzb247XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBfLmV4dGVuZChBcnRpY2xlTW9kZWwucHJvdG90eXBlLEZldGNoWE1MKTtcbiAgICBfLmV4dGVuZChBcnRpY2xlTW9kZWwucHJvdG90eXBlLEFzeW5jSW5pdCk7XG4gICAgXy5leHRlbmQoQXJ0aWNsZU1vZGVsLnByb3RvdHlwZSxYTUwySFRNTCk7XG4gICAgcmV0dXJuIEFydGljbGVNb2RlbDtcbn0pO1xuIiwiLypnbG9iYWwgZGVmaW5lICovXG5kZWZpbmUoJ21vZGVscy9pc3N1ZScsIFtcbiAgICAgICdqcXVlcnknXG4gICAgLCAndW5kZXJzY29yZSdcbiAgICAsICdiYWNrYm9uZSdcbiAgICAsICdtb2RlbHMvYXJ0aWNsZSdcbiAgICAsICdjb2xsZWN0aW9ucy9hcnRpY2xlcydcbiAgICAsICdtaXhpbnMvYXN5bmNJbml0J1xuXSwgZnVuY3Rpb24oJCxfLEJhY2tib25lLEFydGljbGVNb2RlbCxBcnRpY2xlQ29sbGVjdGlvbixBc3luY0luaXQpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIElzc3VlTW9kZWwgPSBCYWNrYm9uZS5Nb2RlbC5leHRlbmQoe1xuICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCAgICA9IHRoaXM7XG4gICAgICAgICAgICB0aGF0LiRkZWYgICA9ICQuRGVmZXJyZWQoKTtcbiAgICAgICAgICAgIHZhciBhcnRkaXIgID0gYXJncy5jb25maWcuYXJ0aWNsZXMucGF0aEJhc2U7XG4gICAgICAgICAgICBpZiAoIWFydGRpci5tYXRjaCgvXFwvJC8pKSBhcnRkaXIgKz0gJy8nO1xuICAgICAgICAgICAgdmFyIGZpbGVzICAgPSBhcmdzLmNvbmZpZy5hcnRpY2xlcy5maWxlcztcbiAgICAgICAgICAgIHZhciBjb2wgICAgID0gbmV3IEFydGljbGVDb2xsZWN0aW9uKCk7XG4gICAgICAgICAgICB0aGF0LmNvbmZpZyA9IGFyZ3MuY29uZmlnO1xuICAgICAgICAgICAgdGhhdC5zZXQoJ2NvbGxlY3Rpb24nLCBjb2wpO1xuICAgICAgICAgICAgLy8gZml4IGxlbmd0aCBvZiBhcnRpY2xlcyBhcnJheVxuICAgICAgICAgICAgdmFyIGFydGljbGVzID0gXy5tYXAoXy5yYW5nZShmaWxlcy5sZW5ndGgpLCBmdW5jdGlvbigpe3JldHVybiB1bmRlZmluZWQ7fSk7XG4gICAgICAgICAgICAvLyBhcnRpY2xlcyBjb25zdHJ1Y3RlZCBzeW5jLCBzbyBhcnRpY2xlIG9iamVjdHMgYWRkZWQgdG8gbGlzdCBieSBpbmRleFxuICAgICAgICAgICAgXy5lYWNoKGZpbGVzLCBmdW5jdGlvbihmaWxlLGkpIHtcbiAgICAgICAgICAgICAgICBhcnRpY2xlc1tpXSA9IG5ldyBBcnRpY2xlTW9kZWwoe1xuICAgICAgICAgICAgICAgICAgICBhcnRpY2xlaWQ6ICBpLFxuICAgICAgICAgICAgICAgICAgICBhcnRpY2xlZGlyOiBhcnRkaXIsXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6ICAgICAgIGFydGRpciArIGZpbGVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB2YXIgaW5pdHMgPSBfLm1hcChhcnRpY2xlcywgZnVuY3Rpb24oYXJ0aWNsZSl7cmV0dXJuIGFydGljbGUuaW5pdCgpO30pO1xuICAgICAgICAgICAgLy8gTk9URTogLmZhaWwoKSBpcyBub3QgY2FsbGVkOyBmYWlsdXJlIGlzIGhhbmRsZWQgaW4gLmFsd2F5cygpXG4gICAgICAgICAgICAkLndoZW4oe30saW5pdHMpLmZhaWwoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdGhhdC4kZGVmLnJlamVjdCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAkLndoZW4uYXBwbHkobnVsbCxpbml0cykuZG9uZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBjb2wuYWRkKGFydGljbGVzKTtcbiAgICAgICAgICAgICAgICB0aGF0Lm9uKCdzZWxlY3QnLCBmdW5jdGlvbihhcnRpY2xlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuX3NlbGVjdEFydGljbGUoYXJ0aWNsZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhhdC4kZGVmLnJlc29sdmUodGhhdCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICQud2hlbi5hcHBseShudWxsLGluaXRzKS5hbHdheXMoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgXy5mb3JFYWNoKGluaXRzLCBmdW5jdGlvbigkcHJvbWlzZSl7XG4gICAgICAgICAgICAgICAgICAgIGlmICgkcHJvbWlzZS5zdGF0ZSgpID09PSAncmVqZWN0ZWQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC4kZGVmLnJlamVjdCgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoYXQuJGRlZi5yZXNvbHZlKHRoYXQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGRlZmF1bHRzOiB7XG4gICAgICAgICAgICBcImFjdGl2ZUFydGljbGVcIiA6IG51bGxcbiAgICAgICAgfSxcbiAgICAgICAgLy8gc2hvdyBhbiBhcnRpY2xlIGFuZCB0aGUgY29ycmVzcG9uZGluZyBwaW5cbiAgICAgICAgLy8gYXJ0aWNsZSBtYXkgYmUgZWl0aGVyIGFuIGluZGV4IGludG8gdGhlIGNvbGxlY3Rpb25cbiAgICAgICAgLy8gKGUuZy4sIHdoZW4gcHJvdmlkZWQgYnkgYSB1cmwpIG9yIGFuIEFydGljbGVNb2RlbFxuICAgICAgICAvLyAoZS5nLiwgd2hlbiBzZWxlY3RlZCBieSBhIG1hcCBtYXJrZXIpXG4gICAgICAgIF9zZWxlY3RBcnRpY2xlOiBmdW5jdGlvbihhcnRpY2xlKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgY29sID0gdGhhdC5nZXQoJ2NvbGxlY3Rpb24nKTtcbiAgICAgICAgICAgIHZhciBhcnQ7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGFydGljbGUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgYXJ0ID0gYXJ0aWNsZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFydGljbGUgPT09ICdudW1iZXInIHx8IHR5cGVvZiBhcnRpY2xlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGFydCA9IGNvbC5hdChhcnRpY2xlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgXCJCYWQgYXJndW1lbnQgdG8gbW9kZWxzL2lzc3VlXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBhdm9pZCB1bi0gYW5kIHJlLXJlbmRlcmluZyBhbiBhbHJlYWR5LXZpZXdlZCBhcnRpY2xlXG4gICAgICAgICAgICBpZiAoKHRoaXMuZ2V0KCdhY3RpdmVBcnRpY2xlJykgIT09IG51bGwpICYmXG4gICAgICAgICAgICAgICAgKHRoaXMuZ2V0KCdhY3RpdmVBcnRpY2xlJykgPT0gIGFydGljbGUpKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2V0KCdhY3RpdmVBcnRpY2xlJykpIHRoaXMuZ2V0KCdhY3RpdmVBcnRpY2xlJykudW5zZWxlY3QoKTtcbiAgICAgICAgICAgICAgICB0aGF0LnNldCgnYWN0aXZlQXJ0aWNsZScsIGFydCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0aGlzIGludm9sdmVzIGFzeW5jIGluaXRpYWxpemF0aW9uXG4gICAgICAgICAgICBhcnQuaW5pdCgpLmRvbmUoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdGhhdC50cmlnZ2VyKCd1cGRhdGUnLCBhcnQpO1xuICAgICAgICAgICAgICAgIGFydC5zZWxlY3QoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgXy5leHRlbmQoSXNzdWVNb2RlbC5wcm90b3R5cGUsQXN5bmNJbml0KTtcbiAgICByZXR1cm4gSXNzdWVNb2RlbDtcbn0pO1xuIiwiLypnbG9iYWwgZGVmaW5lICovXG5kZWZpbmUoJ21vZGVscy9tYXAnLCBbXG4gICAgICAnanF1ZXJ5J1xuICAgICwgJ3VuZGVyc2NvcmUnXG4gICAgLCAnYmFja2JvbmUnXG4gICAgLCAnY29sbGVjdGlvbnMvbWFya2VycydcbiAgICAsICdtb2RlbHMvbWFya2VyJ1xuICAgICwgJ21peGlucy9hc3luY0luaXQnXG5dLCBmdW5jdGlvbigkLF8sQmFja2JvbmUsTWFya2Vyc0NvbGxlY3Rpb24sTWFya2VyTW9kZWwsQXN5bmNJbml0KSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBNYXBNb2RlbCA9IEJhY2tib25lLk1vZGVsLmV4dGVuZCh7XG4gICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ICAgID0gdGhpcztcbiAgICAgICAgICAgIHRoYXQuJGRlZiAgID0gJC5EZWZlcnJlZCgpO1xuICAgICAgICAgICAgdGhhdC5pc3N1ZSAgPSBhcmdzLmlzc3VlO1xuICAgICAgICAgICAgaWYgKHRoYXQuaXNzdWUgPT09IHVuZGVmaW5lZCkgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIGlzc3VlIG1vZGVsIGluIG1hcCBtb2RlbCcpO1xuICAgICAgICAgICAgdGhhdC5zZXQoJ3JvdXRlcicsIGFyZ3Mucm91dGVyKTtcbiAgICAgICAgICAgIGlmICghYXJncy5yb3V0ZXIpIHRocm93IG5ldyBFcnJvcignTm8gcm91dGVyIGluIE1hcE1vZGVsJyk7XG4gICAgICAgICAgICB2YXIgJGNvbmZpZ0RlZiA9ICQuRGVmZXJyZWQoKTtcbiAgICAgICAgICAgICQuZ2V0SlNPTihhcmdzLmNvbmZpZy5tYXAuY29uZmlnLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgdGhhdC5zZXQoJ21hcGNvbmZpZycsIGRhdGEpO1xuICAgICAgICAgICAgICAgICRjb25maWdEZWYucmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSkuZmFpbChmdW5jdGlvbihqcXhociwgdGV4dFN0YXR1cywgZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAkY29uZmlnRGVmLnJlamVjdCgpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdGYWlsZWQgdG8gbG9hZCBtYXAgY29uZmlnIGZpbGU6ICcgKyBlcnJvcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICQud2hlbi5hcHBseSh7fSxbdGhhdC5pc3N1ZS5pbml0KCksICRjb25maWdEZWZdKS5kb25lKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoYXQuX21ha2VDb2xsZWN0aW9uKHRoYXQuaXNzdWUuZ2V0KCdjb2xsZWN0aW9uJykubW9kZWxzLCB7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCkgeyB0aGF0LiRkZWYucmVzb2x2ZSh0aGF0KTsgfSxcbiAgICAgICAgICAgICAgICAgICAgZmFpbDogICAgZnVuY3Rpb24oKSB7IHRoYXQuJGRlZi5yZWplY3QoKTsgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBUT0RPOiBpc3N1ZSBhcyB0byB3aGV0aGVyIGZhaWwoKS9hbHdheXMoKSBpcyBjYWxsZWQgb24gZmFpbHVyZSBoZXJlO1xuICAgICAgICAgICAgLy8gZmFpbCgpIHNob3VsZCBiZSBjYWxsZWQgb24gZmFsdXJlXG4gICAgICAgICAgICB9KS5mYWlsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoYXQuJGRlZi5yZWplY3QoKTtcbiAgICAgICAgICAgIH0pLmFsd2F5cyhmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHRoYXQuJGRlZi5yZWplY3QoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBkZWZhdWx0czoge1xuICAgICAgICAgICAgXCJtYXBjb25maWdcIiAgICAgOiB7fVxuICAgICAgICB9LFxuICAgICAgICBfbWFrZUNvbGxlY3Rpb24gOiBmdW5jdGlvbihhcnRpY2xlcyxjYnMpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIHZhciBkZWZlcnJlZHMgPSBbXTtcbiAgICAgICAgICAgIHZhciBjb2wgPSBuZXcgTWFya2Vyc0NvbGxlY3Rpb24oKTtcbiAgICAgICAgICAgIHRoYXQuc2V0KCdjb2xsZWN0aW9uJywgY29sKTtcbiAgICAgICAgICAgIHZhciBtYXJrZXJzID0gXy5tYXAoXy5yYW5nZShhcnRpY2xlcy5sZW5ndGgpLCBmdW5jdGlvbigpe3JldHVybiB1bmRlZmluZWQ7fSk7XG4gICAgICAgICAgICB2YXIgZXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBlcnJvck1zZyA9ICcnO1xuICAgICAgICAgICAgYXJ0aWNsZXMuZm9yRWFjaChmdW5jdGlvbihhcnRpY2xlLGkpe1xuICAgICAgICAgICAgICAgIHZhciAkYXJ0RGVmID0gJC5EZWZlcnJlZCgpO1xuICAgICAgICAgICAgICAgIGRlZmVycmVkcy5wdXNoKCRhcnREZWYpO1xuICAgICAgICAgICAgICAgIGFydGljbGUuaW5pdCgpLmRvbmUoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtbTtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1tID0gbmV3IE1hcmtlck1vZGVsKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzc3VlICAgICA6IHRoYXQuaXNzdWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIGFydGljbGUgICA6IGFydGljbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIGpzb24gICAgICA6IGFydGljbGUuZ2VvanNvbigpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLCByb3V0ZXIgICAgOiB0aGF0LnJvdXRlclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIG9uIGZhaWx1cmUgdG8gY3JlYXRlIGdlb2pzb24gZnJvbSBhcnRpY2xlLCB3YXJuXG4gICAgICAgICAgICAgICAgICAgIC8vIGJ1dCBkbyBub3QgYmxvY2sgbWFwXG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTXNnICs9IChcIlxcblwiICsgZS50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRhcnREZWYucmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtYXJrZXJzW2ldID0gbW07XG4gICAgICAgICAgICAgICAgICAgICRhcnREZWYucmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAkLndoZW4uYXBwbHkoe30sZGVmZXJyZWRzKS5kb25lKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGNvbC5hZGQobWFya2Vycyk7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNc2cpO1xuICAgICAgICAgICAgICAgIGNicy5zdWNjZXNzKCk7XG4gICAgICAgICAgICB9KS5mYWlsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGNicy5mYWlsKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIF8uZXh0ZW5kKE1hcE1vZGVsLnByb3RvdHlwZSxBc3luY0luaXQpO1xuICAgIHJldHVybiBNYXBNb2RlbDtcbn0pO1xuIiwiLypnbG9iYWwgZGVmaW5lICovXG5kZWZpbmUoJ21vZGVscy9tYXJrZXInLCBbXG4gICAgJ2pxdWVyeScsXG4gICAgJ3VuZGVyc2NvcmUnLFxuICAgICdiYWNrYm9uZSdcbl0sIGZ1bmN0aW9uKCQsXyxCYWNrYm9uZSkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgTWFya2VyTW9kZWwgPSBCYWNrYm9uZS5Nb2RlbC5leHRlbmQoe1xuICAgICAgICBcImFydGljbGVcIiAgIDogbnVsbCxcbiAgICAgICAgXCJqc29uXCIgICAgICA6IHt9LFxuICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICB0aGF0LmFwcCA9IGFyZ3MuYXBwO1xuICAgICAgICAgICAgdGhhdC5hcnRpY2xlID0gYXJncy5hcnRpY2xlO1xuICAgICAgICAgICAgdGhhdC5yb3V0ZXIgPSBhcmdzLnJvdXRlcjtcbiAgICAgICAgICAgIGFyZ3MuaXNzdWUuaW5pdCgpLmRvbmUoZnVuY3Rpb24oaXNzdWUpIHtcbiAgICAgICAgICAgICAgICAvLyB3aGVuIGFuIGFydGljbGUgaXMgbWFkZSBhY3RpdmUgKGUuZy4sIHRocm91Z2ggdGhlXG4gICAgICAgICAgICAgICAgLy8gVE9DKSwgcHJvcG9nYXRlIHRocm91Z2ggdG8gdGhlIG1hcCBwYXJ0IG9mIHRoZSBhcHBcbiAgICAgICAgICAgICAgICB0aGF0Lmxpc3RlblRvKHRoYXQuYXJ0aWNsZSwgJ2FjdGl2ZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGF0LnRyaWdnZXIoJ2FjdGl2ZScpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBNYXJrZXJNb2RlbDtcbn0pO1xuIiwiLypnbG9iYWwgZGVmaW5lICovXG5kZWZpbmUoJ3JvdXRlcy9yb3V0ZXInLCBbXG4gICAgICAnanF1ZXJ5J1xuICAgICwgJ3VuZGVyc2NvcmUnXG4gICAgLCAnYmFja2JvbmUnXG4gICAgLCAnbW9kZWxzL2Vycm9yL3VzZXInXG4gICAgLCAndmlld3MvZXJyb3IvdXNlcidcbiAgICAsICd2aWV3cy9jbGVhcidcbiAgICAsICd2aWV3cy9pc3N1ZSdcbiAgICAsICd2aWV3cy9tYXAnXG4gICAgLCAndmlld3MvbWVudSdcbl0sIGZ1bmN0aW9uKCQsXyxCYWNrYm9uZSxVc2VyRXJyb3JNb2RlbCxVc2VyRXJyb3JWaWV3LENsZWFyVmlldyxJc3N1ZVZpZXcsTWFwVmlldyxNZW51Vmlldykge1xuICAgIC8vJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBSb3V0ZXIgPSBCYWNrYm9uZS5Sb3V0ZXIuZXh0ZW5kKHtcbiAgICAgICAgcGFnZXMgICA6IHt9LCAgIC8vIGNvbmZpZyBmb3Igc3VwcG9ydGVkIHBhZ2VzXG4gICAgICAgIGNvbmZpZyAgOiB7fSwgICAvLyBnbG9iYWwgc2l0ZSBjb25maWd1cmF0aW9uLCBpLmUuLCBzaXRlLmpzb25cbiAgICAgICAgaXNzdWUgICA6IG51bGwsIC8vIElzc3VlTW9kZWwgZm9yIHRoaXMgYXBwXG4gICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKG9wdHMpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ICAgID0gdGhpcztcbiAgICAgICAgICAgIHRoaXMuY29uZmlnID0gb3B0cy5jb25maWc7XG4gICAgICAgICAgICB0aGlzLnBhZ2VzICA9IG9wdHMuY29uZmlnLnBhZ2VzO1xuICAgICAgICAgICAgdGhpcy5pc3N1ZSAgPSBvcHRzLmlzc3VlO1xuICAgICAgICAgICAgdGhpcy5pc3N1ZS5pbml0KCkuZG9uZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAvLyBwYWdlcy5yb3V0ZXIuaGlzdG9yeSA9IHRydWUgYnkgZGVmYXVsdCwgaWYgbWlzc2luZ1xuICAgICAgICAgICAgICAgIGlmIChfLmhhcyh0aGF0LnBhZ2VzLnJvdXRlciwnaGlzdG9yeScpICYmICEhdGhhdC5wYWdlcy5yb3V0ZXIuaGlzdG9yeSkge1xuICAgICAgICAgICAgICAgICAgICBCYWNrYm9uZS5oaXN0b3J5LnN0YXJ0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIG5hdmlnYXRlOiBmdW5jdGlvbihmcmFnbWVudCxvcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAoQmFja2JvbmUuaGlzdG9yeS5mcmFnbWVudCA9PT0gZnJhZ21lbnQpIHJldHVybjtcbiAgICAgICAgICAgIEJhY2tib25lLmhpc3RvcnkubmF2aWdhdGUoZnJhZ21lbnQsb3B0aW9ucyk7XG4gICAgICAgIH0sXG4gICAgICAgIHBhZ2U6IGZ1bmN0aW9uKHBhZ2UpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIHZhciBwYWdlQ29uZmlnO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoIXBhZ2UpIHBhZ2UgPSB0aGlzLnBhZ2VzLmhvbWU7XG4gICAgICAgICAgICAgICAgcGFnZUNvbmZpZyA9IHRoaXMucGFnZXMucGFnZXNbcGFnZV07XG4gICAgICAgICAgICAgICAgaWYgKHBhZ2VDb25maWcgPT09IHVuZGVmaW5lZCkgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIGNvbmZpZyBpbiByb3V0ZXIvcGFnZScpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhZ2UoJzQwNCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gY2xlYXIgdGhlIDxib2R5PlxuICAgICAgICAgICAgKG5ldyBDbGVhclZpZXcoKSkucmVuZGVyKCk7XG4gICAgICAgICAgICBfLmVhY2gocGFnZUNvbmZpZywgZnVuY3Rpb24ocGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmlld05hbWU7XG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgY29uZmlnOiB0aGF0LmNvbmZpZ1xuICAgICAgICAgICAgICAgICAgICAsIGlzc3VlOiAgdGhhdC5pc3N1ZVxuICAgICAgICAgICAgICAgICAgICAsIHJvdXRlcjogdGhhdFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgLy8gY2xvbmUgY29uZmlnIHRvIGF2b2lkIGdsb2JhbCBjaGFuZ2VzXG4gICAgICAgICAgICAgICAgdmFyIGNvbmlmZyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocGMpKTtcbiAgICAgICAgICAgICAgICBpZiAoXy5oYXMoY29uaWZnLCAndmlldycpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZpZXdOYW1lID0gY29uaWZnLnZpZXc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChfLmhhcyhjb25pZmcsICdwYXJ0aWFsJykpIHtcbiAgICAgICAgICAgICAgICAgICAgdmlld05hbWUgPSAndmlld3MvcGFydGlhbCc7XG4gICAgICAgICAgICAgICAgICAgIGNvbmlmZy5wYXJ0aWFsLnBhZ2UgPSB0aGF0LnBhZ2VzLnBhdGhCYXNlICsgY29uaWZnLnBhcnRpYWwucGFnZTtcbiAgICAgICAgICAgICAgICAgICAgYXJncyA9IF8uZXh0ZW5kKGFyZ3MsY29uaWZnLnBhcnRpYWwpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoXy5oYXMoY29uaWZnLCAnZnVsbCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gY29uaWZnLmZ1bGwucGFnZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgcGFnZSB0eXBlIGluIHJvdXRlcjogJyArIHBhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXF1aXJlKFt2aWV3TmFtZV0sIGZ1bmN0aW9uKFZpZXcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHYgPSBuZXcgVmlldyhhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgdi5yZW5kZXIoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBhcnRpY2xlIDogZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgICAgICQoJyN0aXRsZXBhZ2UnKS5yZW1vdmUoKTtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIHZhciBhcmdzID0ge1xuICAgICAgICAgICAgICAgICAgY29uZmlnOiB0aGF0LmNvbmZpZ1xuICAgICAgICAgICAgICAgICwgaXNzdWU6ICB0aGF0Lmlzc3VlXG4gICAgICAgICAgICAgICAgLCByb3V0ZXI6IHRoYXRcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoJCgnI2lzc3VlJykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlzdiA9IG5ldyBJc3N1ZVZpZXcoYXJncyk7XG4gICAgICAgICAgICAgICAgaXN2LnJlbmRlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCQoJyNtYXAnKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgbXB2ID0gbmV3IE1hcFZpZXcoYXJncyk7XG4gICAgICAgICAgICAgICAgbXB2LnJlbmRlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCQoJyNtZW51JykuY2hpbGRyZW4oKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgbW52ID0gbmV3IE1lbnVWaWV3KGFyZ3MpO1xuICAgICAgICAgICAgICAgIG1udi5yZW5kZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoYXQuaXNzdWUudHJpZ2dlcignc2VsZWN0JywgaWQpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIFJvdXRlcjtcbn0pO1xuIiwiLypnbG9iYWwgZGVmaW5lICovXG5kZWZpbmUoJ3ZpZXdzL2FwcCcsIFtcbiAgICAnanF1ZXJ5JyxcbiAgICAndW5kZXJzY29yZScsXG4gICAgJ2JhY2tib25lJ1xuXSwgZnVuY3Rpb24oJCxfLEJhY2tib25lKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBzaWduYWwgPSB7fTtcbiAgICB2YXIgQXBwVmlldyA9IEJhY2tib25lLlZpZXcuZXh0ZW5kKHtcbiAgICAgICAgZWw6ICdib2R5JyxcbiAgICAgICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICAkKHdpbmRvdykucmVzaXplKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQXBwVmlldztcbn0pO1xuIiwiLypnbG9iYWwgZGVmaW5lKi9cbmRlZmluZSgndmlld3MvYXJ0aWNsZScsIFtcbiAgICAnanF1ZXJ5JyxcbiAgICAndW5kZXJzY29yZScsXG4gICAgJ2JhY2tib25lJyxcbiAgICAnbWl4aW5zL2RvbXdhdGNoZXInLFxuICAgICdtaXhpbnMveG1sMmh0bWwnLFxuICAgICd0ZXh0IXhzbC9hcnRpY2xlLnhzbCcsXG4gICAgJ3RleHQhcGFydGlhbHMvcG9wb3Zlci5odG1sJyxcbiAgICAndGV4dCFwYXJ0aWFscy9wb3BvdmVyLWNvbnRlbnQuaHRtbCcsXG4gICAgJ3NsaWRlc2pzJ1xuXSwgZnVuY3Rpb24oJCxfLEJhY2tib25lLERPTVdhdGNoZXIsWE1MMkhUTUwseHNsLHBvcG92ZXJUZW1wbCxwb3BvdmVyQ29udGVudFRlbXApIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIEFydGljbGVWaWV3ID0gQmFja2JvbmUuVmlldy5leHRlbmQoe1xuICAgICAgICBpZDogJ2FydGljbGUnLFxuICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICB0aGF0LmNvbmZpZyA9IGFyZ3MuY29uZmlnO1xuICAgICAgICB9LFxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIHRoYXQuJGVsID0gJCgnIycgKyB0aGF0LmlkKTtcbiAgICAgICAgICAgIHZhciBodG1sID0gdGhpcy54bWwyaHRtbChcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLmdldCgneG1sJyksXG4gICAgICAgICAgICAgICAgeHNsLFxuICAgICAgICAgICAgICAgIHtcImFydGljbGUtZGlyXCI6IHRoYXQuY29uZmlnLmFydGljbGVzLnBhdGhCYXNlfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgJCgnLmFydGljbGUtY29udGVudCcpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICQoJyMnK3RoaXMuaWQpLmFwcGVuZChodG1sKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImFydGljbGUgbG9hZCBlcnJvcjogXCIgKyBlLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCAkKCdpbWcuc2xpZGVzanMtc2xpZGUnKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAkKCcjZm9vdGVyJykucmVtb3ZlKClcbiAgICAgICAgICAgICAgICAkKCdhcnRpY2xlJykucmVtb3ZlQ2xhc3MoJ2JlZm9yZS1mb290ZXInKS5hZGRDbGFzcygnbm8tZm9vdGVyJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQucG9zdHByb2Nlc3MoKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBoYW5kbGUgYXJ0aWNsZSBpbWFnZXNcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoYXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24oKSB7IC8qIHJldGFpbiAqL30sXG4gICAgICAgIHBvc3Rwcm9jZXNzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIC8vIGFkanVzdCBoZWlnaHQgb2YgYXJ0aWNsZSBib2R5XG4gICAgICAgICAgICAvLyBUT0RPOiBoYW5kbGUgaW4gY3NzXG4gICAgICAgICAgICB2YXIgaGVpZ2h0ID0gJCgnI2FydGljbGUgYXJ0aWNsZScpLmhlaWdodCgpIC0gJCgnI2hlYWRlcicpLm91dGVySGVpZ2h0KHRydWUpO1xuICAgICAgICAgICAgJCgnI2JvZHknKS5jc3Moe2hlaWdodDpoZWlnaHR9KTtcbiAgICAgICAgICAgIC8vIGFkZCBwb3BvdmVycyB0byBpbWFnZXNcbiAgICAgICAgICAgIHZhciBwY3QgPSBfLnRlbXBsYXRlKHBvcG92ZXJDb250ZW50VGVtcCk7XG4gICAgICAgICAgICAkKCdpbWcuc2xpZGVzanMtc2xpZGUnKS5lYWNoKGZ1bmN0aW9uKGksZWx0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGlkID0gZWx0LmdldEF0dHJpYnV0ZSgnaWQnKTtcbiAgICAgICAgICAgICAgICB2YXIgJHBvID0gJCgnLnBvcG92ZXIuJyArIGlkKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICB2YXIgdGl0bGUgPSAkcG8uZmluZCgnLmhlYWQnKS50ZXh0KCk7XG4gICAgICAgICAgICAgICAgJChlbHQpLmF0dHIoJ2FsdCcsICRwby5maW5kKCcuZGVzYycpLnRleHQoKSk7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSBwY3Qoe1xuICAgICAgICAgICAgICAgICAgICBhdHRyOiAkcG8uZmluZCgnLmF0dHInKS50ZXh0KClcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAkKGVsdCkucG9wb3Zlcih7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogXCJib2R5XCIsXG4gICAgICAgICAgICAgICAgICAgIGh0bWwgOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBjb250ZW50LFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogdGl0bGUsXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiBwb3BvdmVyVGVtcGwsXG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXI6IFwiaG92ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50OiBcImxlZnRcIlxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyByZW1vdmUgaW1hZ2VzIHRoYXQgZmFpbCB0byBsb2FkLCBzaW5jZSB3ZSBjYW5ub3QgZG9cbiAgICAgICAgICAgIC8vIGEgZmlsZSB0ZXN0IHdoZW4gcnVubmluZyB0aGUgeHNsXG4gICAgICAgICAgICB2YXIgZGVmcyA9IFtdO1xuICAgICAgICAgICAgdGhhdC4kZWwuZmluZCgnaW1nLnNsaWRlc2pzLXNsaWRlJykuZWFjaChmdW5jdGlvbihpLGltZyl7XG4gICAgICAgICAgICAgICAgdmFyICRkZWYgPSAkLkRlZmVycmVkKCk7XG4gICAgICAgICAgICAgICAgJChpbWcpLmxvYWQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgJChpbWcpLnJlbW92ZUNsYXNzKCdyZW1vdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgJGRlZi5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgJChpbWcpLmVycm9yKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIC8vIGFsbG93IHNvbWUgdGltZSBiZWZvcmUgZmFpbHVyZVxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgJGRlZi5yZWplY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgfSw1MDApO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGRlZnMucHVzaCgkZGVmKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgJC53aGVuLmFwcGx5KHt9LGRlZnMpLmFsd2F5cyhmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICQoJ2ltZy5zbGlkZXNqcy1zbGlkZS5yZW1vdmUnKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAkKCcuaW1hZ2UtbG9hZGluZycpLnJlbW92ZUNsYXNzKCdpbWFnZS1sb2FkaW5nJyk7XG4gICAgICAgICAgICAgICAgLy8gY29uZmlndXJlIHNsaWRlc2pzOyB1cCB0byBub3csICdkaXNwbGF5Om5vbmUnXG4gICAgICAgICAgICAgICAgLy8gaGFzIGFwcGxpZWRcbiAgICAgICAgICAgICAgICAkKFwiI3NsaWRlc1wiKS5zbGlkZXNqcyh7XG4gICAgICAgICAgICAgICAgICAgIG5hdmlnYXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZTogKCQoJ2ltZy5zbGlkZXNqcy1zbGlkZScpLmxlbmd0aCA+IDEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZWZmZWN0OiBcImZhZGVcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmU6ICgkKCdpbWcuc2xpZGVzanMtc2xpZGUnKS5sZW5ndGggPiAxKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVmZmVjdDogXCJmYWRlXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZWZmZWN0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmYWRlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNwZWVkOiAxMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNyb3NzZmFkZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazoge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FsbGVkIG9uIGxvYWQgb2YgZmlyc3QgcGljXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2FkZWQ6IGZ1bmN0aW9uKG51bWJlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkaW1nID0gJChcIi5zbGlkZXNqcy1jb250cm9sXCIpLmNoaWxkcmVuKCc6ZXEoJysgKG51bWJlciAtIDEpICsgJyknKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaW1nLmNzcyh7dmlzaWJpbGl0eTogXCJoaWRkZW5cIn0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpbWcuY3NzKHsgaGVpZ2h0OiAkKFwiLnNsaWRlc2pzLWNvbnRhaW5lclwiKS5oZWlnaHQoKSwgd2lkdGg6IFwiYXV0b1wiIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsZWZ0ID0gKCQoXCIuc2xpZGVzanMtY29udGFpbmVyXCIpLndpZHRoKCkgLSAkaW1nLndpZHRoKCkpLzI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGltZy5jc3MoeyBsZWZ0OiBsZWZ0IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpbWcuY3NzKHsgdmlzaWJpbGl0eTogXCJ2aXNpYmxlXCIgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FsbGVkIHN0YXJ0IG9mIGNoYW5nZSBvZiBwaWMgKGFmdGVyIGZpcnN0KVxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uKG51bWJlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoXCIuc2xpZGVzanMtY29udHJvbFwiKS5jaGlsZHJlbigpLmNzcyh7dmlzaWJpbGl0eTogXCJoaWRkZW5cIn0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhbGxlZCBlbmQgb2YgY2hhbmdlIG9mIHBpYyAoYWZ0ZXIgZmlyc3QpXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24obnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0ltZyA9IG51bWJlciAtIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRpbWcgPSAkKFwiLnNsaWRlc2pzLWNvbnRyb2xcIikuY2hpbGRyZW4oJzplcSgnKyBuZXdJbWcgKyAnKScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpbWcuY3NzKHsgaGVpZ2h0OiAkKFwiLnNsaWRlc2pzLWNvbnRhaW5lclwiKS5oZWlnaHQoKSwgd2lkdGg6IFwiYXV0b1wiLCBwb3NpdGlvbjogXCJyZWxhdGl2ZVwifSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGltZy5jc3MoeyB2aXNpYmlsaXR5OiBcInZpc2libGVcIiB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdGhhdDtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIF8uZXh0ZW5kKEFydGljbGVWaWV3LnByb3RvdHlwZSxET01XYXRjaGVyKTtcbiAgICBfLmV4dGVuZChBcnRpY2xlVmlldy5wcm90b3R5cGUsWE1MMkhUTUwpO1xuICAgIHJldHVybiBBcnRpY2xlVmlldztcbn0pO1xuIiwiLypnbG9iYWwgZGVmaW5lKi9cbmRlZmluZSgndmlld3MvY2xlYXInLCBbXG4gICAgJ2pxdWVyeScsXG4gICAgJ3VuZGVyc2NvcmUnLFxuICAgICdiYWNrYm9uZSdcbl0sIGZ1bmN0aW9uKCQsXyxCYWNrYm9uZSx0bXBsKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBDbGVhclZpZXcgPSBCYWNrYm9uZS5WaWV3LmV4dGVuZCh7XG4gICAgICAgIGVsOiAnYm9keScsXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkKCdib2R5JykuZW1wdHkoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDbGVhclZpZXc7XG59KTtcbiIsIi8qZ2xvYmFsIGRlZmluZSovXG5kZWZpbmUoJ3ZpZXdzL2lzc3VlJywgW1xuICAgICAgJ2pxdWVyeSdcbiAgICAsICd1bmRlcnNjb3JlJ1xuICAgICwgJ2JhY2tib25lJ1xuICAgICwgJ3RleHQhcGFydGlhbHMvaXNzdWUuaHRtbCdcbiAgICAsICd2aWV3cy9hcnRpY2xlJ1xuXSwgZnVuY3Rpb24oJCxfLEJhY2tib25lLHRtcGwsQXJ0aWNsZVZpZXcpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIElzc3VlVmlldyA9IEJhY2tib25lLlZpZXcuZXh0ZW5kKHtcbiAgICAgICAgZWw6ICAgICAgICAgJyNpc3N1ZScsXG4gICAgICAgIHRlbXBsYXRlOiAgIF8udGVtcGxhdGUodG1wbCksXG4gICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIHRoYXQubW9kZWwgPSBhcmdzLmlzc3VlO1xuICAgICAgICAgICAgdGhhdC5tb2RlbC5vbigndXBkYXRlJywgZnVuY3Rpb24oYXJ0aWNsZSkge1xuICAgICAgICAgICAgICAgIHRoYXQuc2VsZWN0KGFydGljbGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy4kZWwucmVtb3ZlKCk7XG4gICAgICAgICAgICAkKCdib2R5JykuYXBwZW5kKHRtcGwpO1xuICAgICAgICB9LFxuICAgICAgICBzZWxlY3Q6IGZ1bmN0aW9uKGFydGljbGUpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIHZhciBhdiA9IG5ldyBBcnRpY2xlVmlldyh7XG4gICAgICAgICAgICAgICAgICBtb2RlbDogIGFydGljbGVcbiAgICAgICAgICAgICAgICAsIGNvbmZpZzogdGhhdC5tb2RlbC5jb25maWdcbiAgICAgICAgICAgICAgICAsIGlzc3VlOiAgdGhhdFxuICAgICAgICAgICAgICAgICwgcm91dGVyOiB0aGF0Lm1vZGVsLnJvdXRlclxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBhcnRpY2xlLm9uKCdhY3RpdmUnLCAgIGF2LnJlbmRlciwgYXYpO1xuICAgICAgICAgICAgYXJ0aWNsZS5vbignaW5hY3RpdmUnLCBhdi5yZW1vdmUsIGF2KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBJc3N1ZVZpZXc7XG59KTtcbiIsIi8qZ2xvYmFsIGRlZmluZSovXG5kZWZpbmUoJ3ZpZXdzL21hcCcsIFtcbiAgICAgICdqcXVlcnknXG4gICAgLCAndW5kZXJzY29yZSdcbiAgICAsICdiYWNrYm9uZSdcbiAgICAsICdsZWFmbGV0J1xuICAgICwgJ3RleHQhcGFydGlhbHMvbWFwLmh0bWwnXG4gICAgLCAnbW9kZWxzL21hcCdcbiAgICAsICd2aWV3cy9tYXJrZXInXG5dLCBmdW5jdGlvbigkLF8sQmFja2JvbmUsTCxtYXBQYXJ0aWFsLE1hcE1vZGVsLE1hcmtlclZpZXcpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIE1hcFZpZXcgPSBCYWNrYm9uZS5WaWV3LmV4dGVuZCh7XG4gICAgICAgIGlkOiAgICAgICdtYXAnLFxuICAgICAgICB0YWdOYW1lOiAnZGl2JyxcbiAgICAgICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oYXJncykge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgdGhhdC5jb25maWcgPSBhcmdzLmNvbmZpZztcbiAgICAgICAgICAgIHRoYXQubW9kZWwgPSBuZXcgTWFwTW9kZWwoYXJncyk7XG4gICAgICAgICAgICB0aGF0LnJvdXRlciA9IGFyZ3Mucm91dGVyO1xuICAgICAgICB9XG4gICAgICAgICwgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICBpZiAoJCgnIycgKyB0aGF0LmlkKS5jaGlsZHJlbigpLmxlbmd0aCA+IDApIHJldHVybjtcbiAgICAgICAgICAgIC8vIHB1dCBkaXYjbWFwIGluIHBsYWNlXG4gICAgICAgICAgICAvLyBub3RlOiBtYXAuanNvbiBoYXMgdGhlIEBpZCB2YWx1ZToge1wiaWRcIiA6IFwibWFwXCJ9XG4gICAgICAgICAgICAkKCdib2R5JykuYXBwZW5kKG1hcFBhcnRpYWwpO1xuICAgICAgICAgICAgLy8gTGVhZmxldCBjb25maWdcbiAgICAgICAgICAgIHRoaXMubW9kZWwuaW5pdCgpLmRvbmUoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbCAgICAgICA9IHRoYXQubW9kZWwuZ2V0KCdjb2xsZWN0aW9uJyk7XG4gICAgICAgICAgICAgICAgdmFyIG1hcGNvbmZpZyA9IHRoYXQubW9kZWwuZ2V0KCdtYXBjb25maWcnKTtcbiAgICAgICAgICAgICAgICB2YXIgbWFwICAgICAgID0gbmV3IEwuTWFwKG1hcGNvbmZpZy5pZCwgbWFwY29uZmlnLm1hcCk7XG4gICAgICAgICAgICAgICAgdmFyIG9wZW5wb3B1cCA9IHt9O1xuICAgICAgICAgICAgICAgIHZhciBwb3B1cGlkID0gZnVuY3Rpb24obGF0bG5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBsYXRsbmcubGF0LnRvU3RyaW5nKClcbiAgICAgICAgICAgICAgICAgICAgICAgICArIGxhdGxuZy5sbmcudG9TdHJpbmcoKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGhhdC5jb25maWd1cmVNYXAobWFwLG1hcGNvbmZpZyxvcGVucG9wdXAscG9wdXBpZCk7XG4gICAgICAgICAgICAgICAgLy8gbGV0IG1hcCByZW5kZXIgd2hpbGUgbWFya2VycyBhcmUgYWRkZWRcbiAgICAgICAgICAgICAgICBtYXAuaW52YWxpZGF0ZVNpemUoKTtcbiAgICAgICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgY29sLmZvckVhY2goZnVuY3Rpb24obWFya2VyTW9kZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuYWRkTWFya2VyVG9NYXAobWFya2VyTW9kZWwsbWFwLG9wZW5wb3B1cCxwb3B1cGlkLG1hcGNvbmZpZyk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSwgdGhhdC5jb25maWcubWFwLm1hcmtlckRlbGF5KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgICwgY29uZmlndXJlTWFwIDogZnVuY3Rpb24obWFwLG1hcGNvbmZpZyxvcGVucG9wdXAscG9wdXBpZCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgICAgICAgID0gdGhpcztcbiAgICAgICAgICAgIHZhciB0aWxlbGF5ZXIgICA9IG5ldyBMLlRpbGVMYXllcihtYXBjb25maWcudGlsZUxheWVyLnVybCwgbWFwY29uZmlnLnRpbGVMYXllci5vcHRzKTtcbiAgICAgICAgICAgIHZhciBzY2FsZSAgICAgICA9IEwuY29udHJvbC5zY2FsZShtYXBjb25maWcuc2NhbGUpO1xuICAgICAgICAgICAgbWFwLnNldFZpZXcobmV3IEwuTGF0TG5nKG1hcGNvbmZpZy52aWV3LmxhdCwgbWFwY29uZmlnLnZpZXcubG5nKSwgbWFwY29uZmlnLnZpZXcuem9vbSk7XG4gICAgICAgICAgICBtYXAuYWRkTGF5ZXIodGlsZWxheWVyKTtcbiAgICAgICAgICAgIHNjYWxlLmFkZFRvKG1hcCk7XG4gICAgICAgICAgICAvLyB0cmFjayB0aGUgY3VycmVudGx5IG9wZW4gcG9wdXBcbiAgICAgICAgICAgIG1hcC5vbigncG9wdXBvcGVuJywgZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgICAgICAgICAgLy8gZXZlbnQgbGF0ZW5jeSBiZXR3ZWVuIGxlYWZsZXQgYW5kIGJhY2tib25lXG4gICAgICAgICAgICAgICAgLy8gYXBwZWFycyB0byBjYXVzZSBwb3B1cHMgdG8gY29sbGFwc2UgZXJyYXRpY2FsbHlcbiAgICAgICAgICAgICAgICAvLyBpbiBGaXJlZm94IHdoZW4gY2xpY2tpbmcgbWFwIHBpbnNcbiAgICAgICAgICAgICAgICBpZiAobmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgIT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgb3BlbnBvcHVwW3BvcHVwaWQoZXZ0LnBvcHVwLmdldExhdExuZygpKV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG9wZW5wb3B1cFtwb3B1cGlkKGV2dC5wb3B1cC5nZXRMYXRMbmcoKSldID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG1hcC5vbigncG9wdXBjbG9zZScsIGZ1bmN0aW9uKGV2dCl7XG4gICAgICAgICAgICAgICAgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpICE9IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wZW5wb3B1cFtwb3B1cGlkKGV2dC5wb3B1cC5nZXRMYXRMbmcoKSldID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb3BlbnBvcHVwW3BvcHVwaWQoZXZ0LnBvcHVwLmdldExhdExuZygpKV0gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAsIGFkZE1hcmtlclRvTWFwOiBmdW5jdGlvbihtYXJrZXJNb2RlbCxtYXAsb3BlbnBvcHVwLHBvcHVwaWQsbWFwY29uZmlnKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCAgICAgICAgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIGdlb2pzb24gICAgID0gbWFya2VyTW9kZWwuZ2V0KCdqc29uJyk7XG4gICAgICAgICAgICB2YXIgbWFya2VyVmlldyAgPSBuZXcgTWFya2VyVmlldyh7bW9kZWw6IG1hcmtlck1vZGVsLCByb3V0ZXI6IHRoYXQucm91dGVyfSk7XG4gICAgICAgICAgICBtYXJrZXJWaWV3LnJlbmRlcigpO1xuICAgICAgICAgICAgTC5nZW9Kc29uKGdlb2pzb24sIHtcbiAgICAgICAgICAgICAgICAvLyBmZWF0dXJlIGlzIHRoZSBnZW9qc29uLCBhIHJhdyBKUyBvYmplY3RcbiAgICAgICAgICAgICAgICAvLyBtYXBNYXJrZXIgaXNcbiAgICAgICAgICAgICAgICBvbkVhY2hGZWF0dXJlOiBmdW5jdGlvbiAoZmVhdHVyZSwgbWFwTWFya2VyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGFkZCB0aGUgcG9wdXAgdG8gdGhpcyBtYXJrZXJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvcHVwID0gTC5wb3B1cChtYXBjb25maWcuZmVhdHVyZXMucG9wdXApO1xuICAgICAgICAgICAgICAgICAgICBwb3B1cC5zZXRDb250ZW50KG1hcmtlclZpZXcuZWwpO1xuICAgICAgICAgICAgICAgICAgICBtYXBNYXJrZXIuYmluZFBvcHVwKHBvcHVwKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gb3ZlcnJpZGUgdGhlIGRlZmF1bHQgY2xpY2sgaGFuZGxlciBmb3IgdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vIG1hcmtlciwgd2hpY2ggd291bGQgY2xvc2UgdGhlIHBvcHVwIGlmIGl0XG4gICAgICAgICAgICAgICAgICAgIC8vIHdlcmUgYWxyZWFkeSBvcGVuXG4gICAgICAgICAgICAgICAgICAgIG1hcE1hcmtlci5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycpO1xuICAgICAgICAgICAgICAgICAgICBtYXBNYXJrZXIub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXJNb2RlbC50cmlnZ2VyKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIG1hcE1hcmtlci5vbignbW91c2VvdmVyJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhhdC5jb25maWcubWFwLmhvdmVyUG9wdXApIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcGVucG9wdXBbcG9wdXBpZChtYXBNYXJrZXIuZ2V0TGF0TG5nKCkpXSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFwTWFya2VyLm9wZW5Qb3B1cCgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gYXBwbGljYXRpb24gb2JqZWN0LCBub3QgbGVhZmxldGpzXG4gICAgICAgICAgICAgICAgICAgIG1hcmtlck1vZGVsLm9uKCdhY3RpdmUnLCBmdW5jdGlvbihhcnRpZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wZW5wb3B1cFtwb3B1cGlkKG1hcE1hcmtlci5nZXRMYXRMbmcoKSldKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXBNYXJrZXIub3BlblBvcHVwKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBvcGVucG9wdXBbcG9wdXBpZChtYXBNYXJrZXIuZ2V0TGF0TG5nKCkpXSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcG9pbnRUb0xheWVyOiBmdW5jdGlvbiAoZmVhdHVyZSwgbGF0bG5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBMLm1hcmtlcihsYXRsbmcsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb246ICAgICAgICAgICBMLmljb24obWFwY29uZmlnLmZlYXR1cmVzLmljb24pLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2thYmxlOiAgICAgICEhZmVhdHVyZS5wcm9wZXJ0aWVzLnRleHQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogICAgICAgICAgKGZlYXR1cmUucHJvcGVydGllcy5tYXJrZXJuYW1lIHx8ICcnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6ICAgICAgICBtYXBjb25maWcuZmVhdHVyZXMub3BhY2l0eSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJpc2VPbkhvdmVyOiAgICBtYXBjb25maWcuZmVhdHVyZXMucmlzZU9uSG92ZXJcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkuYWRkVG8obWFwKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBNYXBWaWV3O1xufSk7XG4iLCIvKmdsb2JhbCBkZWZpbmUqL1xuZGVmaW5lKCd2aWV3cy9tYXJrZXInLCBbXG4gICAgJ2pxdWVyeScsXG4gICAgJ3VuZGVyc2NvcmUnLFxuICAgICdiYWNrYm9uZScsXG4gICAgJ3RleHQhcGFydGlhbHMvbWFya2VyLmh0bWwnXG5dLCBmdW5jdGlvbigkLF8sQmFja2JvbmUsdG1wbCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgTWFya2VyVmlldyA9IEJhY2tib25lLlZpZXcuZXh0ZW5kKHtcbiAgICAgICAgdGVtcGxhdGU6IF8udGVtcGxhdGUodG1wbCksXG4gICAgICAgIGVsOiAnJyxcbiAgICAgICAgcm91dGVyOiBudWxsLFxuICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICB0aGF0LnJvdXRlciA9IGFyZ3Mucm91dGVyO1xuICAgICAgICAgICAgLy8gd2hlbiBhIG1hcmtlciBpcyBtYWRlIGFjdGl2ZSAoZS5nLiwgYnkgc2VsZWN0aW9uXG4gICAgICAgICAgICAvLyBvZiBhIG1hcmsgaW4gdGhlIG1hcCksIHByb3BvZ2F0ZSB0aGUgZXZlbnQgdG8gdGhlXG4gICAgICAgICAgICAvLyBpc3N1ZSwgZm9yIHVwZGF0ZXMgZWxzZXdoZXJlIGluIHRoZSBhcHBsaWNhdGlvblxuICAgICAgICAgICAgdGhhdC5tb2RlbC5vbignYWN0aXZlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHVybCA9ICdhcnRpY2xlLycgKyB0aGF0Lm1vZGVsLmFydGljbGUuZ2V0KCdhcnRpY2xlaWQnKTtcbiAgICAgICAgICAgICAgICB0aGF0LnJvdXRlci5uYXZpZ2F0ZSh1cmwsIHt0cmlnZ2VyOiB0cnVlfSk7XG4gICAgICAgICAgICAgICAgLy8gZW5zdXJlIHRoYXQgdGhlIGFydGljbGUgaXMgaGFzIGJlZW4gc2VsZWN0ZWRcbiAgICAgICAgICAgICAgICB0aGF0Lm1vZGVsLmdldCgnaXNzdWUnKS50cmlnZ2VyKCdzZWxlY3QnLCB0aGF0Lm1vZGVsLmdldCgnYXJ0aWNsZScpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJldGFpbiBlbXB0eSBmdW5jdGlvbiB0byBhdm9pZCByZWRyYXcvY29sbGFwc2Ugb2ZcbiAgICAgICAgLy8gbWFwIG1hcmtlciBwb3BvdmVyXG4gICAgICAgICwgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuJGVsLmh0bWwoXG4gICAgICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGFydGljbGVpZDogIHRoaXMubW9kZWwuYXJ0aWNsZS5nZXQoJ2FydGljbGVpZCcpLFxuICAgICAgICAgICAgICAgICAgICBnZW9qc29uOiAgICB0aGlzLm1vZGVsLmFydGljbGUuZ2VvanNvbigpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gTWFya2VyVmlldztcbn0pO1xuIiwiLypnbG9iYWwgZGVmaW5lKi9cbmRlZmluZSgndmlld3MvbWVudScsIFtcbiAgICAgICdqcXVlcnknXG4gICAgLCAndW5kZXJzY29yZSdcbiAgICAsICdiYWNrYm9uZSdcbiAgICAsICd0ZXh0IXBhcnRpYWxzL21lbnUuaHRtbCdcbiAgICAsICdtaXhpbnMvZG9td2F0Y2hlcidcbiAgICAsICd2aWV3cy9hcnRpY2xlL21lbnUnXG5dLCBmdW5jdGlvbigkLF8sQmFja2JvbmUsbWVudVRtcGwsRE9NV2F0Y2hlcixBcnRpY2xlTWVudVZpZXcpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIE1lbnVWaWV3ID0gQmFja2JvbmUuVmlldy5leHRlbmQoe1xuICAgICAgICB0ZW1wbGF0ZTogXy50ZW1wbGF0ZShtZW51VG1wbCksXG4gICAgICAgICAgaWQ6ICAgICAgJ21lbnUnXG4gICAgICAgICwgdGFnTmFtZTogJ2RpdidcbiAgICAgICAgLCBpc3N1ZTogICBudWxsXG4gICAgICAgICwgY29uZmlnOiAge31cbiAgICAgICAgLCBpbml0aWFsaXplOiBmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgICAgICB0aGlzLmNvbmZpZyA9IGFyZ3MuY29uZmlnO1xuICAgICAgICAgICAgdGhpcy5pc3N1ZSAgPSBhcmdzLmlzc3VlO1xuICAgICAgICB9LFxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgaWYgKCQoJyMnICsgdGhhdC5pZCkuY2hpbGRyZW4oKS5sZW5ndGggIT09IDApIHJldHVybjtcbiAgICAgICAgICAgIHZhciBpdGVtcyA9IHRoaXMuY29uZmlnLm1lbnU7XG4gICAgICAgICAgICAvLyByZW5kZXIgZWFjaCBpdGVtIGZyb20gdGhlIGNvbmZpZyBmaWxlIHRvIGEgPGxpPlxuICAgICAgICAgICAgLy8gbXVzdCBiZSBkb25lIGFzeW5jIGR1ZSB0byByZXRyaWV2YWwgb2YgcGFydGlhbCBmaWxlc1xuICAgICAgICAgICAgdmFyIHByb21pc2VzID0gW107XG4gICAgICAgICAgICAgLy8gY2FjaGUgb2YgdGVtcGxhdGUgc3RyaW5nczogdXJsID0+IHRlbXBsXG4gICAgICAgICAgICB2YXIgdGVtcGxhdGVzID0ge307XG4gICAgICAgICAgICB2YXIgY29sbGVjdGlvbnMgPSB7fTtcbiAgICAgICAgICAgIF8uZWFjaChpdGVtcywgZnVuY3Rpb24oaXRlbSl7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVzW2l0ZW0ucGFydGlhbF0gPSAnJztcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS50eXBlID09PSAnbWVudScpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBpdGVtLmNvbGxlY3Rpb24gPT09IFwiY29sbGVjdGlvbnMvYXJ0aWNsZXNcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbnNbaXRlbS5jb2xsZWN0aW9uXSA9IHRoYXQuaXNzdWUuZ2V0KCdjb2xsZWN0aW9uJyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmhhbmRsZWQgY29sbGVjdGlvbiB0eXBlIHJlcXVlc3RlZDogXCIgKyBpdGVtLmNvbGxlY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBfLmVhY2goXy5rZXlzKHRlbXBsYXRlcyksIGZ1bmN0aW9uKHVybCkge1xuICAgICAgICAgICAgICAgIHZhciAkZGVmID0gJC5EZWZlcnJlZCgpO1xuICAgICAgICAgICAgICAgIHJlcXVpcmUoWyd0ZXh0IScgKyB1cmxdLCBmdW5jdGlvbih0ZW1wbCkge1xuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZXNbdXJsXSA9IF8udGVtcGxhdGUodGVtcGwpO1xuICAgICAgICAgICAgICAgICAgICAkZGVmLnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBwcm9taXNlcy5wdXNoKCRkZWYucHJvbWlzZSgpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gcmVuZGVyIHRoZSBtZW51IGFzIGEgPGRpdj5cbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gJyc7XG4gICAgICAgICAgICAkLndoZW4uYXBwbHkoJCwgcHJvbWlzZXMpLmRvbmUoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgXy5mb3JFYWNoKGl0ZW1zLCBmdW5jdGlvbihpdGVtLGkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9IGl0ZW0ucGFydGlhbDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNvcnRlciA9IHt9O1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3ViQ29udGVudCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS50eXBlID09PSAncGFnZScgfHwgaXRlbS50eXBlID09PSAnc2VwJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCArPSAodGVtcGxhdGVzW3VybF0pKGl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGl0ZW0udHlwZSA9PT0gJ21lbnUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uc1tpdGVtLmNvbGxlY3Rpb25dLm1vZGVscy5mb3JFYWNoKGZ1bmN0aW9uKG1vZGVsLGopIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaHJlZiAgICA9IGl0ZW0uaXRlbS5ocmVmLnJlcGxhY2UoJzppJywgaik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFtdiAgICAgPSBuZXcgQXJ0aWNsZU1lbnVWaWV3KHttb2RlbDptb2RlbH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgID0gYW12LnJlbmRlcih7aHJlZjogJyMnICsgaHJlZn0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkbGk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmVlZCBhbiA8bGk+IGVsZW1lbnQgaGVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbGkgPSAkKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQubm9kZU5hbWUgPT09ICdCT0RZJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGxpID0gJChyZXN1bHQuaW5uZXJIVE1MKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQubm9kZU5hbWUgPT09ICdMSScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRsaSA9ICQocmVzdWx0Lm91dGVySFRNTCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIGRvY3VtZW50IGVsZW1lbnQgZm9yIHN1Ym1lbnU6ICcgKyByZXN1bHQudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIHJlc3VsdCB0eXBlIGZvciBzdWJtZW51OiAnICsgcmVzdWx0LnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGxpLmF0dHIoJ2RhdGEtc29ydC1rZXknKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3J0ZXJbJGxpLmF0dHIoJ2RhdGEtc29ydC1rZXknKV0gPSAkbGkuY2xvbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3J0ZXJbJGxpLmZpbmQoJ2EnKS50ZXh0KCldID0gJGxpLmNsb25lKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLmVhY2goXy5zb3J0QnkoXy5rZXlzKHNvcnRlciksIGZ1bmN0aW9uKGtleSl7cmV0dXJuIGtleTt9KSwgZnVuY3Rpb24oa2V5KXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJDb250ZW50ICs9IHNvcnRlcltrZXldWzBdLm91dGVySFRNTDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCArPSAodGVtcGxhdGVzW3VybF0pKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogaXRlbS5sYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczogc3ViQ29udGVudFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgJCgnIycgKyB0aGF0LmlkKS5lbXB0eSgpLmFwcGVuZCh0aGF0LnRlbXBsYXRlKHtjb250ZW50OiBjb250ZW50fSkpO1xuICAgICAgICAgICAgICAgIC8vIGNvbmZpcm0gdGhhdCB0aGUgbWVudSBoYXMgbG9hZGVkXG4gICAgICAgICAgICAgICAgdmFyICRmYWlsRGVmID0gJC5EZWZlcnJlZCgpO1xuICAgICAgICAgICAgICAgICRmYWlsRGVmLmZhaWwoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5yZW5kZXIoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGF0LndhdGNoRE9NKDUwMCwgJyMnICsgdGhhdC5pZCwgJGZhaWxEZWYpO1xuICAgICAgICAgICAgfSkuZmFpbChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gYnVpbGQgbWVudS5cIik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIF8uZXh0ZW5kKE1lbnVWaWV3LnByb3RvdHlwZSxET01XYXRjaGVyKTtcbiAgICByZXR1cm4gTWVudVZpZXc7XG59KTtcbiIsIi8qZ2xvYmFsIGRlZmluZSovXG5kZWZpbmUoJ3ZpZXdzL3BhZ2UnLCBbXG4gICAgJ2pxdWVyeScsIFxuICAgICd1bmRlcnNjb3JlJywgXG4gICAgJ2JhY2tib25lJyxcbiAgICAnbWl4aW5zL2RvbXdhdGNoZXInLFxuICAgICd0ZXh0IXBhcnRpYWxzL3BhZ2UuaHRtbCdcbl0sIGZ1bmN0aW9uKCQsXyxCYWNrYm9uZSxET01XYXRjaGVyLHBhZ2UpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIFBhZ2VWaWV3ID0gQmFja2JvbmUuVmlldy5leHRlbmQoe1xuICAgICAgICBlbDogJ2JvZHknLFxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIHZhciAkZGVmID0gJC5EZWZlcnJlZCgpO1xuICAgICAgICAgICAgJGRlZi50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICQodGhhdC5lbCkuYXBwZW5kKHBhZ2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLndhdGNoRE9NKDEwMDAsdGhhdC5lbCwkZGVmKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIF8uZXh0ZW5kKFBhZ2VWaWV3LnByb3RvdHlwZSxET01XYXRjaGVyKTtcbiAgICByZXR1cm4gUGFnZVZpZXc7XG59KTtcbiIsIi8qZ2xvYmFsIGRlZmluZSovXG5kZWZpbmUoJ3ZpZXdzL3BhcnRpYWwnLCBbXG4gICAgICAnanF1ZXJ5J1xuICAgICwgJ3VuZGVyc2NvcmUnXG4gICAgLCAnYmFja2JvbmUnXG4gICAgLCAnbWl4aW5zL2RvbXdhdGNoZXInXG4gICAgLCAnbWl4aW5zL2FzeW5jSW5pdCdcbl0sIGZ1bmN0aW9uKCQsXyxCYWNrYm9uZSxET01XYXRjaGVyLEFzeW5jSW5pdCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgUGFydGlhbFZpZXcgPSBCYWNrYm9uZS5WaWV3LmV4dGVuZCh7XG4gICAgICAgIGVsOiAnJyxcbiAgICAgICAgcGFnZTogJycsXG4gICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKG9wdHMpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ICA9IHRoaXM7XG4gICAgICAgICAgICB0aGF0LmVsICAgPSBvcHRzLmVsO1xuICAgICAgICAgICAgdGhhdC4kZGVmID0gJC5EZWZlcnJlZCgpO1xuICAgICAgICAgICAgcmVxdWlyZShbJ3RleHQhJyArIG9wdHMucGFnZV0sIGZ1bmN0aW9uKGh0bWwpIHtcbiAgICAgICAgICAgICAgICB0aGF0LnBhZ2UgPSBodG1sO1xuICAgICAgICAgICAgICAgIHRoYXQuJGRlZi5yZXNvbHZlKHRoYXQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgdmFyICR3YXRjaERlZiA9ICQuRGVmZXJyZWQoKTtcbiAgICAgICAgICAgIHRoYXQuaW5pdCgpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgJCh0aGF0LmVsKS5hcHBlbmQodGhhdC5wYWdlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy53YXRjaERPTSgxMDAwLHRoYXQuZWwsJHdhdGNoRGVmKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIF8uZXh0ZW5kKFBhcnRpYWxWaWV3LnByb3RvdHlwZSxET01XYXRjaGVyKTtcbiAgICBfLmV4dGVuZChQYXJ0aWFsVmlldy5wcm90b3R5cGUsQXN5bmNJbml0KTtcbiAgICByZXR1cm4gUGFydGlhbFZpZXc7XG59KTtcbiIsIi8qZ2xvYmFsIGRlZmluZSAqL1xuZGVmaW5lKCdtb2RlbHMvZXJyb3IvdXNlcicsIFtcbiAgICAnYmFja2JvbmUnXG5dLCBmdW5jdGlvbihCYWNrYm9uZSkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgVXNlckVycm9yTW9kZWwgPSBCYWNrYm9uZS5Nb2RlbC5leHRlbmQoe1xuICAgICAgICBkZWZhdWx0czoge1xuICAgICAgICAgICAgXCJtc2dcIiA6IFwiXCJcbiAgICAgICAgfSxcbiAgICAgICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oYXJncykge1xuICAgICAgICAgICAgdGhpcy5zZXQoJ21zZycsIGFyZ3MubWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICB9KTsgICAgXG4gICAgcmV0dXJuIFVzZXJFcnJvck1vZGVsO1xufSk7XG4iLCIvKmdsb2JhbCBkZWZpbmUqL1xuLypcbiAqIFRoaXMgaXMgbWVhbnQgdG8gYmUgZXh0ZW5kZWQgYXMgYW4gYWJzdHJhY3QgYmFzZSBjbGFzcyBmb3IgdGhlXG4gKiBzZWN0aW9ucyBvZiBhbiBhcnRpY2xlLlxuICovXG5kZWZpbmUoJ3ZpZXdzL2FydGljbGUvbWVudScsIFtcbiAgICAnanF1ZXJ5JywgXG4gICAgJ3VuZGVyc2NvcmUnLCBcbiAgICAnYmFja2JvbmUnLFxuICAgICdtaXhpbnMveG1sMmh0bWwnLFxuICAgICd0ZXh0IXhzbC9hcnRpY2xlLW1lbnUueHNsJ1xuXSwgZnVuY3Rpb24oJCxfLEJhY2tib25lLFhNTDJIVE1MLGFtWHNsKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBBcnRpY2xlTWVudVZpZXcgPSBCYWNrYm9uZS5WaWV3LmV4dGVuZCh7XG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24ocGFyYW1zKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICAvLyB0aGlzIHZpZXcgaXMgbWVhbnQgdG8gYmUgY2FsbGVkIG9ubHkgYWZ0ZXIgdGhlIGNvcnJlc3BvbmRpbmdcbiAgICAgICAgICAgIC8vIGFydGljbGUgbW9kZWwgaGFzIGJlZW4gaW5pdGlhbGl6ZWRcbiAgICAgICAgICAgIGlmICh0aGlzLm1vZGVsLmluaXQoKS5zdGF0ZSgpICE9PSAncmVzb2x2ZWQnKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgXCJVbmluaXRpYWxpemVkIGFydGljbGUgaW4gQXJ0aWNsZU1lbnVWaWV3XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbWVudWl0ZW0gPSB0aGF0LnhtbDJodG1sKHRoYXQubW9kZWwuZ2V0KCd4bWwnKSwgYW1Yc2wsIHBhcmFtcyk7XG4gICAgICAgICAgICByZXR1cm4gbWVudWl0ZW07XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBfLmV4dGVuZChBcnRpY2xlTWVudVZpZXcucHJvdG90eXBlLFhNTDJIVE1MKTtcbiAgICByZXR1cm4gQXJ0aWNsZU1lbnVWaWV3O1xufSk7XG4iLCIvKmdsb2JhbCBkZWZpbmUqL1xuZGVmaW5lKCd2aWV3cy9lcnJvci91c2VyJywgW1xuICAgICdqcXVlcnknLCBcbiAgICAnYmFja2JvbmUnLCBcbiAgICAndGV4dCFwYXJ0aWFscy9lcnJvci91c2VyLmh0bWwnXG5dLCBmdW5jdGlvbigkLEJhY2tib25lLHRtcGwpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIFVzZXJFcnJvclZpZXcgPSBCYWNrYm9uZS5WaWV3LmV4dGVuZCh7XG4gICAgICAgIHRlbXBsYXRlOiBfLnRlbXBsYXRlKHRtcGwpLFxuICAgICAgICBlbDogJCgnI2Vycm9yRGlhbG9nJyksXG4gICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy4kZWwuaHRtbCh0aGlzLnRlbXBsYXRlKHRoaXMubW9kZWwuYXR0cmlidXRlcykpO1xuICAgICAgICAgICAgdGhpcy4kZWwubW9kYWwoe2tleWJvYXJkOiB0cnVlLCBzaG93OiB0cnVlfSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBVc2VyRXJyb3JWaWV3O1xufSk7XG4iLCJyZXF1aXJlLmNvbmZpZyh7XG4gIHBhdGhzOiB7XG4gICAgdGV4dDogICAgICAgJy8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL3JlcXVpcmUtdGV4dC8yLjAuMTIvdGV4dC5taW4nLFxuICAgIGpxdWVyeTogICAgICcvL2NvZGUuanF1ZXJ5LmNvbS9qcXVlcnktMi4xLjQubWluJyxcbiAgICBib290c3RyYXA6ICAnLy9tYXhjZG4uYm9vdHN0cmFwY2RuLmNvbS9ib290c3RyYXAvMy4zLjQvanMvYm9vdHN0cmFwLm1pbicsXG4gICAgYmFja2JvbmU6ICAgJy8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2JhY2tib25lLmpzLzEuMS4yL2JhY2tib25lLW1pbicsXG4gICAgdW5kZXJzY29yZTogJy8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL3VuZGVyc2NvcmUuanMvMS44LjMvdW5kZXJzY29yZS1taW4nLFxuICAgIGxlYWZsZXQ6ICAgICcvL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9sZWFmbGV0LzAuNy4zL2xlYWZsZXQnLFxuICAgIHNsaWRlc2pzOiAgICcvL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9zbGlkZXNqcy8zLjAvanF1ZXJ5LnNsaWRlcy5taW4nLFxuICAgIHBhcnRpYWxzOiAgICcuLi9wYXJ0aWFscycsXG4gICAgeHNsOiAgICAgICAgJy4uL3NjcmlwdC94c2wnLFxuICAgIHBhZ2VzOiAgICAgICcuLi9wYWdlcydcbiAgfSxcbiAgc2hpbToge1xuICAgIGJvb3RzdHJhcDoge1xuICAgICAgZGVwczogWydqcXVlcnknXVxuICAgIH0sXG4gICAgYmFja2JvbmU6IHtcbiAgICAgICAgJ2RlcHMnOiBbJ2pxdWVyeScsICd1bmRlcnNjb3JlJ10sXG4gICAgICAgICdleHBvcnRzJzogJ0JhY2tib25lJ1xuICAgIH0sXG4gICAgdW5kZXJzY29yZToge1xuICAgICAgICAnZXhwb3J0cyc6ICdfJ1xuICAgIH0sXG4gICAgdGV4dDoge1xuICAgICAgICAnZGVwcyc6IFtdXG4gICAgfSxcbiAgICBzbGlkZXNqczoge1xuICAgICAgICBkZXBzOiBbJ2pxdWVyeSddXG4gICAgfVxuICB9XG59KTtcbnJlcXVpcmUoW1xuICAgICdqcXVlcnknLFxuICAgICdtb2RlbHMvZXJyb3IvdXNlcicsXG4gICAgJ3ZpZXdzL2Vycm9yL3VzZXInLFxuICAgICdtb2RlbHMvYXBwJyxcbiAgICAndmlld3MvYXBwJyxcbiAgICAnYm9vdHN0cmFwJ1xuXSwgZnVuY3Rpb24oJCxVc2VyRXJyb3JNb2RlbCxVc2VyRXJyb3JWaWV3LEFwcE1vZGVsLEFwcFZpZXcpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIGNvbmZpZ2ZpbGUgPSAkKCcjbWFpbicpLmF0dHIoJ2RhdGEtY29uZmlnJyk7XG4gICAgaWYgKGNvbmZpZ2ZpbGUpIHtcbiAgICAgICAgJC5nZXRKU09OKGNvbmZpZ2ZpbGUsIGZ1bmN0aW9uKHNpdGVjb25maWcpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFyIGFwcCA9IG5ldyBBcHBWaWV3KHtcbiAgICAgICAgICAgICAgICAgICAgbW9kZWw6IChuZXcgQXBwTW9kZWwoe2NvbmZpZzogc2l0ZWNvbmZpZ30pKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGlmICghb3B0cy5jb25maWcuZGVidWcpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3IFVzZXJFcnJvclZpZXcoe1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWw6IG5ldyBVc2VyRXJyb3JNb2RlbCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbXNnOiBlLnRvU3RyaW5nKClcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkuZmFpbChmdW5jdGlvbihqcXhociwgdGV4dFN0YXR1cywgZXJyb3IpIHtcbiAgICAgICAgICAgIG5ldyBVc2VyRXJyb3JWaWV3KHtcbiAgICAgICAgICAgICAgICBtb2RlbDogbmV3IFVzZXJFcnJvck1vZGVsKHtcbiAgICAgICAgICAgICAgICAgICAgbXNnOiBcIkZhaWxlZCB0byBsb2FkIHNpdGUgY29uZmlnIGZpbGUgJ1wiICsgY29uZmlnZmlsZSArIFwiJyBcIiArIGVycm9yXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBuZXcgVXNlckVycm9yVmlldyh7XG4gICAgICAgICAgICBtb2RlbDogbmV3IFVzZXJFcnJvck1vZGVsKHtcbiAgICAgICAgICAgICAgICBtc2c6IFwiTm8gY29uZmlndXJhdGlvbiBmaWxlbmFtZSBzcGVjaWZpZWQgaW4gaG9tZSBwYWdlLlwiXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICB9XG59KTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
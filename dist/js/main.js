define("collections/articles",["jquery","underscore","backbone","models/article"],function(e,c,n,o){"use strict";var r=n.Collection.extend({model:o});return r});
define("collections/markers",["jquery","underscore","backbone","models/marker"],function(e,r,n,o){"use strict";var c=n.Collection.extend({model:o});return c});
define("mixins/asyncInit",["jquery","underscore"],function(n,e){"use strict";var i={$def:null,init:function(){return this.$def.promise()}};return i});
define("mixins/domwatcher",["jquery"],function(e){"use strict";var t={watchDOM:function(t,o,n){if(!o)throw"Empty selector in watchDOM()";if(0===e(o).length){var d=function(){e(o).length>0&&(e(document.body).off("DOMNodeInserted",d),n.resolve())};e(document.body).on("DOMNodeInserted",d),window.setTimeout(function(){e(document.body).off("DOMNodeInserted",d),n.reject()},t)}else n.resolve()}};return t});
define("mixins/fetchxml",["jquery"],function(e){"use strict";var r={fetchXML:function(r){var t=e.Deferred();return e.ajax({type:"GET",url:r,dataType:"xml",success:function(e){t.resolve(e)},error:function(e,r,n){t.reject()}}),t.promise()}};return r});
define("mixins/xml2html",["jquery","underscore"],function(e,t){"use strict";var r={_doc:function(e){var t;if("string"==typeof e)t=(new DOMParser).parseFromString(e,"text/xml");else{if(!(e instanceof Document))throw new Error("Unrecognized document input in XML2HTML");t=e}if(null==t||!t.hasOwnProperty("getElementsByTagName")&&t.getElementsByTagName("parsererror").length>0)throw new Error("Failed to parse document in xml2html");return t},xml2html:function(e,r,n,o){var i=this._doc(e),m=this._doc(r),a=new XSLTProcessor;a.importStylesheet(m),"object"==typeof n&&t.each(t.keys(n),function(e){a.setParameter(null,e,n[e])});var s;try{var c=a.transformToDocument(i);s=-1!=navigator.userAgent.indexOf("Firefox")?"text"===o?c.documentElement.textContent:c.documentElement:"text"===o?c.documentElement.textContent:s=c.body.innerHTML}catch(u){throw new Error("Error in XSLT transform: "+u.toString())}return s}};return r});
define("routes/router",["jquery","underscore","backbone","models/error/user","views/error/user","views/clear","views/issue","views/map","views/menu"],function(e,i,r,s,t,n,a,o,u){var g=r.Router.extend({pages:{},config:{},issue:null,initialize:function(e){var s=this;this.config=e.config,this.pages=e.config.pages,this.issue=e.issue,this.issue.init().done(function(){i.has(s.pages.router,"history")&&s.pages.router.history&&r.history.start()})},navigate:function(e,i){r.history.fragment!==e&&r.history.navigate(e,i)},page:function(e){var r,s=this;try{if(e||(e=this.pages.home),r=this.pages.pages[e],void 0===r)throw new Error("Missing config in router/page")}catch(t){return this.page("404")}(new n).render(),i.each(r,function(r){var t,n={config:s.config,issue:s.issue,router:s},a=JSON.parse(JSON.stringify(r));if(i.has(a,"view"))t=a.view;else{if(!i.has(a,"partial")){if(i.has(a,"full"))return void(window.location.href=a.full.page);throw new Error("Unsupported page type in router: "+e)}t="views/partial",a.partial.page=s.pages.pathBase+a.partial.page,n=i.extend(n,a.partial)}require([t],function(e){var i=new e(n);i.render()})})},article:function(i){e("#titlepage").remove();var r=this,s={config:r.config,issue:r.issue,router:r};if(0===e("#issue").length){var t=new a(s);t.render()}if(0===e("#map").length){var n=new o(s);n.render()}if(0===e("#menu").children().length){var g=new u(s);g.render()}r.issue.trigger("select",i)}});return g});
define("models/app",["jquery","underscore","backbone","routes/router","models/issue"],function(e,n,o,i,r){"use strict";var s=o.Model.extend({initialize:function(e){var n=new r({config:e.config});new i({routes:e.config.pages.routes,config:e.config,issue:n})}});return s});
define("models/article",["jquery","underscore","backbone","mixins/fetchxml","mixins/asyncInit","mixins/xml2html","text!xsl/geojson.xsl"],function(e,t,n,r,i,o,s){"use strict";var l=n.Model.extend({initialize:function(){var t=this;t.$def=e.Deferred();var n=t.fetchXML(t.get("path"));e.when(n).done(function(e){t.set("xml",e),t.$def.resolve(t)}).fail(function(){t.$def.reject()})},defaults:{xml:null,marker:null},select:function(){this.trigger("active")},unselect:function(){this.trigger("inactive")},geojson:function(){var e="{}";try{var t=this.get("xml"),n=this.xml2html(t,s,{},"text");e=JSON.parse(n)}catch(r){throw new Error("Failed to parse to json: "+r.toString())}return e}});return t.extend(l.prototype,r),t.extend(l.prototype,i),t.extend(l.prototype,o),l});
define("models/issue",["jquery","underscore","backbone","models/article","collections/articles","mixins/asyncInit"],function(e,t,i,n,c,l){"use strict";var r=i.Model.extend({initialize:function(i){var l=this;l.$def=e.Deferred();var r=i.config.articles.pathBase;r.match(/\/$/)||(r+="/");var a=i.config.articles.files,o=new c;l.config=i.config,l.set("collection",o);var s=t.map(t.range(a.length),function(){return void 0});t.each(a,function(e,t){s[t]=new n({articleid:t,articledir:r,path:r+e})});var f=t.map(s,function(e){return e.init()});e.when({},f).fail(function(){l.$def.reject()}),e.when.apply(null,f).done(function(){o.add(s),l.on("select",function(e){l._selectArticle(e)}),l.$def.resolve(l)}),e.when.apply(null,f).always(function(){t.forEach(f,function(e){"rejected"===e.state()&&l.$def.reject()}),l.$def.resolve(l)})},defaults:{activeArticle:null},_selectArticle:function(e){var t,i=this,n=i.get("collection");if("object"==typeof e)t=e;else{if("number"!=typeof e&&"string"!=typeof e)throw"Bad argument to models/issue";t=n.at(e)}(null===this.get("activeArticle")||this.get("activeArticle")!=e)&&(this.get("activeArticle")&&this.get("activeArticle").unselect(),i.set("activeArticle",t),t.init().done(function(){i.trigger("update",t),t.select()}))}});return t.extend(r.prototype,l),r});
define("models/map",["jquery","underscore","backbone","collections/markers","models/marker","mixins/asyncInit"],function(e,n,o,i,r,t){"use strict";var s=o.Model.extend({initialize:function(n){var o=this;if(o.$def=e.Deferred(),o.issue=n.issue,void 0===o.issue)throw new Error("Missing issue model in map model");if(o.set("router",n.router),!n.router)throw new Error("No router in MapModel");var i=e.Deferred();e.getJSON(n.config.map.config,function(e){o.set("mapconfig",e),i.resolve()}).fail(function(e,n,o){i.reject(),console.log("Failed to load map config file: "+o)}),e.when.apply({},[o.issue.init(),i]).done(function(){o._makeCollection(o.issue.get("collection").models,{success:function(){o.$def.resolve(o)},fail:function(){o.$def.reject()}})}).fail(function(){o.$def.reject()}).always(function(){o.$def.reject()})},defaults:{mapconfig:{}},_makeCollection:function(o,t){var s=this,c=[],f=new i;s.set("collection",f);var a=n.map(n.range(o.length),function(){return void 0}),u=!1,l="";o.forEach(function(n,o){var i=e.Deferred();c.push(i),n.init().done(function(){var e;try{e=new r({issue:s.issue,article:n,json:n.geojson(),router:s.router})}catch(t){return u=!0,l+="\n"+t.toString(),void i.resolve()}a[o]=e,i.resolve()})}),e.when.apply({},c).done(function(){if(f.add(a),u)throw new Error(l);t.success()}).fail(function(){t.fail()})}});return n.extend(s.prototype,t),s});
define("models/marker",["jquery","underscore","backbone"],function(e,i,t){"use strict";var r=t.Model.extend({article:null,json:{},initialize:function(e){var i=this;i.app=e.app,i.article=e.article,i.router=e.router,e.issue.init().done(function(e){i.listenTo(i.article,"active",function(){i.trigger("active")})})}});return r});
define("views/app",["jquery","underscore","backbone"],function(e,n,i){"use strict";var o=i.View.extend({el:"body",initialize:function(){e(window).resize(function(){document.location.reload()})}});return o});
define("views/article",["jquery","underscore","backbone","mixins/domwatcher","mixins/xml2html","text!xsl/article.xsl","text!partials/popover.html","text!partials/popover-content.html","slidesjs"],function(e,t,i,s,r,o,a,n){"use strict";var l=i.View.extend({id:"article",initialize:function(e){var t=this;t.config=e.config},render:function(){var t=this;t.$el=e("#"+t.id);var i=this.xml2html(this.model.get("xml"),o,{"article-dir":t.config.articles.pathBase});try{e(".article-content").remove(),e("#"+this.id).append(i)}catch(s){console.log("article load error: "+s.toString())}if(0===e("img.slidesjs-slide").length)e("#footer").remove(),e("article").removeClass("before-footer").addClass("no-footer");else try{t.postprocess()}catch(s){throw new Error("Failed to handle article images")}return t},remove:function(){},postprocess:function(){var i=this,s=e("#article article").height()-e("#header").outerHeight(!0);e("#body").css({height:s});var r=t.template(n);e("img.slidesjs-slide").each(function(t,i){var s=i.getAttribute("id"),o=e(".popover."+s).remove(),n=o.find(".head").text();e(i).attr("alt",o.find(".desc").text());var l=r({attr:o.find(".attr").text()});e(i).popover({container:"body",html:!0,content:l,title:n,template:a,trigger:"hover",placement:"left"})});var o=[];return i.$el.find("img.slidesjs-slide").each(function(t,i){var s=e.Deferred();e(i).load(function(){e(i).removeClass("remove"),s.resolve()}),e(i).error(function(){window.setTimeout(function(){s.reject()},500)}),o.push(s)}),e.when.apply({},o).always(function(){e("img.slidesjs-slide.remove").remove(),e(".image-loading").removeClass("image-loading"),e("#slides").slidesjs({navigation:{active:e("img.slidesjs-slide").length>1,effect:"fade"},pagination:{active:e("img.slidesjs-slide").length>1,effect:"fade"},effect:{fade:{speed:100,crossfade:!0}},callback:{loaded:function(t){var i=e(".slidesjs-control").children(":eq("+(t-1)+")");i.css({visibility:"hidden"}),i.css({height:"auto",width:"auto",maxHeight:e(".slidesjs-container").height(),maxWidth:e(".slidesjs-container").width(),position:"relative"});var s=(e(".slidesjs-container").width()-i.width())/2;s-=parseInt(i.css("padding-left"),10),i.css({left:s}),i.css({visibility:"visible"})},start:function(t){e(".slidesjs-control").children().css({visibility:"hidden"})},complete:function(t){var i=t-1,s=e(".slidesjs-control").children(":eq("+i+")");s.css({height:"auto",width:"auto",maxHeight:e(".slidesjs-container").height(),maxWidth:e(".slidesjs-container").width(),position:"relative"}),s.css({visibility:"visible"})}}})}),i}});return t.extend(l.prototype,s),t.extend(l.prototype,r),l});
define("views/clear",["jquery","underscore","backbone"],function(e,n,r,t){"use strict";var c=r.View.extend({el:"body",render:function(){e("body").empty()}});return c});
define("views/issue",["jquery","underscore","backbone","text!partials/issue.html","views/article"],function(e,i,t,n,o){"use strict";var r=t.View.extend({el:"#issue",template:i.template(n),initialize:function(e){var i=this;i.model=e.issue,i.model.on("update",function(e){i.select(e)})},render:function(){this.$el.remove(),e("body").append(n)},select:function(e){var i=this,t=new o({model:e,config:i.model.config,issue:i,router:i.model.router});e.on("active",t.render,t),e.on("inactive",t.remove,t)}});return r});
define("views/map",["jquery","underscore","backbone","leaflet","text!partials/map.html","models/map","views/marker"],function(e,t,n,o,i,a,r){"use strict";var p=n.View.extend({id:"map",tagName:"div",initialize:function(e){var t=this;t.config=e.config,t.model=new a(e),t.router=e.router},render:function(){var t=this;e("#"+t.id).children().length>0||(e("body").append(i),this.model.init().done(function(){var e=t.model.get("collection"),n=t.model.get("mapconfig"),i=new o.Map(n.id,n.map),a={},r=function(e){return e.lat.toString()+e.lng.toString()};t.configureMap(i,n,a,r),i.invalidateSize(),window.setTimeout(function(){e.forEach(function(e){t.addMarkerToMap(e,i,a,r,n)})},t.config.map.markerDelay)}))},configureMap:function(t,n,i,a){var r=new o.TileLayer(n.tileLayer.url,n.tileLayer.opts),p=o.control.scale(n.scale);t.setView(new o.LatLng(n.view.lat,n.view.lng),n.view.zoom),t.addLayer(r),p.addTo(t),t.on("popupopen",function(n){var r,p,c,u=n.popup,g=u.getLatLng(),l=t.containerPointToLatLng(o.DomUtil.getViewportOffset(document.getElementById("article")));g.lng>l.lng&&(p=e(u.getContent()).closest(".leaflet-popup-content-wrapper").first().width()/2-(t.latLngToLayerPoint(l).x-t.latLngToLayerPoint(t.getCenter()).x),c=o.point(u.options.autoPanPaddingBottomRight||u.options.autoPanPadding),c=c?c.x:0,r=t.latLngToLayerPoint(g).x-t.latLngToLayerPoint(t.getCenter()).x,t.panBy([r+p+c,0])),i[a(g)]=-1!=navigator.userAgent.indexOf("Firefox")?!0:!0}),t.on("popupclose",function(e){i[a(e.popup.getLatLng())]=-1!=navigator.userAgent.indexOf("Firefox")?!1:!1})},addMarkerToMap:function(e,t,n,i,a){var p=this,c=e.get("json"),u=new r({model:e,router:p.router});u.render(),o.geoJson(c,{onEachFeature:function(t,r){var c=o.popup(a.features.popup);c.setContent(u.el),r.bindPopup(c),r.removeEventListener("click"),r.on("click",function(){e.trigger("active")}),r.on("mouseover",function(){p.config.map.hoverPopup&&(n[i(r.getLatLng())]||r.openPopup())}),e.on("active",function(e){n[i(r.getLatLng())]||r.openPopup()}),n[i(r.getLatLng())]=!1},pointToLayer:function(e,t){return o.marker(t,{icon:o.icon(a.features.icon),clickable:!!e.properties.text,title:e.properties.markername||"",opacity:a.features.opacity,riseOnHover:a.features.riseOnHover})}}).addTo(t)}});return p});
define("views/marker",["jquery","underscore","backbone","text!partials/marker.html"],function(e,t,r,i){"use strict";var l=r.View.extend({template:t.template(i),el:"",router:null,initialize:function(e){var t=this;t.router=e.router,t.model.on("active",function(){var e="article/"+t.model.article.get("articleid");t.router.navigate(e,{trigger:!0}),t.model.get("issue").trigger("select",t.model.get("article"))})},render:function(){this.$el.html(this.template({articleid:this.model.article.get("articleid"),geojson:this.model.article.geojson()}))}});return l});
define("views/menu",["jquery","underscore","backbone","text!partials/menu.html","mixins/domwatcher","views/article/menu"],function(e,t,n,i,r,o){"use strict";var a=n.View.extend({template:t.template(i),id:"menu",tagName:"div",issue:null,config:{},initialize:function(e){this.config=e.config,this.issue=e.issue},render:function(){var n=this;if(0===e("#"+n.id).children().length){var i=this.config.menu,r=[],a={},c={};t.each(i,function(e){if(a[e.partial]="","menu"===e.type){if("collections/articles"!==e.collection)throw new Error("Unhandled collection type requested: "+e.collection);c[e.collection]=n.issue.get("collection")}}),t.each(t.keys(a),function(n){var i=e.Deferred();require(["text!"+n],function(e){a[n]=t.template(e),i.resolve()}),r.push(i.promise())});var l="";e.when.apply(e,r).done(function(){t.forEach(i,function(n,i){var r=n.partial,u={},s="",f=[];"page"===n.type||"sep"===n.type?l+=a[r](n):"menu"===n.type&&(c[n.collection].models.forEach(function(t,i){var r,a=n.item.href.replace(":i",i),c=new o({model:t}),l=c.render({href:"#"+a});if("string"==typeof l)r=e(l);else{if(!(l instanceof Element))throw new Error("Unsupported result type for submenu: "+l.toString());if("BODY"===l.nodeName)r=e(l.innerHTML);else{if("LI"!==l.nodeName)throw new Error("Unsupported document element for submenu: "+l.toString());r=e(l.outerHTML)}}r.attr("data-sort-key")?u[r.attr("data-sort-key")]=r.clone():u[r.find("a").text()]=r.clone()}),f=t.keys(u),f.sort(function(e,t){return e.localeCompare(t)}),t.each(f,function(e){s+=u[e][0].outerHTML}),l+=a[r]({label:n.label,items:s}))})}).then(function(){e("#"+n.id).empty().append(n.template({content:l}));var t=e.Deferred();t.fail(function(){n.render()}),n.watchDOM(500,"#"+n.id,t)}).fail(function(){throw new Error("Failed to build menu.")})}}});return t.extend(a.prototype,r),a});
define("views/page",["jquery","underscore","backbone","mixins/domwatcher","text!partials/page.html"],function(e,t,n,r,i){"use strict";var a=n.View.extend({el:"body",render:function(){var t=this,n=e.Deferred();n.then(function(){e(t.el).append(i)}),this.watchDOM(1e3,t.el,n)}});return t.extend(a.prototype,r),a});
define("views/partial",["jquery","underscore","backbone","mixins/domwatcher","mixins/asyncInit"],function(e,t,n,i,r){"use strict";var a=n.View.extend({el:"",page:"",initialize:function(t){var n=this;n.el=t.el,n.$def=e.Deferred(),require(["text!"+t.page],function(e){n.page=e,n.$def.resolve(n)})},render:function(){var t=this,n=e.Deferred();t.init().then(function(){e(t.el).append(t.page)}),this.watchDOM(1e3,t.el,n)}});return t.extend(a.prototype,i),t.extend(a.prototype,r),a});
define("models/error/user",["backbone"],function(e){"use strict";var s=e.Model.extend({defaults:{msg:""},initialize:function(e){this.set("msg",e.message)}});return s});
define("views/article/menu",["jquery","underscore","backbone","mixins/xml2html","text!xsl/article-menu.xsl"],function(e,t,i,n,r){"use strict";var l=i.View.extend({render:function(e){var t=this;if("resolved"!==this.model.init().state())throw"Uninitialized article in ArticleMenuView";var i=t.xml2html(t.model.get("xml"),r,e);return i}});return t.extend(l.prototype,n),l});
define("views/error/user",["jquery","backbone","text!partials/error/user.html"],function(e,t,r){"use strict";var i=t.View.extend({template:_.template(r),el:e("#errorDialog"),initialize:function(){this.render()},render:function(){return this.$el.html(this.template(this.model.attributes)),this.$el.modal({keyboard:!0,show:!0}),this}});return i});
require.config({paths:{text:"//cdnjs.cloudflare.com/ajax/libs/require-text/2.0.12/text.min",jquery:"//code.jquery.com/jquery-2.1.4.min",bootstrap:"//maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min",backbone:"//cdnjs.cloudflare.com/ajax/libs/backbone.js/1.1.2/backbone-min",underscore:"//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min",leaflet:"//cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.3/leaflet",slidesjs:"//cdnjs.cloudflare.com/ajax/libs/slidesjs/3.0/jquery.slides.min",partials:"../partials",xsl:"../script/xsl",pages:"../pages"},shim:{bootstrap:{deps:["jquery"]},backbone:{deps:["jquery","underscore"],exports:"Backbone"},underscore:{exports:"_"},text:{deps:[]},slidesjs:{deps:["jquery"]}}}),require(["jquery","models/error/user","views/error/user","models/app","views/app","bootstrap"],function(e,s,o,r,a){"use strict";var n=e("#main").attr("data-config");n?e.getJSON(n,function(e){try{{new a({model:new r({config:e})})}}catch(n){opts.config.debug||new o({model:new s({msg:n.toString()})})}}).fail(function(e,r,a){new o({model:new s({msg:"Failed to load site config file '"+n+"' "+a})})}):new o({model:new s({msg:"No configuration filename specified in home page."})})});
//# sourceMappingURL=data:application/json;base64,
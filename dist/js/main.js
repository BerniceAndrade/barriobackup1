define("collections/articles",["jquery","underscore","backbone","models/article"],function(e,c,n,o){"use strict";var r=n.Collection.extend({model:o});return r});
define("collections/timeline",["jquery","underscore","backbone","models/timeline/item"],function(e,n,i,t){"use strict";var o=i.Collection.extend({model:t});return o});
define("controllers/issue",["jquery","underscore","backbone","controllers/prototype","mixins/asyncInit","views/issue","models/issue"],function(e,n,i,o,r,t,l){"use strict";var c=o.extend({model:null,view:null,router:null,initialize:function(i){var o=this;o.$def=e.Deferred(),o.router=i.router,o.model=new l({config:i.config}),o.view=new t({model:o.model,config:i.config}),o.view.render(),o.model.init().done(function(){n.forEach(o.model.get("collection").models,function(e){o.listenTo(e,"active",function(e){var n="article/"+e.get("articleid");o.router.navigate(n,{trigger:!0}),o.view.renderArticle(e)})}),o.$def.resolve(o)}).always(function(){o.$def.reject()})}});return n.extend(c.prototype,r),c});
define("controllers/map",["jquery","underscore","backbone","controllers/prototype","models/map","views/map","mixins/asyncInit","controllers/map/pan","controllers/map/layer","controllers/map/timeline"],function(e,r,o,n,i,a,t,p,l,m){"use strict";var u=n.extend({model:null,view:null,issue:null,mapPanController:null,MapLayerController:null,mapTimelineController:null,initialize:function(r){var o=this;o.$def=e.Deferred(),o.router=r.router,o.issue=r.issue,o.model=new i(r),o.view=new a({model:o.model,router:o.router,issue:o.issue}),o.view.init().done(function(){o.mapPanController=new p({map:o.view.map}),o.mapLayerController=new l({views:o.view.markerViews,map:o.view.map,mapconfig:o.model.attributes.mapconfig}),o.mapTimelineController=new m({markerViews:o.view.markerViews,map:o.view.map,siteconfig:o.model.attributes.config}),o._registerTimelineListeners(),o.listenTo(o.view,"markers",function(e){o._registerMarkers(e),o.mapPanController.fitMarkerBounds(o.view.markerViews)}),o.view.render()}),e.when.apply(null,[o.model.init(),o.view.init()]).done(function(){o.$def.resolve(o)})},_registerMarkers:function(e){var o=this;r.forEach(e,function(e){o.listenTo(e.model,"active",function(r){o.mapPopupOpen(e.markerLayer);var n=o._getMarkerLayer(e.markerLayer,"getPopup");null!==n&&o.mapPanController.handlePopupPosition(n.getPopup())}),o.listenTo(e.model,"toggle",function(r){o.mapPopupToggle(e.markerLayer);var n=o._getMarkerLayer(e.markerLayer,"getPopup");null!==n&&o.mapPanController.handlePopupPosition(n.getPopup())}),o.listenTo(e,"click",function(r){o.mapPopupOpen(r),e.model.trigger("active",e.model)}),o.listenTo(e,"mouseover",function(e){o.view.map.hoverPopup&&(openpopup[popupid(mapMarker.getLatLng())]||mapMarker.openPopup())})})},_registerTimelineListeners:function(){var e=this;e.listenTo(e.mapTimelineController,"show",function(o){r.forEach(o,function(r){r.markerLayer?r.render():e.view.map.addLayer(r.markerLayer)})}),e.listenTo(e.mapTimelineController,"hide",function(o){r.forEach(o,function(r){r.markerLayer&&e.view.map.removeLayer(r.markerLayer)})})},_getMarkerLayer:function(e,o){var n,i;if(e instanceof L.LayerGroup){if(o in e)n=e;else for(i=e.getLayers();e=i.pop();)if(o in e){n=e;break}}else r.has(e,"originalEvent")&&(n=e.target);return n},mapPopupOpen:function(e){var r=this._getMarkerLayer(e,"openPopup");r&&r.openPopup()},mapPopupToggle:function(e){var r=this._getMarkerLayer(e,"togglePopup");r&&r.togglePopup()},mapPopupClose:function(e){var r=this._getMarkerLayer(e,"closePopup");r&&r.closePopup()}});return r.extend(u.prototype,t),u});
define("controllers/prototype",["underscore","backbone"],function(e,t){"use strict";var n=function(){this.cid=e.uniqueId("controller"),this.initialize.apply(this,arguments)};return n.extend=t.Router.extend,e.extend(n.prototype,t.Events),e.extend(n.prototype,{initialize:function(){throw new Error("unimplemented initialize()")}}),n});
!function(t,i){"function"==typeof define&&define.amd?define(["leaflet","d3"],i):"object"==typeof exports?module.exports=i:i(t.L)}(this,function(t,i){return t.Control.Timeline?t:(t.Control.Timeline=t.Control.extend({options:{orientation:"left",height:500,width:100,id:"timeline-container",margin:{left:3,right:3,top:10,bottom:10},collapsed:!1,item:{minHeight:1},on:{brushend:function(t){console.log(t)}}},initialize:function(i){t.Util.setOptions(this,i),this._container=t.DomUtil.get(this.options.id)},onRemove:function(){},onAdd:function(t){return this._container},addData:function(t){this._source=t,this._items=t.getItems(),this._addItemsToTimeline()},_addItemsToTimeline:function(){var t=this,e=this.options.height-this.options.margin.top-this.options.margin.bottom,n=this.options.width-this.options.margin.right-this.options.margin.left,o=(this._xScale=i.scale.linear().range([0,n]),this._yScale=i.scale.linear().domain([this._source.start,this._source.end]).range([0,e])),s=this._timeline=i.select("#timeline-container").append("svg").attr("id","timeline").attr("height",this.options.height).attr("width",this.options.width),a=s.append("g").attr("id","band").attr("width",n/2-this.options.margin.right).attr("height",e).attr("transform","translate("+.25*n+","+this.options.margin.top+") scale(.75 1.0)"),r=(a.selectAll("g").data(this._items).enter().append("rect").attr("class","timeline-item").attr("height",function(e){return i.max([t.options.item.minHeight,o(e.duration())])}).attr("width",n).attr("transform",function(t){return"translate(0, "+o(t.start)+")"}),i.svg.brush().y(o).on("brushend",function(){var e=o(r.extent()[0]),n=o(r.extent()[1]),s={clear:!1,selected:[]};e!==n?i.select("#band").selectAll("rect.timeline-item").each(function(t){o(t.start)<=n&&o(t.end)>=e&&s.selected.push(t)}):s.clear=!0,t.options.on.brushend(s)})),l=a.append("svg").attr("id","brush").call(r);l.selectAll("rect").attr("width",n);var h=s.append("g").attr("id","axis").attr("transform","translate("+(.25*n-this.options.margin.left)+","+this.options.margin.top+")"),c=i.svg.axis().scale(o).orient(this.options.orientation).tickSize(6,0).tickValues(this._source.tickValues()).tickFormat(function(i){return t._source.tickFormat(i)});h.call(c),this._handleTimelineMouseEvents()},_handleTimelineMouseEvents:function(){t.Browser.touch?t.DomEvent.on(this._container,"click",t.DomEvent.stopPropagation):t.DomEvent.disableClickPropagation(this._container)}}),void(t.control.timeline=function(i){return new t.Control.Timeline(i)}))});
define("mixins/asyncInit",["jquery","underscore"],function(n,e){"use strict";var i={$def:null,init:function(){return this.$def.promise()}};return i});
define("mixins/domwatcher",["jquery"],function(e){"use strict";var t={watchDOM:function(t,o,n){if(!o)throw"Empty selector in watchDOM()";if(0===e(o).length){var d=function(){e(o).length>0&&(e(document.body).off("DOMNodeInserted",d),n.resolve())};e(document.body).on("DOMNodeInserted",d),window.setTimeout(function(){e(document.body).off("DOMNodeInserted",d),n.reject()},t)}else n.resolve()}};return t});
define("mixins/fetchxml",["jquery"],function(e){"use strict";var r={fetchXML:function(r){var t=e.Deferred();return e.ajax({type:"GET",url:r,dataType:"xml",success:function(e){t.resolve(e)},error:function(e,r,n){t.reject()}}),t.promise()}};return r});
define("mixins/xml2html",["jquery","underscore"],function(e,t){"use strict";var r={_doc:function(e){var t;if("string"==typeof e)t=(new DOMParser).parseFromString(e,"text/xml");else{if(!(e instanceof Document))throw new Error("Unrecognized document input in XML2HTML");t=e}if(null==t||!t.hasOwnProperty("getElementsByTagName")&&t.getElementsByTagName("parsererror").length>0)throw new Error("Failed to parse document in xml2html");return t},xml2html:function(e,r,n,o){var i=this._doc(e),m=this._doc(r),a=new XSLTProcessor;a.importStylesheet(m),"object"==typeof n&&t.each(t.keys(n),function(e){a.setParameter(null,e,n[e])});var s;try{var c=a.transformToDocument(i);s=-1!=navigator.userAgent.indexOf("Firefox")?"text"===o?c.documentElement.textContent:c.documentElement:"text"===o?c.documentElement.textContent:s=c.body.innerHTML}catch(u){throw new Error("Error in XSLT transform: "+u.toString())}return s}};return r});
define("models/article",["jquery","underscore","backbone","mixins/fetchxml","mixins/asyncInit","mixins/xml2html","text!xsl/geojson.xsl","text!xsl/cited-range.xsl"],function(e,t,n,o,s,i,r,l){"use strict";var a=n.Model.extend({initialize:function(){var t=this;t.$def=e.Deferred();var n=t.fetchXML(t.get("path"));e.when(n).done(function(e){t.set("xml",e),t._mkGeojson(),t._mkCitedRange(),null!==t.geojson&&t.set("placeType",t.geojson.properties.layer),t.$def.resolve(t)}).fail(function(){t.$def.reject()})},defaults:{xml:null,placeType:null,iconUrl:"",citedRange:{}},geojson:null,getGeojson:function(){return null===this.geojson&&this._mkGeojson(),this.geojson},_mkGeojson:function(){try{var e=this.xml2html(this.get("xml"),r,{},"text");this.geojson=JSON.parse(e)}catch(t){throw new Error("Failed to parse geojson: "+t.toString())}},_mkCitedRange:function(){try{var e=this.xml2html(this.get("xml"),l,{},"text");this.set("citedRange",JSON.parse(e))}catch(t){throw new Error("Failed to parse cited range json: "+t.toString())}}});return t.extend(a.prototype,o),t.extend(a.prototype,s),t.extend(a.prototype,i),a});
define("models/issue",["jquery","underscore","backbone","models/article","collections/articles","mixins/asyncInit"],function(e,t,n,i,r,o){"use strict";var c=n.Model.extend({initialize:function(n){var o=this;o.$def=e.Deferred();var c=n.config.articles.pathBase;c.match(/\/$/)||(c+="/");var a=n.config.articles.files,s=new r;o.config=n.config,o.set("collection",s);var f=t.map(t.range(a.length),function(){return void 0});t.each(a,function(e,t){f[t]=new i({articleid:t,articledir:c,path:c+e})});var l=t.map(f,function(e){return e.init()});e.when.apply(null,l).done(function(){s.add(f),o.setIcons(),o.$def.resolve(o)}).always(function(){t.forEach(l,function(e){"rejected"===e.state()&&o.$def.reject()}),o.$def.reject()})},setIcons:function(){var e=this,n=e.config.markers.icons,i=t.shuffle(t.flatten(t.map(n,function(e){return t.map(e.files,function(t){return e.dir.concat(t)})}))),r=i.pop(),o=[];e.get("collection").forEach(function(e,t){var n=e.getGeojson()||{properties:{}},c=n.properties.layer;o[c]=o[c]||i.pop()||r,e.set("iconUrl",o[c])})},getArticle:function(e){var t,n=this.get("collection");return"object"==typeof e?t=e:("number"==typeof e||"string"==typeof e)&&(t=n.at(e)),t}});return t.extend(c.prototype,o),c});
define("models/map",["jquery","underscore","backbone","mixins/asyncInit"],function(e,n,i,o){"use strict";var t=i.Model.extend({initialize:function(n){var i=this;i.$def=e.Deferred(),e.getJSON(n.config.map.config,function(e){i.set("mapconfig",e),i.$def.resolve(i)}).fail(function(e,n,o){console.log("Failed to load map config file: "+o),i.$def.reject()})},defaults:{mapconfig:{}}});return n.extend(t.prototype,o),t});
define("models/timeline",["jquery","underscore","backbone","collections/timeline","models/timeline/item","mixins/asyncInit"],function(e,t,r,n,i,a){"use strict";var o=r.Model.extend({markerViews:null,start:null,end:null,siteconfig:null,bookconfig:null,initialize:function(t){var r=this;r.markerViews=t.markerViews,r.siteconfig=t.siteconfig,r.$def=e.Deferred(),e.getJSON(r.siteconfig.book.file,function(e){r.bookconfig=e.book,r._initialize(),r.$def.resolve(r)}).fail(function(e,t,n){r.$def.reject()})},_initialize:function(){var e=this,r=new n;e.set("collection",r),t.forEach(e.markerViews,function(n){var a=n.model,o=t.findWhere(e.bookconfig.chapters,{part:a.attributes.citedRange.part,chapter:a.attributes.citedRange.chapter});if(o){var c=o.paragraphs.start+a.attributes.citedRange.paragraph,s=c+1;r.add(new i({start:c,end:s,markerView:n}))}}),e.start=t.min(e.bookconfig.chapters,function(e){return e.paragraphs.start}).paragraphs.start,e.end=t.max(e.bookconfig.chapters,function(e){return e.paragraphs.end}).paragraphs.end},getItems:function(){return this.get("collection").models},tickValues:function(){var e=t.map(this.bookconfig.chapters,function(e){return e.paragraphs.start});return e.sort(function(e,t){return e-t}),e},tickFormat:function(e){var t,r,n=this;for(t=0;t<n.bookconfig.chapters.length;++t)if(r=n.bookconfig.chapters[t],e<=r.paragraphs.end)return e=r.chapter,e===n.bookconfig.chapters.length-1?"":e;return""}});return t.extend(o.prototype,a),o});
define("routes/router",["jquery","underscore","backbone","models/error/user","views/error/user","views/clear","controllers/issue","controllers/map","views/menu"],function(e,r,i,t,n,o,s,a,l){"use strict";var u=i.Router.extend({pages:{},config:{},issueController:null,mapController:null,initialize:function(e){var t=this;this.config=e.config,this.pages=e.config.pages,this.issueController=new s({router:this,config:this.config}),this.issueController.init().done(function(){r.has(t.pages.router,"history")&&t.pages.router.history&&i.history.start()})},navigate:function(e,r){i.history.fragment!==e&&i.history.navigate(e,r)},page:function(e){var i,t=this,n=!1;try{if(e||(e=this.pages.home),i=this.pages.pages[e],void 0===i)throw new Error("Missing config in router/page")}catch(s){return this.page("404")}(new o).render(),r.each(i,function(i){var o,s={config:t.config,issue:t.issueController.model,router:t},l=JSON.parse(JSON.stringify(i));if(r.has(l,"view"))o=l.view;else{if(!r.has(l,"partial")){if(r.has(confg,"full"))return void(window.location.href=l.full.page);throw new Error("Unsupported page type in router: "+e)}o="views/partial",l.partial.page=t.pages.pathBase+l.partial.page,s=r.extend(s,l.partial)}"views/map"===o?(t.mapController=new a(s),n=!0):require([o],function(e){var r=new e(s);r.render()})}),n||(t.mapController=null)},article:function(r){var i=this,t={config:i.config,issue:i.issueController.model,router:i};e("#titlepage").length>0&&e("#titlepage").remove(),e("#page").length>0&&e("#page").remove(),null===i.mapController&&(i.mapController=new a(t)),0===e("#menu").children().length&&new l(t).render(),i.mapController.init().done(function(){var e=i.issueController.model.getArticle(r);e.trigger("active",e)})}});return u});
define("views/app",["jquery","underscore","backbone"],function(e,n,i){"use strict";var o=i.View.extend({el:"body",initialize:function(){e(window).resize(function(){document.location.reload()})}});return o});
define("views/article",["jquery","underscore","backbone","views/article/gallery","mixins/xml2html","text!xsl/article.xsl"],function(e,i,t,r,l,o){"use strict";var n=t.View.extend({id:"article",initialize:function(e){var i=this;i.config=e.config},render:function(){var i=this;if(i.$el=e("#"+i.id),0===i.$el.find("#"+i.model.cid).length){var t=this.xml2html(this.model.get("xml"),o,{"article-dir":i.config.articles.pathBase,iconUrl:i.model.get("iconUrl"),cid:i.model.cid});try{e(".article-content").remove(),e("#"+this.id).append(t)}catch(l){console.log("article load error: "+l.toString())}return e("img.slidesjs-slide").length>0?(new r).render():(e("#footer").remove(),e("article").removeClass("before-footer").addClass("no-footer")),i.$el.find(".article-marker").click(function(e,t){i.model.trigger("toggle",i.model)}),i}},remove:function(){}});return i.extend(n.prototype,l),n});
define("views/clear",["jquery","underscore","backbone"],function(e,n,r,t){"use strict";var c=r.View.extend({el:"body",render:function(){e("body").empty()}});return c});
define("views/issue",["jquery","underscore","backbone","text!partials/issue.html","views/article"],function(e,i,t,n,r){"use strict";var s=t.View.extend({el:"#issue",template:i.template(n),initialize:function(e){var i=this;i.config=e.config},render:function(){this.$el.remove(),e("body").append(n)},renderArticle:function(e){new r({model:e,config:this.model.config,issue:this,router:this.model.router}).render()}});return s});
define("views/map",["jquery","underscore","backbone","leaflet","text!partials/map.html","views/marker","mixins/asyncInit"],function(e,i,n,a,r,t,m){"use strict";var o=n.View.extend({id:"map",tagName:"div",markerViews:[],mapconfig:{},initialize:function(i){var n=this;n.$def=e.Deferred(),n.model=i.model,n.issue=i.issue,e.when.apply({},[n.issue.init(),n.model.init()]).done(function(){n.mapconfig=n.model.get("mapconfig"),e("#"+this.id).length>0||e("#"+this.id).children().length>0||(n._initMap(),n.$def.resolve(n))})},_initMap:function(){var n=this;0===e("#"+this.id).length&&(e("body").append(r),n.map=new a.Map(n.mapconfig.id,n.mapconfig.map),new a.TileLayer(n.mapconfig.tileLayer.url,n.mapconfig.tileLayer.opts).addTo(n.map),new a.control.scale(n.mapconfig.scale).addTo(n.map),n.markerViews=i.map(n.issue.get("collection").models,function(e){return new t({model:e,map:n.map,mapconfig:n.mapconfig})}))},renewViews:function(){var e=this;e.markerViews=i.map(e.issue.get("collection").models,function(i){return i.markerView||(i.markerView=new t({model:i,map:e.map,mapconfig:e.mapconfig})),i.markerView}),i.forEach(e.markerViews,function(e){e.render()}),e.trigger("markers",e.markerViews)},render:function(){var e=this;e._initMap(),i.forEach(e.markerViews,function(e){e.render()}),e.trigger("markers",e.markerViews)}});return i.extend(o.prototype,m),o});
define("views/marker",["jquery","underscore","backbone","text!partials/marker.html","text!partials/marker-legend.html"],function(e,r,t,i,n){"use strict";var o=t.View.extend({template:r.template(i),el:"",markerLayer:null,map:null,mapconfig:null,initialize:function(e){var r=this;r.map=e.map,r.mapconfig=e.mapconfig,r.initMarkerLayer()},initMarkerLayer:function(){var e=this,r=this.model.getGeojson(),t=e.mapconfig.features.icon;t.iconUrl=this.model.get("iconUrl")||"";var i=L.icon(t);e.markerLayer=L.geoJson(r,{onEachFeature:function(r,t){var i=L.popup(e.mapconfig.features.popup);i.setContent(e.template({articleid:e.model.get("articleid"),geojson:e.model.getGeojson()})),t.bindPopup(i),t.removeEventListener("click"),t.on("click",function(r){e.trigger("click",r)}),t.on("mouseover",function(r){e.trigger("mouseover",r)})},pointToLayer:function(r,t){return L.marker(t,{icon:i,clickable:!!r.properties.text,title:r.properties.markername||"",opacity:e.mapconfig.features.opacity,riseOnHover:e.mapconfig.features.riseOnHover})}})},render:function(){this.markerLayer.addTo(this.map)}});return o});
define("views/menu",["jquery","underscore","backbone","text!partials/menu.html","mixins/domwatcher","views/article/menu"],function(e,t,n,i,r,o){"use strict";var a=n.View.extend({template:t.template(i),id:"menu",tagName:"div",issue:null,config:{},initialize:function(e){this.config=e.config,this.issue=e.issue},render:function(){var n=this;if(0===e("#"+n.id).children().length){var i=this.config.menu,r=[],a={},c={};t.each(i,function(e){if(a[e.partial]="","menu"===e.type){if("collections/articles"!==e.collection)throw new Error("Unhandled collection type requested: "+e.collection);c[e.collection]=n.issue.get("collection")}}),t.each(t.keys(a),function(n){var i=e.Deferred();require(["text!"+n],function(e){a[n]=t.template(e),i.resolve()}),r.push(i.promise())});var l="";e.when.apply(e,r).done(function(){t.forEach(i,function(n,i){var r=n.partial,u={},s="",f=[];"page"===n.type||"sep"===n.type?l+=a[r](n):"menu"===n.type&&(c[n.collection].models.forEach(function(t,i){var r,a=n.item.href.replace(":i",i),c=new o({model:t}),l=c.render({href:"#"+a});if("string"==typeof l)r=e(l);else{if(!(l instanceof Element))throw new Error("Unsupported result type for submenu: "+l.toString());if("BODY"===l.nodeName)r=e(l.innerHTML);else{if("LI"!==l.nodeName)throw new Error("Unsupported document element for submenu: "+l.toString());r=e(l.outerHTML)}}r.attr("data-sort-key")?u[r.attr("data-sort-key")]=r.clone():u[r.find("a").text()]=r.clone()}),f=t.keys(u),f.sort(function(e,t){return e.localeCompare(t)}),t.each(f,function(e){s+=u[e][0].outerHTML}),l+=a[r]({label:n.label,items:s}))})}).then(function(){e("#"+n.id).empty().append(n.template({content:l}));var t=e.Deferred();t.fail(function(){n.render()}),n.watchDOM(500,"#"+n.id,t)}).fail(function(){throw new Error("Failed to build menu.")})}}});return t.extend(a.prototype,r),a});
define("views/page",["jquery","underscore","backbone","mixins/domwatcher","text!partials/page.html"],function(e,t,n,r,i){"use strict";var a=n.View.extend({el:"body",render:function(){var t=this,n=e.Deferred();n.then(function(){e(t.el).append(i)}),this.watchDOM(1e3,t.el,n)}});return t.extend(a.prototype,r),a});
define("views/partial",["jquery","underscore","backbone","mixins/domwatcher","mixins/asyncInit"],function(e,t,n,i,r){"use strict";var a=n.View.extend({el:"",page:"",initialize:function(t){var n=this;n.el=t.el,n.$def=e.Deferred(),require(["text!"+t.page],function(e){n.page=e,n.$def.resolve(n)})},render:function(){var t=this,n=e.Deferred();t.init().then(function(){e(t.el).append(t.page)}),this.watchDOM(1e3,t.el,n)}});return t.extend(a.prototype,i),t.extend(a.prototype,r),a});
define("views/timeline",["jquery","underscore","backbone","leaflet","text!partials/timeline.html","controls/L.Control.Timeline"],function(e,i,t,n,l){"use strict";var r=t.View.extend({id:"timeline",map:null,initialize:function(e){var i=this;i.map=e.map},render:function(){var i=this;e(".leaflet-top.leaflet-left").append(l),i.model.init().done(function(){i.timeline=n.control.timeline({on:{brushend:function(e){i.handleFilter(e)}}}),i.timeline.addData(i.model)})},handleFilter:function(e){this.trigger("filter",e)}});return r});
define("controllers/map/layer",["jquery","underscore","backbone","controllers/prototype","text!partials/marker-legend.html"],function(e,r,l,n,o){"use strict";var t=n.extend({views:null,router:null,map:null,initialize:function(l){var n=this;n.views=l.views,n.map=l.map,n.mapconfig=l.mapconfig;var t=r.template(o),a=r.groupBy(n.views,function(e){return e.model.getGeojson().properties.layer}),i=L.control.layers(null,null,n.mapconfig.control.layers.options).addTo(n.map);r.each(r.keys(a),function(e){var l=e.replace(/\s+/g,"-"),n=t({iconUrl:a[e][0].model.get("iconUrl"),title:e,klass:l}),o=r.map(a[e],function(e){return e.markerLayer}),c=L.layerGroup(o);i.addOverlay(c,n)}),e("input.leaflet-control-layers-selector").each(function(r,l){e(l).click()})}});return t});
define("controllers/map/pan",["jquery","underscore","backbone","controllers/prototype","mixins/domwatcher"],function(t,e,n,o,i){"use strict";var a=o.extend({map:null,initialize:function(t){if(this.map=t.map,!this.map)throw new Error("Uninitialized map")},_fitMarkerBounds:function(t){var n=this,o=document.getElementById("article");if(o){var i=L.DomUtil.getViewportOffset(o).x,a=L.latLngBounds(e.map(t,function(t){var e=t.model.getGeojson().geometry.coordinates.slice(0);return L.latLng(e.reverse())}));0===i?n.map.fitBounds(a):i!=n.map.getSize().x?n.map.fitBounds(a,{paddingBottomRight:[document.body.clientWidth-i,0]}):n.map.fitBounds(a),n.map.invalidateSize()}},fitMarkerBounds:function(e){var n=this,o=t.Deferred();o.then(function(){n._fitMarkerBounds(e)}),this.watchDOM(1e3,"#article",o)},handlePopupPosition:function(e){var n,o,i,a,r,p=this,d=p.map,s=t(e.getContent()).attr("id");i=e.getLatLng(),void 0!==i&&(n=L.DomUtil.getViewportOffset(document.getElementById("article")).x,o=t("#"+s).closest(".leaflet-popup-content-wrapper").first(),r=L.point(e.options.autoPanPaddingBottomRight||e.options.autoPanPadding),r=r?r.x:0,a=o.length>0?o.offset().left+o.width()+r:0,0!=n&&a>n&&n!=d.getSize().x?d.panBy([a-n,0]):d.getBounds().contains(e.getLatLng())||(d.closePopup(e),d.openPopup(e)))}});return e.extend(a.prototype,i),a});
define("controllers/map/timeline",["jquery","underscore","backbone","controllers/prototype","views/timeline","models/timeline"],function(e,i,r,n,t,o){"use strict";var l=n.extend({map:null,model:null,view:null,siteconfig:null,markerViews:null,initialize:function(e){var r=this;r.views=e.views,r.map=e.map,r.markerViews=e.markerViews,i.forEach(e.markerViews,function(e){r.listenTo(e.model,"show",function(){}),r.listenTo(e.model,"hide",function(){})}),r.model=new o({siteconfig:e.siteconfig,markerViews:e.markerViews}),r.view=new t({model:r.model,map:r.map,markerViews:e.markerViews}),r.listenTo(r.view,"filter",function(e){var n,t,o={};e.clear?(n=i.map(r.markerViews,function(e){return e}),this.trigger("show",n)):(n=i.map(e.selected,function(e){return o[e.markerView.model.cid]=void 0,e.markerView}),t=i.filter(r.markerViews,function(e){return!(e.model.cid in o)}),t.length>0&&this.trigger("hide",t),n.length>0&&this.trigger("show",n))}),r.view.render()}});return l});
define("models/error/user",["backbone"],function(e){"use strict";var s=e.Model.extend({defaults:{msg:""},initialize:function(e){this.set("msg",e.message)}});return s});
define("models/timeline/item",["jquery","underscore","backbone"],function(e,n,t){"use strict";var r=t.Model.extend({markerView:null,start:null,end:null,initialize:function(e){var n=this;n.markerView=e.markerView,n.start=e.start,n.end=e.end},duration:function(){return this.end-this.start},compareTo:function(e){}});return r});
define("views/article/gallery",["jquery","underscore","backbone","views/article/gallery/popover","views/article/gallery/lightbox","views/article/gallery/slides"],function(e,i,r,n,l,a){"use strict";var o=r.View.extend({id:"article",initialize:function(){},remove:function(){},render:function(){var i=e("#article article").height()-e("#header").outerHeight(!0);e("#body").css({height:i});var r=[];e("img.slidesjs-slide").each(function(i,n){var l=e.Deferred();e(n).load(function(){e(n).removeClass("remove"),l.resolve()}),e(n).error(function(){window.setTimeout(function(){l.reject()},500)}),r.push(l)}),e.when.apply({},r).always(function(){e("img.slidesjs-slide.remove").remove(),e(".image-loading").removeClass("image-loading"),(new n).render(),(new l).render(),(new a).render()})}});return o});
define("views/article/menu",["jquery","underscore","backbone","mixins/xml2html","text!xsl/article-menu.xsl"],function(e,t,i,n,r){"use strict";var l=i.View.extend({render:function(e){var t=this;if("resolved"!==this.model.init().state())throw"Uninitialized article in ArticleMenuView";var i=t.xml2html(t.model.get("xml"),r,e);return i}});return t.extend(l.prototype,n),l});
define("views/error/user",["jquery","backbone","text!partials/error/user.html"],function(e,t,r){"use strict";var i=t.View.extend({template:_.template(r),el:e("#errorDialog"),initialize:function(){this.render()},render:function(){return this.$el.html(this.template(this.model.attributes)),this.$el.modal({keyboard:!0,show:!0}),this}});return i});
define("views/article/gallery/lightbox",["jquery","underscore","backbone","text!partials/lightbox-title.html","lightbox"],function(e,t,i,n){"use strict";var r=i.View.extend({id:"article",initialize:function(){},remove:function(){},render:function(){var i=this;return e(".gallery-item").magnificPopup({type:"image",gallery:{enabled:!0},image:{titleSrc:function(i){var r=i.el.attr("id"),l=e(".popover."+r),a=t.template(n),o=a({title:l.find(".head").text(),attr:l.find(".attr").text()});return o}}}),e(".glyphicon.glyphicon-expand").on("click",function(t){e(".gallery-item").magnificPopup("open")}),i}});return r});
define("views/article/gallery/popover",["jquery","underscore","backbone","text!partials/image-popover.html","text!partials/image-popover-content.html"],function(e,t,i,r,n){"use strict";var o=i.View.extend({id:"article",initialize:function(){},remove:function(){},render:function(){var i=this,o=t.template(n);return e("img.slidesjs-slide").each(function(t,i){var n=i.getAttribute("id"),a=e(".popover."+n),c=a.find(".head").text();e(i).attr("alt",a.find(".desc").text());var l=o({attr:a.find(".attr").text()});e(i).popover({container:"body",html:!0,content:l,title:c,template:r,trigger:"hover",placement:"left"}),e(i).click(function(t){e(i).popover("hide")})}),i}});return o});
define("views/article/gallery/slides",["jquery","underscore","backbone","text!partials/image-popover.html","text!partials/image-popover-content.html","text!partials/lightbox-title.html","slidesjs","lightbox"],function(i,e,t,s,l,n){"use strict";var a=t.View.extend({id:"article",initialize:function(){},remove:function(){},render:function(){var e=this;return i("#slides").slidesjs({navigation:{active:i("img.slidesjs-slide").length>1,effect:"fade"},pagination:{active:i("img.slidesjs-slide").length>1,effect:"fade"},effect:{fade:{speed:100,crossfade:!0}},callback:{loaded:function(e){var t=i(".slidesjs-control").children(":eq("+(e-1)+")");t.css({visibility:"hidden"}),t.css({height:"auto",width:"auto",maxHeight:i(".slidesjs-container").height(),maxWidth:i(".slidesjs-container").width(),position:"relative"});var s=(i(".slidesjs-container").width()-t.width())/2;s-=parseInt(t.css("padding-left"),10),t.css({left:s}),t.css({visibility:"visible"})},start:function(e){i(".slidesjs-control").children().css({visibility:"hidden"})},complete:function(e){var t=e-1,s=i(".slidesjs-control").children(":eq("+t+")");s.css({height:"auto",width:"auto",maxHeight:i(".slidesjs-container").height(),maxWidth:i(".slidesjs-container").width(),position:"relative"}),s.css({visibility:"visible"})}}}),e}});return a});
require.config({paths:{backbone:"//cdnjs.cloudflare.com/ajax/libs/backbone.js/1.1.2/backbone-min",bootstrap:"//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.5/js/bootstrap.min",d3:"//cdnjs.cloudflare.com/ajax/libs/d3/3.5.6/d3",jquery:"//code.jquery.com/jquery-2.1.4.min",leaflet:"leaflet-src",lightbox:"//cdnjs.cloudflare.com/ajax/libs/magnific-popup.js/1.0.0/jquery.magnific-popup.min",slidesjs:"//cdnjs.cloudflare.com/ajax/libs/slidesjs/3.0/jquery.slides.min",text:"//cdnjs.cloudflare.com/ajax/libs/require-text/2.0.12/text.min",underscore:"//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min",partials:"../partials",xsl:"../script/xsl",pages:"../pages"},shim:{bootstrap:{deps:["jquery"]},backbone:{deps:["jquery","underscore"],exports:"Backbone"},underscore:{exports:"_"},text:{deps:[]},slidesjs:{deps:["jquery"]},lightbox:{deps:["jquery"]}}}),require(["jquery","models/error/user","views/error/user","routes/router","views/app","bootstrap"],function(e,s,o,r,a){"use strict";var i=e("#main").attr("data-config");i?e.getJSON(i,function(e){try{new a,new r({routes:e.pages.routes,config:e})}catch(i){e.debug||new o({model:new s({msg:i.toString()})})}}).fail(function(e,r,a){new o({model:new s({msg:"Failed to load site config file '"+i+"' "+a})})}):new o({model:new s({msg:"No configuration filename specified in home page."})})});
//# sourceMappingURL=data:application/json;base64,
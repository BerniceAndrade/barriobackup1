define("collections/articles",["jquery","underscore","backbone","models/article"],function(e,c,n,o){"use strict";var r=n.Collection.extend({model:o});return r});
define("collections/markers",["jquery","underscore","backbone","models/marker"],function(e,r,n,o){"use strict";var c=n.Collection.extend({model:o});return c});
define("mixins/asyncInit",["jquery","underscore"],function(n,e){"use strict";var i={$def:null,init:function(){return this.$def.promise()}};return i});
define("mixins/domwatcher",["jquery"],function(e){"use strict";var t={watchDOM:function(t,o,n){if(!o)throw"Empty selector in watchDOM()";if(0===e(o).length){var d=function(){e(o).length>0&&(e(document.body).off("DOMNodeInserted",d),n.resolve())};e(document.body).on("DOMNodeInserted",d),window.setTimeout(function(){e(document.body).off("DOMNodeInserted",d),n.reject()},t)}else n.resolve()}};return t});
define("mixins/fetchxml",["jquery"],function(e){"use strict";var r={fetchXML:function(r){var t=e.Deferred();return e.ajax({type:"GET",url:r,dataType:"xml",success:function(e){t.resolve(e)},error:function(e,r,n){t.reject()}}),t.promise()}};return r});
define("mixins/xml2html",["jquery","underscore"],function(e,t){"use strict";var r={_doc:function(e){var t;if("string"==typeof e)t=(new DOMParser).parseFromString(e,"text/xml");else{if(!(e instanceof Document))throw new Error("Unrecognized document input in XML2HTML");t=e}if(null==t||!t.hasOwnProperty("getElementsByTagName")&&t.getElementsByTagName("parsererror").length>0)throw new Error("Failed to parse document in xml2html");return t},xml2html:function(e,r,n,o){var i=this._doc(e),m=this._doc(r),a=new XSLTProcessor;a.importStylesheet(m),"object"==typeof n&&t.each(t.keys(n),function(e){a.setParameter(null,e,n[e])});var s;try{var c=a.transformToDocument(i);s=-1!=navigator.userAgent.indexOf("Firefox")?"text"===o?c.documentElement.textContent:c.documentElement:"text"===o?c.documentElement.textContent:s=c.body.innerHTML}catch(u){throw new Error("Error in XSLT transform: "+u.toString())}return s}};return r});
define("models/app",["jquery","underscore","backbone","routes/router","models/issue"],function(e,n,o,i,r){"use strict";var s=o.Model.extend({initialize:function(e){var n=new r({config:e.config});new i({routes:e.config.pages.routes,config:e.config,issue:n})}});return s});
define("models/article",["jquery","underscore","backbone","mixins/fetchxml","mixins/asyncInit","mixins/xml2html","text!xsl/geojson.xsl"],function(e,t,n,o,i,s,r){"use strict";var l=n.Model.extend({initialize:function(){var t=this;t.$def=e.Deferred();var n=t.fetchXML(t.get("path"));e.when(n).done(function(e){t.set("xml",e),t._mkGeojson(),null!==t.geojson&&t.set("placeType",t.geojson.properties.layer),t.$def.resolve(t)}).fail(function(){t.$def.reject()})},defaults:{xml:null,placeType:null,iconUrl:""},select:function(){this.trigger("active")},unselect:function(){this.trigger("inactive")},geojson:null,getGeojson:function(){return null===this.geojson&&this._mkGeojson(),this.geojson},_mkGeojson:function(){try{var e=this.xml2html(this.get("xml"),r,{},"text");this.geojson=JSON.parse(e)}catch(t){throw new Error("Failed to parse to json: "+t.toString())}}});return t.extend(l.prototype,o),t.extend(l.prototype,i),t.extend(l.prototype,s),l});
define("models/issue",["jquery","underscore","backbone","models/article","collections/articles","mixins/asyncInit"],function(e,t,i,n,c,l){"use strict";var r=i.Model.extend({initialize:function(i){var l=this;l.$def=e.Deferred();var r=i.config.articles.pathBase;r.match(/\/$/)||(r+="/");var a=i.config.articles.files,o=new c;l.config=i.config,l.set("collection",o);var s=t.map(t.range(a.length),function(){return void 0});t.each(a,function(e,t){s[t]=new n({articleid:t,articledir:r,path:r+e})});var f=t.map(s,function(e){return e.init()});e.when({},f).fail(function(){l.$def.reject()}),e.when.apply(null,f).done(function(){o.add(s),l.on("select",function(e){l._selectArticle(e)}),l.$def.resolve(l)}),e.when.apply(null,f).always(function(){t.forEach(f,function(e){"rejected"===e.state()&&l.$def.reject()}),l.$def.resolve(l)})},defaults:{activeArticle:null},_selectArticle:function(e){var t,i=this,n=i.get("collection");if("object"==typeof e)t=e;else{if("number"!=typeof e&&"string"!=typeof e)throw"Bad argument to models/issue";t=n.at(e)}(null===this.get("activeArticle")||this.get("activeArticle")!=e)&&(this.get("activeArticle")&&this.get("activeArticle").unselect(),i.set("activeArticle",t),t.init().done(function(){i.trigger("update",t),t.select()}))}});return t.extend(r.prototype,l),r});
define("models/map",["jquery","underscore","backbone","collections/markers","models/marker","mixins/asyncInit"],function(e,o,n,i,r,t){"use strict";var s=n.Model.extend({initialize:function(o){var n=this;if(n.$def=e.Deferred(),n.issue=o.issue,n.set("siteconfig",o.config),void 0===n.issue)throw new Error("Missing issue model in map model");if(n.set("router",o.router),!o.router)throw new Error("No router in MapModel");var i=e.Deferred();e.getJSON(o.config.map.config,function(e){n.set("mapconfig",e),i.resolve()}).fail(function(e,o,n){i.reject(),console.log("Failed to load map config file: "+n)}),e.when.apply({},[n.issue.init(),i]).done(function(){n._makeCollection(n.issue.get("collection").models,{success:function(){n.$def.resolve(n)},fail:function(){n.$def.reject()}})}).fail(function(){n.$def.reject()}).always(function(){n.$def.reject()})},defaults:{mapconfig:{},siteconfig:{},iconUrls:{}},_makeCollection:function(e,n){var t=this,s=new i;t.set("collection",s);var c=new Array(e.length),f=!1,a="",l=t.get("iconUrls"),u=t.attributes.siteconfig.markers.icons,d=o.shuffle(o.flatten(o.map(u,function(e){return o.map(e.files,function(o){return e.dir.concat(o)})})));if(e.forEach(function(e,o){var n=e.getGeojson()||{properties:{}},i=n.properties.layer;l[i]=l[i]||d.pop(),e.set("iconUrl",l[i])}),e.forEach(function(e,o){var n;try{n=new r({issue:t.issue,article:e,json:e.getGeojson(),router:t.router,iconUrl:l[e.get("placeType")]})}catch(i){return f=!0,void(a+="\n"+i.toString())}c[o]=n}),f)throw n.fail(),new Error(a);s.add(c),n.success()}});return o.extend(s.prototype,t),s});
define("models/marker",["jquery","underscore","backbone"],function(e,i,t){"use strict";var r=t.Model.extend({article:null,json:{},initialize:function(e){var i=this;i.app=e.app,i.article=e.article,i.router=e.router,e.issue.init().done(function(e){i.listenTo(i.article,"active",function(){i.trigger("active")})})}});return r});
define("routes/router",["jquery","underscore","backbone","models/error/user","views/error/user","views/clear","views/issue","views/map","views/menu"],function(e,i,r,n,s,t,a,o,u){"use strict";var g=r.Router.extend({pages:{},config:{},issue:null,mapView:null,initialize:function(e){var n=this;this.config=e.config,this.pages=e.config.pages,this.issue=e.issue,this.issue.init().done(function(){i.has(n.pages.router,"history")&&n.pages.router.history&&r.history.start()})},navigate:function(e,i){r.history.fragment!==e&&r.history.navigate(e,i)},page:function(e){var r,n=this;try{if(e||(e=this.pages.home),r=this.pages.pages[e],void 0===r)throw new Error("Missing config in router/page")}catch(s){return this.page("404")}(new t).render(),i.each(r,function(r){var s,t={config:n.config,issue:n.issue,router:n},a=JSON.parse(JSON.stringify(r));if(i.has(a,"view"))s=a.view;else{if(!i.has(a,"partial")){if(i.has(confg,"full"))return void(window.location.href=a.full.page);throw new Error("Unsupported page type in router: "+e)}s="views/partial",a.partial.page=n.pages.pathBase+a.partial.page,t=i.extend(t,a.partial)}require([s],function(e){var i=new e(t);"views/map"===s&&(n.mapView=i),i.render()})})},article:function(i){var r=this,n={config:r.config,issue:r.issue,router:r};if(e("#titlepage").length>0&&e("#titlepage").remove(),0===e("#issue").length){var s=new a(n);s.render()}if(0===e("#map").length&&(r.mapView=new o(n),r.mapView.render()),0===e("#menu").children().length){var t=new u(n);t.render()}e.when.apply({},[r.mapView.init()]).done(function(){r.issue.trigger("select",i)})}});return g});
define("views/app",["jquery","underscore","backbone"],function(e,n,i){"use strict";var o=i.View.extend({el:"body",initialize:function(){e(window).resize(function(){document.location.reload()})}});return o});
define("views/article",["jquery","underscore","backbone","mixins/domwatcher","mixins/xml2html","text!xsl/article.xsl","text!partials/image-popover.html","text!partials/image-popover-content.html","text!partials/lightbox-title.html","slidesjs","lightbox"],function(e,t,i,s,l,o,r,n,a){"use strict";var c=i.View.extend({id:"article",initialize:function(e){var t=this;t.config=e.config},render:function(){var t=this;if(t.$el=e("#"+t.id),0===t.$el.find("#"+t.model.cid).length){var i=this.xml2html(this.model.get("xml"),o,{"article-dir":t.config.articles.pathBase,iconUrl:t.model.get("iconUrl"),cid:t.model.cid});try{e(".article-content").remove(),e("#"+this.id).append(i)}catch(s){console.log("article load error: "+s.toString())}if(0===e("img.slidesjs-slide").length)e("#footer").remove(),e("article").removeClass("before-footer").addClass("no-footer");else try{t.postprocess()}catch(s){throw new Error("Failed to handle article images")}return t.$el.find(".article-marker").click(function(e,i){t.model.select()}),t}},remove:function(){},postprocess:function(){var i=this,s=e("#article article").height()-e("#header").outerHeight(!0);e("#body").css({height:s});var l=t.template(n);e("img.slidesjs-slide").each(function(t,i){var s=i.getAttribute("id"),o=e(".popover."+s),n=o.find(".head").text();e(i).attr("alt",o.find(".desc").text());var a=l({attr:o.find(".attr").text()});e(i).popover({container:"body",html:!0,content:a,title:n,template:r,trigger:"hover",placement:"left"}),e(i).click(function(t){e(i).popover("hide")})});var o=[];return i.$el.find("img.slidesjs-slide").each(function(t,i){var s=e.Deferred();e(i).load(function(){e(i).removeClass("remove"),s.resolve()}),e(i).error(function(){window.setTimeout(function(){s.reject()},500)}),o.push(s)}),e.when.apply({},o).always(function(){e("img.slidesjs-slide.remove").remove(),e(".image-loading").removeClass("image-loading"),e("#slides").slidesjs({navigation:{active:e("img.slidesjs-slide").length>1,effect:"fade"},pagination:{active:e("img.slidesjs-slide").length>1,effect:"fade"},effect:{fade:{speed:100,crossfade:!0}},callback:{loaded:function(t){var i=e(".slidesjs-control").children(":eq("+(t-1)+")");i.css({visibility:"hidden"}),i.css({height:"auto",width:"auto",maxHeight:e(".slidesjs-container").height(),maxWidth:e(".slidesjs-container").width(),position:"relative"});var s=(e(".slidesjs-container").width()-i.width())/2;s-=parseInt(i.css("padding-left"),10),i.css({left:s}),i.css({visibility:"visible"})},start:function(t){e(".slidesjs-control").children().css({visibility:"hidden"})},complete:function(t){var i=t-1,s=e(".slidesjs-control").children(":eq("+i+")");s.css({height:"auto",width:"auto",maxHeight:e(".slidesjs-container").height(),maxWidth:e(".slidesjs-container").width(),position:"relative"}),s.css({visibility:"visible"})}}})}),e(".gallery-item").magnificPopup({type:"image",gallery:{enabled:!0},image:{titleSrc:function(i){var s=i.el.attr("id"),l=e(".popover."+s),o=t.template(a),r=o({title:l.find(".head").text(),attr:l.find(".attr").text()});return r}}}),e(".glyphicon.glyphicon-expand").on("click",function(t){e(".gallery-item").magnificPopup("open")}),i}});return t.extend(c.prototype,s),t.extend(c.prototype,l),c});
define("views/clear",["jquery","underscore","backbone"],function(e,n,r,t){"use strict";var c=r.View.extend({el:"body",render:function(){e("body").empty()}});return c});
define("views/issue",["jquery","underscore","backbone","text!partials/issue.html","views/article"],function(e,i,t,n,o){"use strict";var r=t.View.extend({el:"#issue",template:i.template(n),initialize:function(e){var i=this;i.model=e.issue,i.model.on("update",function(e){i.select(e)})},render:function(){this.$el.remove(),e("body").append(n)},select:function(e){var i=this,t=new o({model:e,config:i.model.config,issue:i,router:i.model.router});e.on("active",t.render,t),e.on("inactive",t.remove,t)}});return r});
define("views/map",["jquery","underscore","backbone","leaflet","text!partials/map.html","text!partials/marker-legend.html","models/map","views/marker","mixins/asyncInit"],function(e,t,o,n,r,i,a,p,l){"use strict";var c=o.View.extend({id:"map",tagName:"div",initialize:function(t){var o=this;o.$def=e.Deferred(),o.config=t.config,o.model=new a(t),o.router=t.router},render:function(){var o=this;e("#"+o.id).children().length>0||(e("body").append(r),this.model.init().done(function(){var r=o.model.get("collection"),a=o.model.get("mapconfig"),p=new n.Map(a.id,a.map),l=t.template(i),c={},s={},u={},d=function(e){return e.lat.toString()+e.lng.toString()};o.configureMap(p,a,c,d,r.models),r.forEach(function(e){var t=e.get("json")||{properties:{}},r=(t.properties.layer,a.features.icon);r.iconUrl=e.get("iconUrl")||"";var i=n.icon(r);o.addMarkerToLayer(e,p,c,d,a,s,i,r.iconUrl)}),t.each(t.keys(s),function(e){var t=l({iconUrl:o.model.get("iconUrls")[e],title:e});u[t]=n.layerGroup(s[e])}),n.control.layers(null,u,a.control.layers.options).addTo(p),e("input.leaflet-control-layers-selector").each(function(t,o){e(o).click()}),o.$def.resolve(o)}))},configureMap:function(e,o,r,i,a){var p,l,c,s,u;p=this,l=new n.TileLayer(o.tileLayer.url,o.tileLayer.opts),c=n.control.scale(o.scale),e.addLayer(l),c.addTo(e),u=n.DomUtil.getViewportOffset(document.getElementById("article")).x,s=n.latLngBounds(t.map(a,function(e){var t=e.get("json").geometry.coordinates.slice(0);return n.latLng(t.reverse())})),0===u?e.fitBounds(s):u!=e.getSize().x?e.fitBounds(s,{paddingBottomRight:[document.body.clientWidth-u,0]}):e.fitBounds(s),e.invalidateSize(),e.on("popupopen",function(t){var o=t.popup,n=o.getLatLng();p.handlePopupPosition(e,o),r[i(n)]=-1!=navigator.userAgent.indexOf("Firefox")?!0:!0}),e.on("popupclose",function(e){r[i(e.popup.getLatLng())]=-1!=navigator.userAgent.indexOf("Firefox")?!1:!1})},handlePopupPosition:function(t,o){var r,i,a,p,l;a=o.getLatLng(),void 0!==a&&(r=n.DomUtil.getViewportOffset(document.getElementById("article")).x,i=e(o.getContent()).closest(".leaflet-popup-content-wrapper").first(),l=n.point(o.options.autoPanPaddingBottomRight||o.options.autoPanPadding),l=l?l.x:0,p=i.offset().left+i.width()+l,0!=r&&p>r&&r!=t.getSize().x&&t.panBy([p-r,0]))},addMarkerToLayer:function(e,o,r,i,a,l,c,s){var u=this,d=e.get("json"),f=new p({model:e,router:u.router,iconUrl:s,iconTitle:d.properties.layer});f.on("active",function(){u.handlePopupPosition(o,f.popup)}),f.render(),n.geoJson(d,{onEachFeature:function(o,p){var c=n.popup(a.features.popup);f.popup=c,c.setContent(f.el),p.bindPopup(c),p.removeEventListener("click"),p.on("click",function(){e.trigger("active")}),p.on("mouseover",function(){u.config.map.hoverPopup&&(r[i(p.getLatLng())]||p.openPopup())}),e.on("active",function(e){r[i(p.getLatLng())]||p.openPopup()}),r[i(p.getLatLng())]=!1,t.has(l,d.properties.layer)?l[d.properties.layer].push(p):l[d.properties.layer]=[p]},pointToLayer:function(e,t){return n.marker(t,{icon:c,clickable:!!e.properties.text,title:e.properties.markername||"",opacity:a.features.opacity,riseOnHover:a.features.riseOnHover})}})}});return t.extend(c.prototype,l),c});
define("views/marker",["jquery","underscore","backbone","text!partials/marker.html"],function(e,i,t,r){"use strict";var n=t.View.extend({template:i.template(r),el:"",router:null,iconUrl:"",popup:null,initialize:function(e){var i=this;i.router=e.router,i.iconUrl=e.iconUrl,i.iconTitle=e.iconTitle,i.model.on("active",function(){var e="article/"+i.model.article.get("articleid");i.router.navigate(e,{trigger:!0}),i.trigger("active")})},render:function(){this.$el.html(this.template({articleid:this.model.article.get("articleid"),geojson:this.model.article.getGeojson(),iconUrl:this.iconUrl,iconTitle:this.iconTitle})),this.$el.find("img.icon").popover({container:this.$el.find("span.icon")})}});return n});
define("views/menu",["jquery","underscore","backbone","text!partials/menu.html","mixins/domwatcher","views/article/menu"],function(e,t,n,i,r,o){"use strict";var a=n.View.extend({template:t.template(i),id:"menu",tagName:"div",issue:null,config:{},initialize:function(e){this.config=e.config,this.issue=e.issue},render:function(){var n=this;if(0===e("#"+n.id).children().length){var i=this.config.menu,r=[],a={},c={};t.each(i,function(e){if(a[e.partial]="","menu"===e.type){if("collections/articles"!==e.collection)throw new Error("Unhandled collection type requested: "+e.collection);c[e.collection]=n.issue.get("collection")}}),t.each(t.keys(a),function(n){var i=e.Deferred();require(["text!"+n],function(e){a[n]=t.template(e),i.resolve()}),r.push(i.promise())});var l="";e.when.apply(e,r).done(function(){t.forEach(i,function(n,i){var r=n.partial,u={},s="",f=[];"page"===n.type||"sep"===n.type?l+=a[r](n):"menu"===n.type&&(c[n.collection].models.forEach(function(t,i){var r,a=n.item.href.replace(":i",i),c=new o({model:t}),l=c.render({href:"#"+a});if("string"==typeof l)r=e(l);else{if(!(l instanceof Element))throw new Error("Unsupported result type for submenu: "+l.toString());if("BODY"===l.nodeName)r=e(l.innerHTML);else{if("LI"!==l.nodeName)throw new Error("Unsupported document element for submenu: "+l.toString());r=e(l.outerHTML)}}r.attr("data-sort-key")?u[r.attr("data-sort-key")]=r.clone():u[r.find("a").text()]=r.clone()}),f=t.keys(u),f.sort(function(e,t){return e.localeCompare(t)}),t.each(f,function(e){s+=u[e][0].outerHTML}),l+=a[r]({label:n.label,items:s}))})}).then(function(){e("#"+n.id).empty().append(n.template({content:l}));var t=e.Deferred();t.fail(function(){n.render()}),n.watchDOM(500,"#"+n.id,t)}).fail(function(){throw new Error("Failed to build menu.")})}}});return t.extend(a.prototype,r),a});
define("views/page",["jquery","underscore","backbone","mixins/domwatcher","text!partials/page.html"],function(e,t,n,r,i){"use strict";var a=n.View.extend({el:"body",render:function(){var t=this,n=e.Deferred();n.then(function(){e(t.el).append(i)}),this.watchDOM(1e3,t.el,n)}});return t.extend(a.prototype,r),a});
define("views/partial",["jquery","underscore","backbone","mixins/domwatcher","mixins/asyncInit"],function(e,t,n,i,r){"use strict";var a=n.View.extend({el:"",page:"",initialize:function(t){var n=this;n.el=t.el,n.$def=e.Deferred(),require(["text!"+t.page],function(e){n.page=e,n.$def.resolve(n)})},render:function(){var t=this,n=e.Deferred();t.init().then(function(){e(t.el).append(t.page)}),this.watchDOM(1e3,t.el,n)}});return t.extend(a.prototype,i),t.extend(a.prototype,r),a});
define("models/error/user",["backbone"],function(e){"use strict";var s=e.Model.extend({defaults:{msg:""},initialize:function(e){this.set("msg",e.message)}});return s});
define("views/article/menu",["jquery","underscore","backbone","mixins/xml2html","text!xsl/article-menu.xsl"],function(e,t,i,n,r){"use strict";var l=i.View.extend({render:function(e){var t=this;if("resolved"!==this.model.init().state())throw"Uninitialized article in ArticleMenuView";var i=t.xml2html(t.model.get("xml"),r,e);return i}});return t.extend(l.prototype,n),l});
define("views/error/user",["jquery","backbone","text!partials/error/user.html"],function(e,t,r){"use strict";var i=t.View.extend({template:_.template(r),el:e("#errorDialog"),initialize:function(){this.render()},render:function(){return this.$el.html(this.template(this.model.attributes)),this.$el.modal({keyboard:!0,show:!0}),this}});return i});
require.config({paths:{text:"//cdnjs.cloudflare.com/ajax/libs/require-text/2.0.12/text.min",jquery:"//code.jquery.com/jquery-2.1.4.min",bootstrap:"//maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min",backbone:"//cdnjs.cloudflare.com/ajax/libs/backbone.js/1.1.2/backbone-min",underscore:"//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min",leaflet:"//cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.3/leaflet",slidesjs:"//cdnjs.cloudflare.com/ajax/libs/slidesjs/3.0/jquery.slides.min",lightbox:"//cdnjs.cloudflare.com/ajax/libs/magnific-popup.js/1.0.0/jquery.magnific-popup.min",partials:"../partials",xsl:"../script/xsl",pages:"../pages"},shim:{bootstrap:{deps:["jquery"]},backbone:{deps:["jquery","underscore"],exports:"Backbone"},underscore:{exports:"_"},text:{deps:[]},slidesjs:{deps:["jquery"]},lightbox:{deps:["jquery"]}}}),require(["jquery","models/error/user","views/error/user","models/app","views/app","bootstrap"],function(e,s,o,r,a){"use strict";var i=e("#main").attr("data-config");i?e.getJSON(i,function(e){try{{new a({model:new r({config:e})})}}catch(i){opts.config.debug||new o({model:new s({msg:i.toString()})})}}).fail(function(e,r,a){new o({model:new s({msg:"Failed to load site config file '"+i+"' "+a})})}):new o({model:new s({msg:"No configuration filename specified in home page."})})});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbGxlY3Rpb25zL2FydGljbGVzLmpzIiwiY29sbGVjdGlvbnMvbWFya2Vycy5qcyIsIm1peGlucy9hc3luY0luaXQuanMiLCJtaXhpbnMvZG9td2F0Y2hlci5qcyIsIm1peGlucy9mZXRjaHhtbC5qcyIsIm1peGlucy94bWwyaHRtbC5qcyIsIm1vZGVscy9hcHAuanMiLCJtb2RlbHMvYXJ0aWNsZS5qcyIsIm1vZGVscy9pc3N1ZS5qcyIsIm1vZGVscy9tYXAuanMiLCJtb2RlbHMvbWFya2VyLmpzIiwicm91dGVzL3JvdXRlci5qcyIsInZpZXdzL2FwcC5qcyIsInZpZXdzL2FydGljbGUuanMiLCJ2aWV3cy9jbGVhci5qcyIsInZpZXdzL2lzc3VlLmpzIiwidmlld3MvbWFwLmpzIiwidmlld3MvbWFya2VyLmpzIiwidmlld3MvbWVudS5qcyIsInZpZXdzL3BhZ2UuanMiLCJ2aWV3cy9wYXJ0aWFsLmpzIiwibW9kZWxzL2Vycm9yL3VzZXIuanMiLCJ2aWV3cy9hcnRpY2xlL21lbnUuanMiLCJ2aWV3cy9lcnJvci91c2VyLmpzIiwibWFpbi5qcyJdLCJuYW1lcyI6WyJkZWZpbmUiLCIkIiwiXyIsIkJhY2tib25lIiwiQXJ0aWNsZU1vZGVsIiwiQXJ0aWNsZXNDb2xsZWN0aW9uIiwiQ29sbGVjdGlvbiIsImV4dGVuZCIsIm1vZGVsIiwiTWFya2VyTW9kZWwiLCJNYXJrZXJzQ29sbGVjdGlvbiIsIkFzeW5jSW5pdCIsIiRkZWYiLCJpbml0IiwidGhpcyIsInByb21pc2UiLCJET01XYXRjaGVyIiwid2F0Y2hET00iLCJtcyIsInNlbCIsImxlbmd0aCIsImYiLCJkb2N1bWVudCIsImJvZHkiLCJvZmYiLCJyZXNvbHZlIiwib24iLCJ3aW5kb3ciLCJzZXRUaW1lb3V0IiwicmVqZWN0IiwiRmV0Y2hYTUwiLCJmZXRjaFhNTCIsInVybCIsIiRnZXQiLCJEZWZlcnJlZCIsImFqYXgiLCJ0eXBlIiwiZGF0YVR5cGUiLCJzdWNjZXNzIiwiZGF0YSIsImVycm9yIiwianFYSFIiLCJ0ZXh0U3RhdHVzIiwiZXJyb3JUaHJvd24iLCJYTUwySFRNTCIsIl9kb2MiLCJ4bWwiLCJ4bWxEb2MiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJEb2N1bWVudCIsIkVycm9yIiwiaGFzT3duUHJvcGVydHkiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInhtbDJodG1sIiwieHNsIiwicGFyYW1zIiwibW9kZSIsInhzbERvYyIsInhzbHRQcm9jZXNzb3IiLCJYU0xUUHJvY2Vzc29yIiwiaW1wb3J0U3R5bGVzaGVldCIsImVhY2giLCJrZXlzIiwia2V5Iiwic2V0UGFyYW1ldGVyIiwicmVzdWx0IiwiZG9jIiwidHJhbnNmb3JtVG9Eb2N1bWVudCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImluZGV4T2YiLCJkb2N1bWVudEVsZW1lbnQiLCJ0ZXh0Q29udGVudCIsImlubmVySFRNTCIsImUiLCJ0b1N0cmluZyIsIlJvdXRlciIsIklzc3VlTW9kZWwiLCJBcHBNb2RlbCIsIk1vZGVsIiwiaW5pdGlhbGl6ZSIsIm9wdHMiLCJpc3N1ZSIsImNvbmZpZyIsInJvdXRlcyIsInBhZ2VzIiwiZ2VvSnNvblhzbCIsInRoYXQiLCJnZXQiLCJ3aGVuIiwiZG9uZSIsInNldCIsIl9ta0dlb2pzb24iLCJnZW9qc29uIiwicHJvcGVydGllcyIsImxheWVyIiwiZmFpbCIsImRlZmF1bHRzIiwicGxhY2VUeXBlIiwiaWNvblVybCIsInNlbGVjdCIsInRyaWdnZXIiLCJ1bnNlbGVjdCIsImdldEdlb2pzb24iLCJqc29uU3RyaW5nIiwiSlNPTiIsInBhcnNlIiwicHJvdG90eXBlIiwiQXJ0aWNsZUNvbGxlY3Rpb24iLCJhcmdzIiwiYXJ0ZGlyIiwiYXJ0aWNsZXMiLCJwYXRoQmFzZSIsIm1hdGNoIiwiZmlsZXMiLCJjb2wiLCJtYXAiLCJyYW5nZSIsInVuZGVmaW5lZCIsImZpbGUiLCJpIiwiYXJ0aWNsZWlkIiwiYXJ0aWNsZWRpciIsInBhdGgiLCJpbml0cyIsImFydGljbGUiLCJhcHBseSIsImFkZCIsIl9zZWxlY3RBcnRpY2xlIiwiYWx3YXlzIiwiZm9yRWFjaCIsIiRwcm9taXNlIiwic3RhdGUiLCJhY3RpdmVBcnRpY2xlIiwiYXJ0IiwiYXQiLCJNYXBNb2RlbCIsInJvdXRlciIsIiRjb25maWdEZWYiLCJnZXRKU09OIiwianF4aHIiLCJjb25zb2xlIiwibG9nIiwiX21ha2VDb2xsZWN0aW9uIiwibW9kZWxzIiwibWFwY29uZmlnIiwic2l0ZWNvbmZpZyIsImljb25VcmxzIiwiY2JzIiwibWFya2VycyIsIkFycmF5IiwiZXJyb3JNc2ciLCJpY29ucyIsImljY29uZmlnIiwiYXR0cmlidXRlcyIsImljb25GaWxlcyIsInNodWZmbGUiLCJmbGF0dGVuIiwiZW50cnkiLCJkaXIiLCJjb25jYXQiLCJwb3AiLCJtbSIsImpzb24iLCJhcHAiLCJsaXN0ZW5UbyIsIlVzZXJFcnJvck1vZGVsIiwiVXNlckVycm9yVmlldyIsIkNsZWFyVmlldyIsIklzc3VlVmlldyIsIk1hcFZpZXciLCJNZW51VmlldyIsIm1hcFZpZXciLCJoYXMiLCJoaXN0b3J5Iiwic3RhcnQiLCJuYXZpZ2F0ZSIsImZyYWdtZW50Iiwib3B0aW9ucyIsInBhZ2UiLCJwYWdlQ29uZmlnIiwiaG9tZSIsInJlbmRlciIsInBjIiwidmlld05hbWUiLCJzdHJpbmdpZnkiLCJ2aWV3IiwiY29uZmciLCJsb2NhdGlvbiIsImhyZWYiLCJmdWxsIiwicGFydGlhbCIsInJlcXVpcmUiLCJWaWV3IiwidiIsImlkIiwicmVtb3ZlIiwiaXN2IiwiY2hpbGRyZW4iLCJtbnYiLCJBcHBWaWV3IiwiZWwiLCJyZXNpemUiLCJyZWxvYWQiLCJwb3BvdmVyVGVtcGwiLCJwb3BvdmVyQ29udGVudFRlbXBsIiwibGlnaHRib3hUaXRsZVRlbXBsIiwiQXJ0aWNsZVZpZXciLCIkZWwiLCJmaW5kIiwiY2lkIiwiaHRtbCIsImFydGljbGUtZGlyIiwiYXBwZW5kIiwicmVtb3ZlQ2xhc3MiLCJhZGRDbGFzcyIsInBvc3Rwcm9jZXNzIiwiY2xpY2siLCJlbHQiLCJoZWlnaHQiLCJvdXRlckhlaWdodCIsImNzcyIsInBjdCIsInRlbXBsYXRlIiwiZ2V0QXR0cmlidXRlIiwiJHBvIiwidGl0bGUiLCJ0ZXh0IiwiYXR0ciIsImNvbnRlbnQiLCJwb3BvdmVyIiwiY29udGFpbmVyIiwicGxhY2VtZW50IiwiZXZ0IiwiZGVmcyIsImltZyIsImxvYWQiLCJwdXNoIiwic2xpZGVzanMiLCJuYXZpZ2F0aW9uIiwiYWN0aXZlIiwiZWZmZWN0IiwicGFnaW5hdGlvbiIsImZhZGUiLCJzcGVlZCIsImNyb3NzZmFkZSIsImNhbGxiYWNrIiwibG9hZGVkIiwibnVtYmVyIiwiJGltZyIsInZpc2liaWxpdHkiLCJ3aWR0aCIsIm1heEhlaWdodCIsIm1heFdpZHRoIiwicG9zaXRpb24iLCJsZWZ0IiwicGFyc2VJbnQiLCJjb21wbGV0ZSIsIm5ld0ltZyIsIm1hZ25pZmljUG9wdXAiLCJnYWxsZXJ5IiwiZW5hYmxlZCIsImltYWdlIiwidGl0bGVTcmMiLCIkaXRlbSIsInRtcGwiLCJlbXB0eSIsImF2IiwiTCIsIm1hcFBhcnRpYWwiLCJsZWdlbmRQYXJ0aWFsIiwiTWFya2VyVmlldyIsInRhZ05hbWUiLCJNYXAiLCJsZWdlbmRUZW1wbCIsIm9wZW5wb3B1cCIsImxheWVyTWFya2VycyIsImxheWVyR3JvdXBzIiwicG9wdXBpZCIsImxhdGxuZyIsImxhdCIsImxuZyIsImNvbmZpZ3VyZU1hcCIsIm1hcmtlck1vZGVsIiwiaWNvbkNvbmZpZyIsImZlYXR1cmVzIiwiaWNvbiIsImFkZE1hcmtlclRvTGF5ZXIiLCJsYXllck5hbWUiLCJsYXllckxlZ2VuZCIsImxheWVyR3JvdXAiLCJjb250cm9sIiwibGF5ZXJzIiwiYWRkVG8iLCJ0aWxlbGF5ZXIiLCJzY2FsZSIsImJvdW5kcyIsImVkZ2VQdFgiLCJUaWxlTGF5ZXIiLCJ0aWxlTGF5ZXIiLCJhZGRMYXllciIsIkRvbVV0aWwiLCJnZXRWaWV3cG9ydE9mZnNldCIsImdldEVsZW1lbnRCeUlkIiwieCIsImxhdExuZ0JvdW5kcyIsIm1hcmtlciIsImxuZ0xhdCIsImdlb21ldHJ5IiwiY29vcmRpbmF0ZXMiLCJzbGljZSIsImxhdExuZyIsInJldmVyc2UiLCJmaXRCb3VuZHMiLCJnZXRTaXplIiwicGFkZGluZ0JvdHRvbVJpZ2h0IiwiY2xpZW50V2lkdGgiLCJpbnZhbGlkYXRlU2l6ZSIsInBvcHVwIiwicG9wdXBMYXRMbmciLCJnZXRMYXRMbmciLCJoYW5kbGVQb3B1cFBvc2l0aW9uIiwiJHBvcHVwV3JhcCIsInBvcHVwUmlnaHRYIiwicGFkIiwiZ2V0Q29udGVudCIsImNsb3Nlc3QiLCJmaXJzdCIsInBvaW50IiwiYXV0b1BhblBhZGRpbmdCb3R0b21SaWdodCIsImF1dG9QYW5QYWRkaW5nIiwib2Zmc2V0IiwicGFuQnkiLCJtYXJrZXJWaWV3IiwiaWNvblRpdGxlIiwiZ2VvSnNvbiIsIm9uRWFjaEZlYXR1cmUiLCJmZWF0dXJlIiwibWFwTWFya2VyIiwic2V0Q29udGVudCIsImJpbmRQb3B1cCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJob3ZlclBvcHVwIiwib3BlblBvcHVwIiwiYXJ0aWQiLCJwb2ludFRvTGF5ZXIiLCJjbGlja2FibGUiLCJtYXJrZXJuYW1lIiwib3BhY2l0eSIsInJpc2VPbkhvdmVyIiwibWVudVRtcGwiLCJBcnRpY2xlTWVudVZpZXciLCJpdGVtcyIsIm1lbnUiLCJwcm9taXNlcyIsInRlbXBsYXRlcyIsImNvbGxlY3Rpb25zIiwiaXRlbSIsImNvbGxlY3Rpb24iLCJ0ZW1wbCIsInNvcnRlciIsInN1YkNvbnRlbnQiLCJzb3J0S2V5cyIsImoiLCIkbGkiLCJyZXBsYWNlIiwiYW12IiwiRWxlbWVudCIsIm5vZGVOYW1lIiwib3V0ZXJIVE1MIiwiY2xvbmUiLCJzb3J0IiwiYSIsImIiLCJsb2NhbGVDb21wYXJlIiwibGFiZWwiLCJ0aGVuIiwiJGZhaWxEZWYiLCJQYWdlVmlldyIsIlBhcnRpYWxWaWV3IiwiJHdhdGNoRGVmIiwibXNnIiwibWVzc2FnZSIsImFtWHNsIiwibWVudWl0ZW0iLCJtb2RhbCIsImtleWJvYXJkIiwic2hvdyIsInBhdGhzIiwianF1ZXJ5IiwiYm9vdHN0cmFwIiwiYmFja2JvbmUiLCJ1bmRlcnNjb3JlIiwibGVhZmxldCIsImxpZ2h0Ym94IiwicGFydGlhbHMiLCJzaGltIiwiZGVwcyIsImV4cG9ydHMiLCJjb25maWdmaWxlIiwiZGVidWciXSwibWFwcGluZ3MiOiJBQUNBQSxPQUFPLHdCQUNILFNBQ0EsYUFDQSxXQUNBLGtCQUNELFNBQVNDLEVBQUVDLEVBQUVDLEVBQVNDLEdBQ3JCLFlBQ0EsSUFBSUMsR0FBcUJGLEVBQVNHLFdBQVdDLFFBQ3pDQyxNQUFPSixHQUVYLE9BQU9DO0FDVlhMLE9BQU8sdUJBQ0gsU0FDQSxhQUNBLFdBQ0EsaUJBQ0QsU0FBU0MsRUFBRUMsRUFBRUMsRUFBU00sR0FDckIsWUFDQSxJQUFJQyxHQUFvQlAsRUFBU0csV0FBV0MsUUFDeENDLE1BQU9DLEdBRVgsT0FBT0M7QUNWWFYsT0FBTyxvQkFDSCxTQUNBLGNBQ0QsU0FBU0MsRUFBRUMsR0FDVixZQUNBLElBQUlTLElBQ0VDLEtBQU0sS0FDTkMsS0FBTSxXQUNKLE1BQU9DLE1BQUtGLEtBQUtHLFdBR3pCLE9BQU9KO0FDWFhYLE9BQU8scUJBQ0gsVUFDRCxTQUFTQyxHQUNSLFlBQ0EsSUFBSWUsSUFDQUMsU0FBVyxTQUFTQyxFQUFHQyxFQUFJUCxHQUN2QixJQUFLTyxFQUFLLEtBQU0sOEJBQ2hCLElBQXNCLElBQWxCbEIsRUFBRWtCLEdBQUtDLE9BQWMsQ0FDckIsR0FBSUMsR0FBSSxXQUNBcEIsRUFBRWtCLEdBQUtDLE9BQVMsSUFDaEJuQixFQUFFcUIsU0FBU0MsTUFBTUMsSUFBSSxrQkFBbUJILEdBQ3hDVCxFQUFLYSxXQUdieEIsR0FBRXFCLFNBQVNDLE1BQU1HLEdBQUcsa0JBQW1CTCxHQUN2Q00sT0FBT0MsV0FBVyxXQUNkM0IsRUFBRXFCLFNBQVNDLE1BQU1DLElBQUksa0JBQW1CSCxHQUN4Q1QsRUFBS2lCLFVBQ05YLE9BRUhOLEdBQUthLFdBSWpCLE9BQU9UO0FDeEJYaEIsT0FBTyxtQkFDSCxVQUNELFNBQVNDLEdB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aEQsWUFDQSxJQUFJdU0sR0FBYS9ZLEVBQUUsU0FBU29PLEtBQUssY0FDN0IySyxHQUNBL1ksRUFBRTJJLFFBQVFvUSxFQUFZLFNBQVM3UCxHQUMzQixJQUNJLENBQVUsR0FBSXNELElBQ1ZqTSxNQUFPLEdBQUt1RSxJQUFVSyxPQUFRK0QsT0FFcEMsTUFBT3hFLEdBQ0FPLEtBQUtFLE9BQU82VCxPQUNiLEdBQUl6TyxJQUNBaEssTUFBTyxHQUFJK0osSUFDUHVOLElBQUtuVCxFQUFFQyxrQkFLeEJxQixLQUFLLFNBQVM0QyxFQUFPbkcsRUFBWUYsR0FDaEMsR0FBSWdJLElBQ0FoSyxNQUFPLEdBQUkrSixJQUNQdU4sSUFBSyxvQ0FBc0NrQixFQUFhLEtBQU94VyxRQUszRSxHQUFJZ0ksSUFDQWhLLE1BQU8sR0FBSStKLElBQ1B1TixJQUFLIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKmdsb2JhbCBkZWZpbmUgKi9cbmRlZmluZSgnY29sbGVjdGlvbnMvYXJ0aWNsZXMnLCBbXG4gICAgJ2pxdWVyeScsIFxuICAgICd1bmRlcnNjb3JlJywgXG4gICAgJ2JhY2tib25lJyxcbiAgICAnbW9kZWxzL2FydGljbGUnXG5dLCBmdW5jdGlvbigkLF8sQmFja2JvbmUsQXJ0aWNsZU1vZGVsKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBBcnRpY2xlc0NvbGxlY3Rpb24gPSBCYWNrYm9uZS5Db2xsZWN0aW9uLmV4dGVuZCh7XG4gICAgICAgIG1vZGVsOiBBcnRpY2xlTW9kZWxcbiAgICB9KTsgICAgXG4gICAgcmV0dXJuIEFydGljbGVzQ29sbGVjdGlvbjtcbn0pO1xuIiwiLypnbG9iYWwgZGVmaW5lICovXG5kZWZpbmUoJ2NvbGxlY3Rpb25zL21hcmtlcnMnLCBbXG4gICAgJ2pxdWVyeScsIFxuICAgICd1bmRlcnNjb3JlJyxcbiAgICAnYmFja2JvbmUnLFxuICAgICdtb2RlbHMvbWFya2VyJ1xuXSwgZnVuY3Rpb24oJCxfLEJhY2tib25lLE1hcmtlck1vZGVsKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBNYXJrZXJzQ29sbGVjdGlvbiA9IEJhY2tib25lLkNvbGxlY3Rpb24uZXh0ZW5kKHtcbiAgICAgICAgbW9kZWw6IE1hcmtlck1vZGVsXG4gICAgfSk7ICAgIFxuICAgIHJldHVybiBNYXJrZXJzQ29sbGVjdGlvbjtcbn0pO1xuIiwiLypnbG9iYWwgZGVmaW5lICovXG5kZWZpbmUoJ21peGlucy9hc3luY0luaXQnLCBbXG4gICAgJ2pxdWVyeScsXG4gICAgJ3VuZGVyc2NvcmUnXG5dLCBmdW5jdGlvbigkLF8pIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIEFzeW5jSW5pdCA9IHtcbiAgICAgICAgICAkZGVmOiBudWxsXG4gICAgICAgICwgaW5pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kZGVmLnByb21pc2UoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEFzeW5jSW5pdDtcbn0pO1xuIiwiLypnbG9iYWwgZGVmaW5lICovXG5kZWZpbmUoJ21peGlucy9kb213YXRjaGVyJywgW1xuICAgICdqcXVlcnknIFxuXSwgZnVuY3Rpb24oJCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgRE9NV2F0Y2hlciA9IHtcbiAgICAgICAgd2F0Y2hET00gOiBmdW5jdGlvbihtcyxzZWwsJGRlZikge1xuICAgICAgICAgICAgaWYgKCFzZWwpIHRocm93IFwiRW1wdHkgc2VsZWN0b3IgaW4gd2F0Y2hET00oKVwiO1xuICAgICAgICAgICAgaWYgKCQoc2VsKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgZiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoJChzZWwpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoZG9jdW1lbnQuYm9keSkub2ZmKCdET01Ob2RlSW5zZXJ0ZWQnLCBmKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRkZWYucmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAkKGRvY3VtZW50LmJvZHkpLm9uKCdET01Ob2RlSW5zZXJ0ZWQnLCBmKTtcbiAgICAgICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgJChkb2N1bWVudC5ib2R5KS5vZmYoJ0RPTU5vZGVJbnNlcnRlZCcsIGYpO1xuICAgICAgICAgICAgICAgICAgICAkZGVmLnJlamVjdCgpO1xuICAgICAgICAgICAgICAgIH0sIG1zKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJGRlZi5yZXNvbHZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBET01XYXRjaGVyO1xufSk7XG4iLCIvKmdsb2JhbCBkZWZpbmUgKi9cbmRlZmluZSgnbWl4aW5zL2ZldGNoeG1sJywgW1xuICAgICdqcXVlcnknXG5dLCBmdW5jdGlvbigkKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBGZXRjaFhNTCA9IHtcbiAgICAgICAgLy8gcmV0dXJuIGFuIG9iamVjdCBpbXBsZW1lbnRpbmcgdGhlIFByb21pc2UgaW50ZXJmYWNlXG4gICAgICAgIC8vIHdoZW4gc3VjY2Vzc2Z1bCwgdGhlIFByb21pc2UgcmV0dXJucyB0aGUgZGF0YSBmZXRjaGVkXG4gICAgICAgIC8vIGJ5IHRoZSBhamF4IHJlcXVlc3RcbiAgICAgICAgLy8gZGF0YSByZXR1cm5lZCBieSB0aGUgcHJvbWlzZSBpcyBhIERvY3VtZW50XG4gICAgICAgIGZldGNoWE1MIDogZnVuY3Rpb24odXJsKSB7XG4gICAgICAgICAgICB2YXIgJGdldCA9ICQuRGVmZXJyZWQoKTtcbiAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgdHlwZTogICAgICdHRVQnLFxuICAgICAgICAgICAgICAgIHVybDogICAgICB1cmwsXG4gICAgICAgICAgICAgICAgZGF0YVR5cGU6ICd4bWwnLFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICRnZXQucmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbihqcVhIUiwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pIHtcbiAgICAgICAgICAgICAgICAgICAgJGdldC5yZWplY3QoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiAkZ2V0LnByb21pc2UoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEZldGNoWE1MO1xufSk7XG4iLCIvKmdsb2JhbCBkZWZpbmUgKi9cbmRlZmluZSgnbWl4aW5zL3htbDJodG1sJywgW1xuICAgICdqcXVlcnknLFxuICAgICd1bmRlcnNjb3JlJ1xuXSwgZnVuY3Rpb24oJCxfKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBYTUwySFRNTCA9IHtcbiAgICAgICAgX2RvYzogZnVuY3Rpb24oeG1sKSB7XG4gICAgICAgICAgICB2YXIgeG1sRG9jO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB4bWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgeG1sRG9jID0gbmV3IERPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyh4bWwsJ3RleHQveG1sJyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHhtbCBpbnN0YW5jZW9mIERvY3VtZW50KSB7XG4gICAgICAgICAgICAgICAgeG1sRG9jID0geG1sO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbnJlY29nbml6ZWQgZG9jdW1lbnQgaW5wdXQgaW4gWE1MMkhUTUxcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoeG1sRG9jID09IG51bGwgfHwgKCF4bWxEb2MuaGFzT3duUHJvcGVydHkoJ2dldEVsZW1lbnRzQnlUYWdOYW1lJykgJiYgeG1sRG9jLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdwYXJzZXJlcnJvcicpLmxlbmd0aCA+IDApKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIHBhcnNlIGRvY3VtZW50IGluIHhtbDJodG1sXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHhtbERvYztcbiAgICAgICAgfSxcbiAgICAgICAgLy8gcmV0dXJuIEhUTUwgb3IgSlNPTiBzdHJpbmcgZnJvbSBYU0xUIHRyYW5zZm9ybWF0aW9uXG4gICAgICAgIHhtbDJodG1sOiBmdW5jdGlvbih4bWwseHNsLHBhcmFtcyxtb2RlKSB7XG4gICAgICAgICAgICB2YXIgeG1sRG9jID0gdGhpcy5fZG9jKHhtbCksXG4gICAgICAgICAgICAgICAgeHNsRG9jID0gdGhpcy5fZG9jKHhzbCk7XG4gICAgICAgICAgICB2YXIgeHNsdFByb2Nlc3NvciA9IG5ldyBYU0xUUHJvY2Vzc29yKCk7XG4gICAgICAgICAgICB4c2x0UHJvY2Vzc29yLmltcG9ydFN0eWxlc2hlZXQoeHNsRG9jKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcGFyYW1zID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIF8uZWFjaChfLmtleXMocGFyYW1zKSwgZnVuY3Rpb24oa2V5KXtcbiAgICAgICAgICAgICAgICAgICAgeHNsdFByb2Nlc3Nvci5zZXRQYXJhbWV0ZXIobnVsbCxrZXkscGFyYW1zW2tleV0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFyIGRvYyA9IHhzbHRQcm9jZXNzb3IudHJhbnNmb3JtVG9Eb2N1bWVudCh4bWxEb2MpO1xuICAgICAgICAgICAgICAgIGlmIChuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSAhPSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAvLzx0cmFuc2Zvcm1paXg6cmVzdWx0Pi4uLjwvdHJhbnNmb3JtaWl4OnJlc3VsdD5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG1vZGUgPT09ICd0ZXh0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gZG9jLmRvY3VtZW50RWxlbWVudC50ZXh0Q29udGVudDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAobW9kZSA9PT0gJ3RleHQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBkb2MuZG9jdW1lbnRFbGVtZW50LnRleHRDb250ZW50O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0ID0gZG9jLmJvZHkuaW5uZXJIVE1MO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXJyb3IgaW4gWFNMVCB0cmFuc2Zvcm06ICcgKyBlLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFhNTDJIVE1MO1xufSk7XG4iLCIvKmdsb2JhbCBkZWZpbmUgKi9cbmRlZmluZSgnbW9kZWxzL2FwcCcsIFtcbiAgICAnanF1ZXJ5JyxcbiAgICAndW5kZXJzY29yZScsXG4gICAgJ2JhY2tib25lJyxcbiAgICAncm91dGVzL3JvdXRlcicsXG4gICAgJ21vZGVscy9pc3N1ZSdcbl0sIGZ1bmN0aW9uKCQsXyxCYWNrYm9uZSxSb3V0ZXIsSXNzdWVNb2RlbCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgQXBwTW9kZWwgPSBCYWNrYm9uZS5Nb2RlbC5leHRlbmQoe1xuICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbihvcHRzKSB7XG4gICAgICAgICAgICB2YXIgaXNzdWUgPSBuZXcgSXNzdWVNb2RlbCh7IGNvbmZpZzogb3B0cy5jb25maWcgfSk7XG4gICAgICAgICAgICBuZXcgUm91dGVyKHtcbiAgICAgICAgICAgICAgICAgIHJvdXRlczogb3B0cy5jb25maWcucGFnZXMucm91dGVzXG4gICAgICAgICAgICAgICAgLCBjb25maWc6IG9wdHMuY29uZmlnXG4gICAgICAgICAgICAgICAgLCBpc3N1ZTogIGlzc3VlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBBcHBNb2RlbDtcbn0pO1xuIiwiLypnbG9iYWwgZGVmaW5lICovXG5kZWZpbmUoJ21vZGVscy9hcnRpY2xlJywgW1xuICAgICAgJ2pxdWVyeSdcbiAgICAsICd1bmRlcnNjb3JlJ1xuICAgICwgJ2JhY2tib25lJ1xuICAgICwgJ21peGlucy9mZXRjaHhtbCdcbiAgICAsICdtaXhpbnMvYXN5bmNJbml0J1xuICAgICwgJ21peGlucy94bWwyaHRtbCdcbiAgICAsICd0ZXh0IXhzbC9nZW9qc29uLnhzbCdcbl0sIGZ1bmN0aW9uKCQsXyxCYWNrYm9uZSxGZXRjaFhNTCxBc3luY0luaXQsWE1MMkhUTUwsZ2VvSnNvblhzbCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgQXJ0aWNsZU1vZGVsID0gQmFja2JvbmUuTW9kZWwuZXh0ZW5kKHtcbiAgICAgICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICB0aGF0LiRkZWYgPSAkLkRlZmVycmVkKCk7XG4gICAgICAgICAgICB2YXIgJGdldCA9IHRoYXQuZmV0Y2hYTUwodGhhdC5nZXQoJ3BhdGgnKSk7XG4gICAgICAgICAgICAkLndoZW4oJGdldCkuZG9uZShmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgdGhhdC5zZXQoJ3htbCcsIGRhdGEpO1xuICAgICAgICAgICAgICAgIHRoYXQuX21rR2VvanNvbigpO1xuICAgICAgICAgICAgICAgIGlmICh0aGF0Lmdlb2pzb24gIT09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuc2V0KCdwbGFjZVR5cGUnLCB0aGF0Lmdlb2pzb24ucHJvcGVydGllcy5sYXllcik7XG4gICAgICAgICAgICAgICAgdGhhdC4kZGVmLnJlc29sdmUodGhhdCk7XG4gICAgICAgICAgICB9KS5mYWlsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoYXQuJGRlZi5yZWplY3QoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBkZWZhdWx0czoge1xuICAgICAgICAgICAgLy9UT0RPOiAneG1sJzogc2VyaWFsaXplPyBhbmQgY2FjaGUgdG8gbG9jYWxzdG9yYWdlXG4gICAgICAgICAgICAvLyBhZGQgYWRhcHRlciBmb3IgYWNjZXNzIHRocm91Z2ggLmF0dHJpYnV0ZXNcbiAgICAgICAgICAgICAgXCJ4bWxcIiAgICAgICA6IG51bGwgICAgLy8gRG9jdW1lbnRcbiAgICAgICAgICAgICwgXCJwbGFjZVR5cGVcIiA6IG51bGxcbiAgICAgICAgICAgICwgXCJpY29uVXJsXCIgICA6ICcnXG4gICAgICAgIH0sXG4gICAgICAgIHNlbGVjdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2FjdGl2ZScpO1xuICAgICAgICB9LFxuICAgICAgICB1bnNlbGVjdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2luYWN0aXZlJyk7XG4gICAgICAgIH0sXG4gICAgICAgIGdlb2pzb246IG51bGwsXG4gICAgICAgIGdldEdlb2pzb246IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZ2VvanNvbiA9PT0gbnVsbClcbiAgICAgICAgICAgICAgICB0aGlzLl9ta0dlb2pzb24oKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdlb2pzb247XG4gICAgICAgIH0sXG4gICAgICAgIF9ta0dlb2pzb246IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIganNvblN0cmluZyA9IHRoaXMueG1sMmh0bWwodGhpcy5nZXQoJ3htbCcpLCBnZW9Kc29uWHNsLCB7fSwgJ3RleHQnKTtcbiAgICAgICAgICAgICAgICB0aGlzLmdlb2pzb24gPSBKU09OLnBhcnNlKGpzb25TdHJpbmcpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBwYXJzZSB0byBqc29uOiBcIiArIGUudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBfLmV4dGVuZChBcnRpY2xlTW9kZWwucHJvdG90eXBlLEZldGNoWE1MKTtcbiAgICBfLmV4dGVuZChBcnRpY2xlTW9kZWwucHJvdG90eXBlLEFzeW5jSW5pdCk7XG4gICAgXy5leHRlbmQoQXJ0aWNsZU1vZGVsLnByb3RvdHlwZSxYTUwySFRNTCk7XG4gICAgcmV0dXJuIEFydGljbGVNb2RlbDtcbn0pO1xuIiwiLypnbG9iYWwgZGVmaW5lICovXG5kZWZpbmUoJ21vZGVscy9pc3N1ZScsIFtcbiAgICAgICdqcXVlcnknXG4gICAgLCAndW5kZXJzY29yZSdcbiAgICAsICdiYWNrYm9uZSdcbiAgICAsICdtb2RlbHMvYXJ0aWNsZSdcbiAgICAsICdjb2xsZWN0aW9ucy9hcnRpY2xlcydcbiAgICAsICdtaXhpbnMvYXN5bmNJbml0J1xuXSwgZnVuY3Rpb24oJCxfLEJhY2tib25lLEFydGljbGVNb2RlbCxBcnRpY2xlQ29sbGVjdGlvbixBc3luY0luaXQpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIElzc3VlTW9kZWwgPSBCYWNrYm9uZS5Nb2RlbC5leHRlbmQoe1xuICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCAgICA9IHRoaXM7XG4gICAgICAgICAgICB0aGF0LiRkZWYgICA9ICQuRGVmZXJyZWQoKTtcbiAgICAgICAgICAgIHZhciBhcnRkaXIgID0gYXJncy5jb25maWcuYXJ0aWNsZXMucGF0aEJhc2U7XG4gICAgICAgICAgICBpZiAoIWFydGRpci5tYXRjaCgvXFwvJC8pKSBhcnRkaXIgKz0gJy8nO1xuICAgICAgICAgICAgdmFyIGZpbGVzICAgPSBhcmdzLmNvbmZpZy5hcnRpY2xlcy5maWxlcztcbiAgICAgICAgICAgIHZhciBjb2wgICAgID0gbmV3IEFydGljbGVDb2xsZWN0aW9uKCk7XG4gICAgICAgICAgICB0aGF0LmNvbmZpZyA9IGFyZ3MuY29uZmlnO1xuICAgICAgICAgICAgdGhhdC5zZXQoJ2NvbGxlY3Rpb24nLCBjb2wpO1xuICAgICAgICAgICAgLy8gZml4IGxlbmd0aCBvZiBhcnRpY2xlcyBhcnJheVxuICAgICAgICAgICAgdmFyIGFydGljbGVzID0gXy5tYXAoXy5yYW5nZShmaWxlcy5sZW5ndGgpLCBmdW5jdGlvbigpe3JldHVybiB1bmRlZmluZWQ7fSk7XG4gICAgICAgICAgICAvLyBhcnRpY2xlcyBjb25zdHJ1Y3RlZCBzeW5jLCBzbyBhcnRpY2xlIG9iamVjdHMgYWRkZWQgdG8gbGlzdCBieSBpbmRleFxuICAgICAgICAgICAgXy5lYWNoKGZpbGVzLCBmdW5jdGlvbihmaWxlLGkpIHtcbiAgICAgICAgICAgICAgICBhcnRpY2xlc1tpXSA9IG5ldyBBcnRpY2xlTW9kZWwoe1xuICAgICAgICAgICAgICAgICAgICBhcnRpY2xlaWQ6ICBpLFxuICAgICAgICAgICAgICAgICAgICBhcnRpY2xlZGlyOiBhcnRkaXIsXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6ICAgICAgIGFydGRpciArIGZpbGVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIGluaXRzID0gXy5tYXAoYXJ0aWNsZXMsIGZ1bmN0aW9uKGFydGljbGUpe3JldHVybiBhcnRpY2xlLmluaXQoKTt9KTtcbiAgICAgICAgICAgIC8vIE5PVEU6IC5mYWlsKCkgaXMgbm90IGNhbGxlZDsgZmFpbHVyZSBpcyBoYW5kbGVkIGluIC5hbHdheXMoKVxuICAgICAgICAgICAgJC53aGVuKHt9LGluaXRzKS5mYWlsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoYXQuJGRlZi5yZWplY3QoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgJC53aGVuLmFwcGx5KG51bGwsaW5pdHMpLmRvbmUoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgY29sLmFkZChhcnRpY2xlcyk7XG4gICAgICAgICAgICAgICAgdGhhdC5vbignc2VsZWN0JywgZnVuY3Rpb24oYXJ0aWNsZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGF0Ll9zZWxlY3RBcnRpY2xlKGFydGljbGUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoYXQuJGRlZi5yZXNvbHZlKHRoYXQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAkLndoZW4uYXBwbHkobnVsbCxpbml0cykuYWx3YXlzKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF8uZm9yRWFjaChpbml0cywgZnVuY3Rpb24oJHByb21pc2Upe1xuICAgICAgICAgICAgICAgICAgICBpZiAoJHByb21pc2Uuc3RhdGUoKSA9PT0gJ3JlamVjdGVkJylcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuJGRlZi5yZWplY3QoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGF0LiRkZWYucmVzb2x2ZSh0aGF0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBkZWZhdWx0czoge1xuICAgICAgICAgICAgXCJhY3RpdmVBcnRpY2xlXCIgOiBudWxsXG4gICAgICAgIH0sXG4gICAgICAgIC8vIHNob3cgYW4gYXJ0aWNsZSBhbmQgdGhlIGNvcnJlc3BvbmRpbmcgcGluXG4gICAgICAgIC8vIGFydGljbGUgbWF5IGJlIGVpdGhlciBhbiBpbmRleCBpbnRvIHRoZSBjb2xsZWN0aW9uXG4gICAgICAgIC8vIChlLmcuLCB3aGVuIHByb3ZpZGVkIGJ5IGEgdXJsKSBvciBhbiBBcnRpY2xlTW9kZWxcbiAgICAgICAgLy8gKGUuZy4sIHdoZW4gc2VsZWN0ZWQgYnkgYSBtYXAgbWFya2VyKVxuICAgICAgICBfc2VsZWN0QXJ0aWNsZTogZnVuY3Rpb24oYXJ0aWNsZSkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIGNvbCA9IHRoYXQuZ2V0KCdjb2xsZWN0aW9uJyk7XG4gICAgICAgICAgICB2YXIgYXJ0O1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBhcnRpY2xlID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIGFydCA9IGFydGljbGU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcnRpY2xlID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgYXJ0aWNsZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBhcnQgPSBjb2wuYXQoYXJ0aWNsZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IFwiQmFkIGFyZ3VtZW50IHRvIG1vZGVscy9pc3N1ZVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gYXZvaWQgdW4tIGFuZCByZS1yZW5kZXJpbmcgYW4gYWxyZWFkeS12aWV3ZWQgYXJ0aWNsZVxuICAgICAgICAgICAgaWYgKCh0aGlzLmdldCgnYWN0aXZlQXJ0aWNsZScpICE9PSBudWxsKSAmJlxuICAgICAgICAgICAgICAgICh0aGlzLmdldCgnYWN0aXZlQXJ0aWNsZScpID09ICBhcnRpY2xlKSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmdldCgnYWN0aXZlQXJ0aWNsZScpKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdldCgnYWN0aXZlQXJ0aWNsZScpLnVuc2VsZWN0KCk7XG4gICAgICAgICAgICAgICAgdGhhdC5zZXQoJ2FjdGl2ZUFydGljbGUnLCBhcnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdGhpcyBpbnZvbHZlcyBhc3luYyBpbml0aWFsaXphdGlvblxuICAgICAgICAgICAgYXJ0LmluaXQoKS5kb25lKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoYXQudHJpZ2dlcigndXBkYXRlJywgYXJ0KTtcbiAgICAgICAgICAgICAgICBhcnQuc2VsZWN0KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIF8uZXh0ZW5kKElzc3VlTW9kZWwucHJvdG90eXBlLEFzeW5jSW5pdCk7XG4gICAgcmV0dXJuIElzc3VlTW9kZWw7XG59KTtcbiIsIi8qZ2xvYmFsIGRlZmluZSAqL1xuZGVmaW5lKCdtb2RlbHMvbWFwJywgW1xuICAgICAgJ2pxdWVyeSdcbiAgICAsICd1bmRlcnNjb3JlJ1xuICAgICwgJ2JhY2tib25lJ1xuICAgICwgJ2NvbGxlY3Rpb25zL21hcmtlcnMnXG4gICAgLCAnbW9kZWxzL21hcmtlcidcbiAgICAsICdtaXhpbnMvYXN5bmNJbml0J1xuXSwgZnVuY3Rpb24oJCxfLEJhY2tib25lLE1hcmtlcnNDb2xsZWN0aW9uLE1hcmtlck1vZGVsLEFzeW5jSW5pdCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgTWFwTW9kZWwgPSBCYWNrYm9uZS5Nb2RlbC5leHRlbmQoe1xuICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCAgID0gdGhpcztcbiAgICAgICAgICAgIHRoYXQuJGRlZiAgPSAkLkRlZmVycmVkKCk7XG4gICAgICAgICAgICB0aGF0Lmlzc3VlID0gYXJncy5pc3N1ZTtcbiAgICAgICAgICAgIHRoYXQuc2V0KCdzaXRlY29uZmlnJywgYXJncy5jb25maWcpO1xuICAgICAgICAgICAgaWYgKHRoYXQuaXNzdWUgPT09IHVuZGVmaW5lZCkgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIGlzc3VlIG1vZGVsIGluIG1hcCBtb2RlbCcpO1xuICAgICAgICAgICAgdGhhdC5zZXQoJ3JvdXRlcicsIGFyZ3Mucm91dGVyKTtcbiAgICAgICAgICAgIGlmICghYXJncy5yb3V0ZXIpIHRocm93IG5ldyBFcnJvcignTm8gcm91dGVyIGluIE1hcE1vZGVsJyk7XG4gICAgICAgICAgICB2YXIgJGNvbmZpZ0RlZiA9ICQuRGVmZXJyZWQoKTtcbiAgICAgICAgICAgICQuZ2V0SlNPTihhcmdzLmNvbmZpZy5tYXAuY29uZmlnLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgdGhhdC5zZXQoJ21hcGNvbmZpZycsIGRhdGEpO1xuICAgICAgICAgICAgICAgICRjb25maWdEZWYucmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSkuZmFpbChmdW5jdGlvbihqcXhociwgdGV4dFN0YXR1cywgZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAkY29uZmlnRGVmLnJlamVjdCgpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdGYWlsZWQgdG8gbG9hZCBtYXAgY29uZmlnIGZpbGU6ICcgKyBlcnJvcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICQud2hlbi5hcHBseSh7fSxbdGhhdC5pc3N1ZS5pbml0KCksICRjb25maWdEZWZdKS5kb25lKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoYXQuX21ha2VDb2xsZWN0aW9uKHRoYXQuaXNzdWUuZ2V0KCdjb2xsZWN0aW9uJykubW9kZWxzLCB7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCkgeyB0aGF0LiRkZWYucmVzb2x2ZSh0aGF0KTsgfSxcbiAgICAgICAgICAgICAgICAgICAgZmFpbDogICAgZnVuY3Rpb24oKSB7IHRoYXQuJGRlZi5yZWplY3QoKTsgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBUT0RPOiBpc3N1ZSBhcyB0byB3aGV0aGVyIGZhaWwoKS9hbHdheXMoKSBpcyBjYWxsZWQgb24gZmFpbHVyZSBoZXJlO1xuICAgICAgICAgICAgLy8gZmFpbCgpIHNob3VsZCBiZSBjYWxsZWQgb24gZmFsdXJlXG4gICAgICAgICAgICB9KS5mYWlsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoYXQuJGRlZi5yZWplY3QoKTtcbiAgICAgICAgICAgIH0pLmFsd2F5cyhmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHRoYXQuJGRlZi5yZWplY3QoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBkZWZhdWx0czoge1xuICAgICAgICAgICAgICBcIm1hcGNvbmZpZ1wiICAgICA6IHt9XG4gICAgICAgICAgICAsIFwic2l0ZWNvbmZpZ1wiICAgIDoge31cbiAgICAgICAgICAgICwgXCJpY29uVXJsc1wiICAgICAgOiB7fVxuICAgICAgICB9LFxuICAgICAgICBfbWFrZUNvbGxlY3Rpb24gOiBmdW5jdGlvbihhcnRpY2xlcyxjYnMpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIHZhciBjb2wgPSBuZXcgTWFya2Vyc0NvbGxlY3Rpb24oKTtcbiAgICAgICAgICAgIHRoYXQuc2V0KCdjb2xsZWN0aW9uJywgY29sKTtcbiAgICAgICAgICAgIHZhciBtYXJrZXJzID0gbmV3IEFycmF5KGFydGljbGVzLmxlbmd0aCk7XG4gICAgICAgICAgICB2YXIgZXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBlcnJvck1zZyA9ICcnO1xuICAgICAgICAgICAgdmFyIGljb25zID0gdGhhdC5nZXQoJ2ljb25VcmxzJyk7XG4gICAgICAgICAgICB2YXIgaWNjb25maWcgID0gdGhhdC5hdHRyaWJ1dGVzLnNpdGVjb25maWcubWFya2Vycy5pY29ucztcbiAgICAgICAgICAgIHZhciBpY29uRmlsZXMgPSBfLnNodWZmbGUoXy5mbGF0dGVuKFxuICAgICAgICAgICAgICAgIF8ubWFwKGljY29uZmlnLCBmdW5jdGlvbihlbnRyeSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXy5tYXAoZW50cnkuZmlsZXMsIGZ1bmN0aW9uKGZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbnRyeS5kaXIuY29uY2F0KGZpbGUpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICAvLyBkbyBtYXAgbWFya2VyIGljb24gaW5pdGlhbGl6YXRpb247IHRoaXMgc2VlbXMgbGlrZSBpdCBzaG91bGRcbiAgICAgICAgICAgIC8vIGJlIGlzb2xhdGVkIHRvIHRoZSBNYXBWaWV3IG9yIE1hcmtlclZpZXcsIGJ1dCBpcyBkYXRhIHVzZWRcbiAgICAgICAgICAgIC8vIGVsc2V3aGVyZSBpbiB0aGUgYXBwbGljYXRpb24sIHNvIHRoZXkgYXJlIGFzc2lnbmVkIGhlcmVcbiAgICAgICAgICAgIGFydGljbGVzLmZvckVhY2goZnVuY3Rpb24oYXJ0aWNsZSxpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGdlb2pzb24gPSAoYXJ0aWNsZS5nZXRHZW9qc29uKCkgfHwge1wicHJvcGVydGllc1wiOnt9fSk7XG4gICAgICAgICAgICAgICAgdmFyIGxheWVyID0gZ2VvanNvbi5wcm9wZXJ0aWVzLmxheWVyO1xuICAgICAgICAgICAgICAgIGljb25zW2xheWVyXSA9IGljb25zW2xheWVyXSB8fCBpY29uRmlsZXMucG9wKCk7XG4gICAgICAgICAgICAgICAgYXJ0aWNsZS5zZXQoJ2ljb25VcmwnLCBpY29uc1tsYXllcl0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBhcnRpY2xlcyBoYXZlIGNvbXBsZXRlZCBpbml0aWFsaXphdGlvbiBzaW5jZVxuICAgICAgICAgICAgLy8gdGhlIGlzc3VlIGhhcywgc29cbiAgICAgICAgICAgIGFydGljbGVzLmZvckVhY2goZnVuY3Rpb24oYXJ0aWNsZSxpKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1tO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIG1tID0gbmV3IE1hcmtlck1vZGVsKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaXNzdWUgICAgIDogdGhhdC5pc3N1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgLCBhcnRpY2xlICAgOiBhcnRpY2xlXG4gICAgICAgICAgICAgICAgICAgICAgICAsIGpzb24gICAgICA6IGFydGljbGUuZ2V0R2VvanNvbigpXG4gICAgICAgICAgICAgICAgICAgICAgICAsIHJvdXRlciAgICA6IHRoYXQucm91dGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAsIGljb25VcmwgICA6IGljb25zW2FydGljbGUuZ2V0KCdwbGFjZVR5cGUnKV1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgLy8gb24gZmFpbHVyZSB0byBjcmVhdGUgZ2VvanNvbiBmcm9tIGFydGljbGUsIHdhcm5cbiAgICAgICAgICAgICAgICAvLyBidXQgZG8gbm90IGJsb2NrIG1hcFxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBlcnJvck1zZyArPSAoXCJcXG5cIiArIGUudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG1hcmtlcnNbaV0gPSBtbTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY2JzLmZhaWwoKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNc2cpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29sLmFkZChtYXJrZXJzKTtcbiAgICAgICAgICAgIGNicy5zdWNjZXNzKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBfLmV4dGVuZChNYXBNb2RlbC5wcm90b3R5cGUsQXN5bmNJbml0KTtcbiAgICByZXR1cm4gTWFwTW9kZWw7XG59KTtcbiIsIi8qZ2xvYmFsIGRlZmluZSAqL1xuZGVmaW5lKCdtb2RlbHMvbWFya2VyJywgW1xuICAgICdqcXVlcnknLFxuICAgICd1bmRlcnNjb3JlJyxcbiAgICAnYmFja2JvbmUnXG5dLCBmdW5jdGlvbigkLF8sQmFja2JvbmUpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIE1hcmtlck1vZGVsID0gQmFja2JvbmUuTW9kZWwuZXh0ZW5kKHtcbiAgICAgICAgXCJhcnRpY2xlXCIgICA6IG51bGwsXG4gICAgICAgIFwianNvblwiICAgICAgOiB7fSxcbiAgICAgICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oYXJncykge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgdGhhdC5hcHAgPSBhcmdzLmFwcDtcbiAgICAgICAgICAgIHRoYXQuYXJ0aWNsZSA9IGFyZ3MuYXJ0aWNsZTtcbiAgICAgICAgICAgIHRoYXQucm91dGVyID0gYXJncy5yb3V0ZXI7XG4gICAgICAgICAgICBhcmdzLmlzc3VlLmluaXQoKS5kb25lKGZ1bmN0aW9uKGlzc3VlKSB7XG4gICAgICAgICAgICAgICAgLy8gd2hlbiBhbiBhcnRpY2xlIGlzIG1hZGUgYWN0aXZlIChlLmcuLCB0aHJvdWdoIHRoZVxuICAgICAgICAgICAgICAgIC8vIFRPQyksIHByb3BvZ2F0ZSB0aHJvdWdoIHRvIHRoZSBtYXAgcGFydCBvZiB0aGUgYXBwXG4gICAgICAgICAgICAgICAgdGhhdC5saXN0ZW5Ubyh0aGF0LmFydGljbGUsICdhY3RpdmUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC50cmlnZ2VyKCdhY3RpdmUnKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gTWFya2VyTW9kZWw7XG59KTtcbiIsIi8qZ2xvYmFsIGRlZmluZSAqL1xuZGVmaW5lKCdyb3V0ZXMvcm91dGVyJywgW1xuICAgICAgJ2pxdWVyeSdcbiAgICAsICd1bmRlcnNjb3JlJ1xuICAgICwgJ2JhY2tib25lJ1xuICAgICwgJ21vZGVscy9lcnJvci91c2VyJ1xuICAgICwgJ3ZpZXdzL2Vycm9yL3VzZXInXG4gICAgLCAndmlld3MvY2xlYXInXG4gICAgLCAndmlld3MvaXNzdWUnXG4gICAgLCAndmlld3MvbWFwJ1xuICAgICwgJ3ZpZXdzL21lbnUnXG5dLCBmdW5jdGlvbigkLF8sQmFja2JvbmUsVXNlckVycm9yTW9kZWwsVXNlckVycm9yVmlldyxDbGVhclZpZXcsSXNzdWVWaWV3LE1hcFZpZXcsTWVudVZpZXcpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIFJvdXRlciA9IEJhY2tib25lLlJvdXRlci5leHRlbmQoe1xuICAgICAgICBwYWdlcyAgIDoge30sICAgLy8gY29uZmlnIGZvciBzdXBwb3J0ZWQgcGFnZXNcbiAgICAgICAgY29uZmlnICA6IHt9LCAgIC8vIGdsb2JhbCBzaXRlIGNvbmZpZ3VyYXRpb24sIGkuZS4sIHNpdGUuanNvblxuICAgICAgICBpc3N1ZSAgIDogbnVsbCwgLy8gSXNzdWVNb2RlbCBmb3IgdGhpcyBhcHBcbiAgICAgICAgbWFwVmlldyA6IG51bGwsIC8vIE1hcFZpZXdcbiAgICAgICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24ob3B0cykge1xuICAgICAgICAgICAgdmFyIHRoYXQgICAgPSB0aGlzO1xuICAgICAgICAgICAgdGhpcy5jb25maWcgPSBvcHRzLmNvbmZpZztcbiAgICAgICAgICAgIHRoaXMucGFnZXMgID0gb3B0cy5jb25maWcucGFnZXM7XG4gICAgICAgICAgICB0aGlzLmlzc3VlICA9IG9wdHMuaXNzdWU7XG4gICAgICAgICAgICB0aGlzLmlzc3VlLmluaXQoKS5kb25lKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIC8vIHBhZ2VzLnJvdXRlci5oaXN0b3J5ID0gdHJ1ZSBieSBkZWZhdWx0LCBpZiBtaXNzaW5nXG4gICAgICAgICAgICAgICAgaWYgKF8uaGFzKHRoYXQucGFnZXMucm91dGVyLCdoaXN0b3J5JykgJiYgISF0aGF0LnBhZ2VzLnJvdXRlci5oaXN0b3J5KSB7XG4gICAgICAgICAgICAgICAgICAgIEJhY2tib25lLmhpc3Rvcnkuc3RhcnQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgbmF2aWdhdGU6IGZ1bmN0aW9uKGZyYWdtZW50LG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGlmIChCYWNrYm9uZS5oaXN0b3J5LmZyYWdtZW50ID09PSBmcmFnbWVudCkgcmV0dXJuO1xuICAgICAgICAgICAgQmFja2JvbmUuaGlzdG9yeS5uYXZpZ2F0ZShmcmFnbWVudCxvcHRpb25zKTtcbiAgICAgICAgfSxcbiAgICAgICAgcGFnZTogZnVuY3Rpb24ocGFnZSkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIHBhZ2VDb25maWc7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmICghcGFnZSkgcGFnZSA9IHRoaXMucGFnZXMuaG9tZTtcbiAgICAgICAgICAgICAgICBwYWdlQ29uZmlnID0gdGhpcy5wYWdlcy5wYWdlc1twYWdlXTtcbiAgICAgICAgICAgICAgICBpZiAocGFnZUNvbmZpZyA9PT0gdW5kZWZpbmVkKSB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgY29uZmlnIGluIHJvdXRlci9wYWdlJyk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFnZSgnNDA0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBjbGVhciB0aGUgPGJvZHk+XG4gICAgICAgICAgICAobmV3IENsZWFyVmlldygpKS5yZW5kZXIoKTtcbiAgICAgICAgICAgIF8uZWFjaChwYWdlQ29uZmlnLCBmdW5jdGlvbihwYykge1xuICAgICAgICAgICAgICAgIHZhciB2aWV3TmFtZTtcbiAgICAgICAgICAgICAgICB2YXIgYXJncyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICBjb25maWc6IHRoYXQuY29uZmlnXG4gICAgICAgICAgICAgICAgICAgICwgaXNzdWU6ICB0aGF0Lmlzc3VlXG4gICAgICAgICAgICAgICAgICAgICwgcm91dGVyOiB0aGF0XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAvLyBjbG9uZSBjb25maWcgdG8gYXZvaWQgZ2xvYmFsIGNoYW5nZXNcbiAgICAgICAgICAgICAgICB2YXIgY29uZmlnID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShwYykpO1xuICAgICAgICAgICAgICAgIGlmIChfLmhhcyhjb25maWcsICd2aWV3JykpIHtcbiAgICAgICAgICAgICAgICAgICAgdmlld05hbWUgPSBjb25maWcudmlldztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKF8uaGFzKGNvbmZpZywgJ3BhcnRpYWwnKSkge1xuICAgICAgICAgICAgICAgICAgICB2aWV3TmFtZSA9ICd2aWV3cy9wYXJ0aWFsJztcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLnBhcnRpYWwucGFnZSA9IHRoYXQucGFnZXMucGF0aEJhc2UgKyBjb25maWcucGFydGlhbC5wYWdlO1xuICAgICAgICAgICAgICAgICAgICBhcmdzID0gXy5leHRlbmQoYXJncyxjb25maWcucGFydGlhbCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChfLmhhcyhjb25mZywgJ2Z1bGwnKSkge1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGNvbmZpZy5mdWxsLnBhZ2U7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIHBhZ2UgdHlwZSBpbiByb3V0ZXI6ICcgKyBwYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVxdWlyZShbdmlld05hbWVdLCBmdW5jdGlvbihWaWV3KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2ID0gbmV3IFZpZXcoYXJncyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2aWV3TmFtZSA9PT0gJ3ZpZXdzL21hcCcpIHRoYXQubWFwVmlldyA9IHY7XG4gICAgICAgICAgICAgICAgICAgIHYucmVuZGVyKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgYXJ0aWNsZSA6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgYXJncyA9IHtcbiAgICAgICAgICAgICAgICAgIGNvbmZpZzogdGhhdC5jb25maWdcbiAgICAgICAgICAgICAgICAsIGlzc3VlOiAgdGhhdC5pc3N1ZVxuICAgICAgICAgICAgICAgICwgcm91dGVyOiB0aGF0XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKCQoJyN0aXRsZXBhZ2UnKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgJCgnI3RpdGxlcGFnZScpLnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCQoJyNpc3N1ZScpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHZhciBpc3YgPSBuZXcgSXNzdWVWaWV3KGFyZ3MpO1xuICAgICAgICAgICAgICAgIGlzdi5yZW5kZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgkKCcjbWFwJykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhhdC5tYXBWaWV3ID0gbmV3IE1hcFZpZXcoYXJncyk7XG4gICAgICAgICAgICAgICAgdGhhdC5tYXBWaWV3LnJlbmRlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCQoJyNtZW51JykuY2hpbGRyZW4oKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgbW52ID0gbmV3IE1lbnVWaWV3KGFyZ3MpO1xuICAgICAgICAgICAgICAgIG1udi5yZW5kZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHNlbGVjdCB0aGUgYXJ0aWNsZSBpbmRpY2F0ZWQgYnkgdGhlIHVybCdzIHJvdXRlIG9ubHkgYWZ0ZXJcbiAgICAgICAgICAgIC8vIHRoZSBtYXAgaGFzIGluaXRpYWxpemVkXG4gICAgICAgICAgICAkLndoZW4uYXBwbHkoe30sW3RoYXQubWFwVmlldy5pbml0KCldKS5kb25lKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoYXQuaXNzdWUudHJpZ2dlcignc2VsZWN0JywgaWQpO1xuICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBSb3V0ZXI7XG59KTtcbiIsIi8qZ2xvYmFsIGRlZmluZSAqL1xuZGVmaW5lKCd2aWV3cy9hcHAnLCBbXG4gICAgJ2pxdWVyeScsXG4gICAgJ3VuZGVyc2NvcmUnLFxuICAgICdiYWNrYm9uZSdcbl0sIGZ1bmN0aW9uKCQsXyxCYWNrYm9uZSkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgc2lnbmFsID0ge307XG4gICAgdmFyIEFwcFZpZXcgPSBCYWNrYm9uZS5WaWV3LmV4dGVuZCh7XG4gICAgICAgIGVsOiAnYm9keScsXG4gICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgJCh3aW5kb3cpLnJlc2l6ZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEFwcFZpZXc7XG59KTtcbiIsIi8qZ2xvYmFsIGRlZmluZSovXG5kZWZpbmUoJ3ZpZXdzL2FydGljbGUnLCBbXG4gICAgJ2pxdWVyeScsXG4gICAgJ3VuZGVyc2NvcmUnLFxuICAgICdiYWNrYm9uZScsXG4gICAgJ21peGlucy9kb213YXRjaGVyJyxcbiAgICAnbWl4aW5zL3htbDJodG1sJyxcbiAgICAndGV4dCF4c2wvYXJ0aWNsZS54c2wnLFxuICAgICd0ZXh0IXBhcnRpYWxzL2ltYWdlLXBvcG92ZXIuaHRtbCcsXG4gICAgJ3RleHQhcGFydGlhbHMvaW1hZ2UtcG9wb3Zlci1jb250ZW50Lmh0bWwnLFxuICAgICd0ZXh0IXBhcnRpYWxzL2xpZ2h0Ym94LXRpdGxlLmh0bWwnLFxuICAgICdzbGlkZXNqcycsXG4gICAgJ2xpZ2h0Ym94J1xuXSwgZnVuY3Rpb24oJCxfLEJhY2tib25lLERPTVdhdGNoZXIsWE1MMkhUTUwseHNsLHBvcG92ZXJUZW1wbCxwb3BvdmVyQ29udGVudFRlbXBsLGxpZ2h0Ym94VGl0bGVUZW1wbCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgQXJ0aWNsZVZpZXcgPSBCYWNrYm9uZS5WaWV3LmV4dGVuZCh7XG4gICAgICAgIGlkOiAnYXJ0aWNsZScsXG4gICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIHRoYXQuY29uZmlnID0gYXJncy5jb25maWc7XG4gICAgICAgIH0sXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgdGhhdC4kZWwgPSAkKCcjJyArIHRoYXQuaWQpO1xuICAgICAgICAgICAgaWYgKHRoYXQuJGVsLmZpbmQoJyMnICsgdGhhdC5tb2RlbC5jaWQpLmxlbmd0aCAhPT0gMClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB2YXIgaHRtbCA9IHRoaXMueG1sMmh0bWwoXG4gICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5nZXQoJ3htbCcpLFxuICAgICAgICAgICAgICAgIHhzbCwge1xuICAgICAgICAgICAgICAgICAgICAgIFwiYXJ0aWNsZS1kaXJcIjogdGhhdC5jb25maWcuYXJ0aWNsZXMucGF0aEJhc2VcbiAgICAgICAgICAgICAgICAgICAgLCBcImljb25VcmxcIiAgICA6IHRoYXQubW9kZWwuZ2V0KCdpY29uVXJsJylcbiAgICAgICAgICAgICAgICAgICAgLCBcImNpZFwiICAgICAgICA6IHRoYXQubW9kZWwuY2lkXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgJCgnLmFydGljbGUtY29udGVudCcpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICQoJyMnK3RoaXMuaWQpLmFwcGVuZChodG1sKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImFydGljbGUgbG9hZCBlcnJvcjogXCIgKyBlLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCAkKCdpbWcuc2xpZGVzanMtc2xpZGUnKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAkKCcjZm9vdGVyJykucmVtb3ZlKClcbiAgICAgICAgICAgICAgICAkKCdhcnRpY2xlJykucmVtb3ZlQ2xhc3MoJ2JlZm9yZS1mb290ZXInKS5hZGRDbGFzcygnbm8tZm9vdGVyJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQucG9zdHByb2Nlc3MoKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBoYW5kbGUgYXJ0aWNsZSBpbWFnZXNcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhhdC4kZWwuZmluZCgnLmFydGljbGUtbWFya2VyJykuY2xpY2soZnVuY3Rpb24oaSxlbHQpIHtcbiAgICAgICAgICAgICAgICB0aGF0Lm1vZGVsLnNlbGVjdCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdGhhdDtcbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbigpIHsgLyogcmV0YWluICovfSxcbiAgICAgICAgcG9zdHByb2Nlc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgLy8gYWRqdXN0IGhlaWdodCBvZiBhcnRpY2xlIGJvZHlcbiAgICAgICAgICAgIC8vIFRPRE86IGhhbmRsZSBpbiBjc3NcbiAgICAgICAgICAgIHZhciBoZWlnaHQgPSAkKCcjYXJ0aWNsZSBhcnRpY2xlJykuaGVpZ2h0KCkgLSAkKCcjaGVhZGVyJykub3V0ZXJIZWlnaHQodHJ1ZSk7XG4gICAgICAgICAgICAkKCcjYm9keScpLmNzcyh7aGVpZ2h0OmhlaWdodH0pO1xuICAgICAgICAgICAgLy8gYWRkIHBvcG92ZXJzIHRvIGltYWdlc1xuICAgICAgICAgICAgdmFyIHBjdCA9IF8udGVtcGxhdGUocG9wb3ZlckNvbnRlbnRUZW1wbCk7XG4gICAgICAgICAgICAkKCdpbWcuc2xpZGVzanMtc2xpZGUnKS5lYWNoKGZ1bmN0aW9uKGksZWx0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGlkID0gZWx0LmdldEF0dHJpYnV0ZSgnaWQnKTtcbiAgICAgICAgICAgICAgICB2YXIgJHBvID0gJCgnLnBvcG92ZXIuJyArIGlkKTtcbiAgICAgICAgICAgICAgICB2YXIgdGl0bGUgPSAkcG8uZmluZCgnLmhlYWQnKS50ZXh0KCk7XG4gICAgICAgICAgICAgICAgJChlbHQpLmF0dHIoJ2FsdCcsICRwby5maW5kKCcuZGVzYycpLnRleHQoKSk7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSBwY3Qoe1xuICAgICAgICAgICAgICAgICAgICBhdHRyOiAkcG8uZmluZCgnLmF0dHInKS50ZXh0KClcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAkKGVsdCkucG9wb3Zlcih7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogXCJib2R5XCIsXG4gICAgICAgICAgICAgICAgICAgIGh0bWwgOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBjb250ZW50LFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogdGl0bGUsXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiBwb3BvdmVyVGVtcGwsXG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXI6IFwiaG92ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50OiBcImxlZnRcIlxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICQoZWx0KS5jbGljayhmdW5jdGlvbihldnQpIHtcbiAgICAgICAgICAgICAgICAgICAgJChlbHQpLnBvcG92ZXIoJ2hpZGUnKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gcmVtb3ZlIGltYWdlcyB0aGF0IGZhaWwgdG8gbG9hZCwgc2luY2Ugd2UgY2Fubm90IGRvXG4gICAgICAgICAgICAvLyBhIGZpbGUgdGVzdCB3aGVuIHJ1bm5pbmcgdGhlIHhzbFxuICAgICAgICAgICAgdmFyIGRlZnMgPSBbXTtcbiAgICAgICAgICAgIHRoYXQuJGVsLmZpbmQoJ2ltZy5zbGlkZXNqcy1zbGlkZScpLmVhY2goZnVuY3Rpb24oaSxpbWcpe1xuICAgICAgICAgICAgICAgIHZhciAkZGVmID0gJC5EZWZlcnJlZCgpO1xuICAgICAgICAgICAgICAgICQoaW1nKS5sb2FkKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICQoaW1nKS5yZW1vdmVDbGFzcygncmVtb3ZlJyk7XG4gICAgICAgICAgICAgICAgICAgICRkZWYucmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICQoaW1nKS5lcnJvcihmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAvLyBhbGxvdyBzb21lIHRpbWUgYmVmb3JlIGZhaWx1cmVcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICRkZWYucmVqZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgIH0sNTAwKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBkZWZzLnB1c2goJGRlZik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICQud2hlbi5hcHBseSh7fSxkZWZzKS5hbHdheXMoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAkKCdpbWcuc2xpZGVzanMtc2xpZGUucmVtb3ZlJykucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgJCgnLmltYWdlLWxvYWRpbmcnKS5yZW1vdmVDbGFzcygnaW1hZ2UtbG9hZGluZycpO1xuICAgICAgICAgICAgICAgIC8vIGNvbmZpZ3VyZSBzbGlkZXNqczsgdXAgdG8gbm93LCAnZGlzcGxheTpub25lJ1xuICAgICAgICAgICAgICAgIC8vIGhhcyBhcHBsaWVkXG4gICAgICAgICAgICAgICAgJChcIiNzbGlkZXNcIikuc2xpZGVzanMoe1xuICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmU6ICgkKCdpbWcuc2xpZGVzanMtc2xpZGUnKS5sZW5ndGggPiAxKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVmZmVjdDogXCJmYWRlXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlOiAoJCgnaW1nLnNsaWRlc2pzLXNsaWRlJykubGVuZ3RoID4gMSksXG4gICAgICAgICAgICAgICAgICAgICAgICBlZmZlY3Q6IFwiZmFkZVwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGVmZmVjdDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmFkZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzcGVlZDogMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjcm9zc2ZhZGU6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhbGxlZCBvbiBsb2FkIG9mIGZpcnN0IHBpY1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9hZGVkOiBmdW5jdGlvbihudW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGltZyA9ICQoXCIuc2xpZGVzanMtY29udHJvbFwiKS5jaGlsZHJlbignOmVxKCcrIChudW1iZXIgLSAxKSArICcpJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGltZy5jc3Moe3Zpc2liaWxpdHk6IFwiaGlkZGVuXCJ9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaW1nLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAnYXV0bydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCB3aWR0aDogICdhdXRvJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIG1heEhlaWdodDogJChcIi5zbGlkZXNqcy1jb250YWluZXJcIikuaGVpZ2h0KClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBtYXhXaWR0aDogICQoXCIuc2xpZGVzanMtY29udGFpbmVyXCIpLndpZHRoKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBwb3NpdGlvbjogIFwicmVsYXRpdmVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsZWZ0ID0gKCQoXCIuc2xpZGVzanMtY29udGFpbmVyXCIpLndpZHRoKCkgLSAkaW1nLndpZHRoKCkpLzI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCAtPSBwYXJzZUludCgkaW1nLmNzcygncGFkZGluZy1sZWZ0JyksIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaW1nLmNzcyh7IGxlZnQ6IGxlZnQgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGltZy5jc3MoeyB2aXNpYmlsaXR5OiBcInZpc2libGVcIiB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjYWxsZWQgc3RhcnQgb2YgY2hhbmdlIG9mIHBpYyAoYWZ0ZXIgZmlyc3QpXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogZnVuY3Rpb24obnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJChcIi5zbGlkZXNqcy1jb250cm9sXCIpLmNoaWxkcmVuKCkuY3NzKHt2aXNpYmlsaXR5OiBcImhpZGRlblwifSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FsbGVkIGVuZCBvZiBjaGFuZ2Ugb2YgcGljIChhZnRlciBmaXJzdClcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbihudW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3SW1nID0gbnVtYmVyIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGltZyA9ICQoXCIuc2xpZGVzanMtY29udHJvbFwiKS5jaGlsZHJlbignOmVxKCcrIG5ld0ltZyArICcpJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGltZy5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogJ2F1dG8nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgd2lkdGg6ICAnYXV0bydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCBtYXhIZWlnaHQ6ICQoXCIuc2xpZGVzanMtY29udGFpbmVyXCIpLmhlaWdodCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgbWF4V2lkdGg6ICAkKFwiLnNsaWRlc2pzLWNvbnRhaW5lclwiKS53aWR0aCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgcG9zaXRpb246ICBcInJlbGF0aXZlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaW1nLmNzcyh7IHZpc2liaWxpdHk6IFwidmlzaWJsZVwiIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICQoJy5nYWxsZXJ5LWl0ZW0nKS5tYWduaWZpY1BvcHVwKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnaW1hZ2UnLFxuICAgICAgICAgICAgICAgIGdhbGxlcnk6e1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBpbWFnZToge1xuICAgICAgICAgICAgICAgICAgICB0aXRsZVNyYzogZnVuY3Rpb24oJGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpZCA9ICRpdGVtLmVsLmF0dHIoJ2lkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgJHBvID0gJCgnLnBvcG92ZXIuJyArIGlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwY3QgPSBfLnRlbXBsYXRlKGxpZ2h0Ym94VGl0bGVUZW1wbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29udGVudCA9IHBjdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICRwby5maW5kKCcuaGVhZCcpLnRleHQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyOiAkcG8uZmluZCgnLmF0dHInKS50ZXh0KClcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICQoJy5nbHlwaGljb24uZ2x5cGhpY29uLWV4cGFuZCcpLm9uKCdjbGljaycsIGZ1bmN0aW9uKGV2dCl7XG4gICAgICAgICAgICAgICAgJCgnLmdhbGxlcnktaXRlbScpLm1hZ25pZmljUG9wdXAoJ29wZW4nKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHRoYXQ7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBfLmV4dGVuZChBcnRpY2xlVmlldy5wcm90b3R5cGUsRE9NV2F0Y2hlcik7XG4gICAgXy5leHRlbmQoQXJ0aWNsZVZpZXcucHJvdG90eXBlLFhNTDJIVE1MKTtcbiAgICByZXR1cm4gQXJ0aWNsZVZpZXc7XG59KTtcbiIsIi8qZ2xvYmFsIGRlZmluZSovXG5kZWZpbmUoJ3ZpZXdzL2NsZWFyJywgW1xuICAgICdqcXVlcnknLFxuICAgICd1bmRlcnNjb3JlJyxcbiAgICAnYmFja2JvbmUnXG5dLCBmdW5jdGlvbigkLF8sQmFja2JvbmUsdG1wbCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgQ2xlYXJWaWV3ID0gQmFja2JvbmUuVmlldy5leHRlbmQoe1xuICAgICAgICBlbDogJ2JvZHknLFxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJCgnYm9keScpLmVtcHR5KCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQ2xlYXJWaWV3O1xufSk7XG4iLCIvKmdsb2JhbCBkZWZpbmUqL1xuZGVmaW5lKCd2aWV3cy9pc3N1ZScsIFtcbiAgICAgICdqcXVlcnknXG4gICAgLCAndW5kZXJzY29yZSdcbiAgICAsICdiYWNrYm9uZSdcbiAgICAsICd0ZXh0IXBhcnRpYWxzL2lzc3VlLmh0bWwnXG4gICAgLCAndmlld3MvYXJ0aWNsZSdcbl0sIGZ1bmN0aW9uKCQsXyxCYWNrYm9uZSx0bXBsLEFydGljbGVWaWV3KSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBJc3N1ZVZpZXcgPSBCYWNrYm9uZS5WaWV3LmV4dGVuZCh7XG4gICAgICAgIGVsOiAgICAgICAgICcjaXNzdWUnLFxuICAgICAgICB0ZW1wbGF0ZTogICBfLnRlbXBsYXRlKHRtcGwpLFxuICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICB0aGF0Lm1vZGVsID0gYXJncy5pc3N1ZTtcbiAgICAgICAgICAgIHRoYXQubW9kZWwub24oJ3VwZGF0ZScsIGZ1bmN0aW9uKGFydGljbGUpIHtcbiAgICAgICAgICAgICAgICB0aGF0LnNlbGVjdChhcnRpY2xlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuJGVsLnJlbW92ZSgpO1xuICAgICAgICAgICAgJCgnYm9keScpLmFwcGVuZCh0bXBsKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2VsZWN0OiBmdW5jdGlvbihhcnRpY2xlKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgYXYgPSBuZXcgQXJ0aWNsZVZpZXcoe1xuICAgICAgICAgICAgICAgICAgbW9kZWw6ICBhcnRpY2xlXG4gICAgICAgICAgICAgICAgLCBjb25maWc6IHRoYXQubW9kZWwuY29uZmlnXG4gICAgICAgICAgICAgICAgLCBpc3N1ZTogIHRoYXRcbiAgICAgICAgICAgICAgICAsIHJvdXRlcjogdGhhdC5tb2RlbC5yb3V0ZXJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYXJ0aWNsZS5vbignYWN0aXZlJywgICBhdi5yZW5kZXIsIGF2KTtcbiAgICAgICAgICAgIGFydGljbGUub24oJ2luYWN0aXZlJywgYXYucmVtb3ZlLCBhdik7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gSXNzdWVWaWV3O1xufSk7XG4iLCIvKmdsb2JhbCBkZWZpbmUqL1xuZGVmaW5lKCd2aWV3cy9tYXAnLCBbXG4gICAgICAnanF1ZXJ5J1xuICAgICwgJ3VuZGVyc2NvcmUnXG4gICAgLCAnYmFja2JvbmUnXG4gICAgLCAnbGVhZmxldCdcbiAgICAsICd0ZXh0IXBhcnRpYWxzL21hcC5odG1sJ1xuICAgICwgJ3RleHQhcGFydGlhbHMvbWFya2VyLWxlZ2VuZC5odG1sJ1xuICAgICwgJ21vZGVscy9tYXAnXG4gICAgLCAndmlld3MvbWFya2VyJ1xuICAgICwgJ21peGlucy9hc3luY0luaXQnXG5dLCBmdW5jdGlvbigkLF8sQmFja2JvbmUsTCxtYXBQYXJ0aWFsLGxlZ2VuZFBhcnRpYWwsTWFwTW9kZWwsTWFya2VyVmlldyxBc3luY0luaXQpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIE1hcFZpZXcgPSBCYWNrYm9uZS5WaWV3LmV4dGVuZCh7XG4gICAgICAgIGlkOiAgICAgICdtYXAnLFxuICAgICAgICB0YWdOYW1lOiAnZGl2JyxcbiAgICAgICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oYXJncykge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgdGhhdC4kZGVmID0gJC5EZWZlcnJlZCgpO1xuICAgICAgICAgICAgdGhhdC5jb25maWcgPSBhcmdzLmNvbmZpZztcbiAgICAgICAgICAgIHRoYXQubW9kZWwgPSBuZXcgTWFwTW9kZWwoYXJncyk7XG4gICAgICAgICAgICB0aGF0LnJvdXRlciA9IGFyZ3Mucm91dGVyO1xuICAgICAgICB9XG4gICAgICAgICwgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICBpZiAoJCgnIycgKyB0aGF0LmlkKS5jaGlsZHJlbigpLmxlbmd0aCA+IDApIHJldHVybjtcbiAgICAgICAgICAgIC8vIHB1dCBkaXYjbWFwIGluIHBsYWNlXG4gICAgICAgICAgICAvLyBub3RlOiBtYXAuanNvbiBoYXMgdGhlIEBpZCB2YWx1ZToge1wiaWRcIiA6IFwibWFwXCJ9XG4gICAgICAgICAgICAkKCdib2R5JykuYXBwZW5kKG1hcFBhcnRpYWwpO1xuICAgICAgICAgICAgLy8gTGVhZmxldCBjb25maWdcbiAgICAgICAgICAgIHRoaXMubW9kZWwuaW5pdCgpLmRvbmUoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbCAgICAgICA9IHRoYXQubW9kZWwuZ2V0KCdjb2xsZWN0aW9uJyk7XG4gICAgICAgICAgICAgICAgdmFyIG1hcGNvbmZpZyA9IHRoYXQubW9kZWwuZ2V0KCdtYXBjb25maWcnKTtcbiAgICAgICAgICAgICAgICB2YXIgbWFwICAgICAgID0gbmV3IEwuTWFwKG1hcGNvbmZpZy5pZCwgbWFwY29uZmlnLm1hcCk7XG4gICAgICAgICAgICAgICAgdmFyIGxlZ2VuZFRlbXBsID0gXy50ZW1wbGF0ZShsZWdlbmRQYXJ0aWFsKTtcbiAgICAgICAgICAgICAgICB2YXIgb3BlbnBvcHVwID0ge307XG4gICAgICAgICAgICAgICAgdmFyIGxheWVyTWFya2VycyA9IHt9O1xuICAgICAgICAgICAgICAgIHZhciBsYXllckdyb3VwcyA9IHt9O1xuICAgICAgICAgICAgICAgIHZhciBwb3B1cGlkID0gZnVuY3Rpb24obGF0bG5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBsYXRsbmcubGF0LnRvU3RyaW5nKClcbiAgICAgICAgICAgICAgICAgICAgICAgICArIGxhdGxuZy5sbmcudG9TdHJpbmcoKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGhhdC5jb25maWd1cmVNYXAobWFwLG1hcGNvbmZpZyxvcGVucG9wdXAscG9wdXBpZCxjb2wubW9kZWxzKTtcbiAgICAgICAgICAgICAgICAvLyBkbyBwZXItbWFya2VyIG1hcCBjb25maWd1cmF0aW9uXG4gICAgICAgICAgICAgICAgY29sLmZvckVhY2goZnVuY3Rpb24obWFya2VyTW9kZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGdlb2pzb24gPSAobWFya2VyTW9kZWwuZ2V0KCdqc29uJykgfHwge1wicHJvcGVydGllc1wiOnt9fSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsYXllciA9IGdlb2pzb24ucHJvcGVydGllcy5sYXllcjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGljb25Db25maWcgPSBtYXBjb25maWcuZmVhdHVyZXMuaWNvbjtcbiAgICAgICAgICAgICAgICAgICAgaWNvbkNvbmZpZy5pY29uVXJsID0gKG1hcmtlck1vZGVsLmdldCgnaWNvblVybCcpIHx8ICcnKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGljb24gPSBMLmljb24oaWNvbkNvbmZpZyk7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuYWRkTWFya2VyVG9MYXllcihtYXJrZXJNb2RlbCxtYXAsb3BlbnBvcHVwLHBvcHVwaWQsbWFwY29uZmlnLGxheWVyTWFya2VycyxpY29uLGljb25Db25maWcuaWNvblVybCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgLy8gYWRkIG1hcmtlciBsYXllcnNcbiAgICAgICAgICAgICAgICBfLmVhY2goXy5rZXlzKGxheWVyTWFya2VycyksIGZ1bmN0aW9uKGxheWVyTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGF5ZXJMZWdlbmQgPSBsZWdlbmRUZW1wbCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGljb25Vcmw6IHRoYXQubW9kZWwuZ2V0KCdpY29uVXJscycpW2xheWVyTmFtZV1cbiAgICAgICAgICAgICAgICAgICAgICAgICwgdGl0bGUgIDogbGF5ZXJOYW1lXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBsYXllckdyb3Vwc1tsYXllckxlZ2VuZF0gPSBMLmxheWVyR3JvdXAobGF5ZXJNYXJrZXJzW2xheWVyTmFtZV0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIEwuY29udHJvbC5sYXllcnMobnVsbCwgbGF5ZXJHcm91cHMsIG1hcGNvbmZpZy5jb250cm9sLmxheWVycy5vcHRpb25zKS5hZGRUbyhtYXApO1xuICAgICAgICAgICAgICAgIC8vIGVuYWJsZSBlYWNoIGxheWVyOyBUT0RPOiBkZXRlcm1pbmUgaWYgdGhpcyBpcyBjb25maWd1cmFibGVcbiAgICAgICAgICAgICAgICAkKCdpbnB1dC5sZWFmbGV0LWNvbnRyb2wtbGF5ZXJzLXNlbGVjdG9yJykuZWFjaChmdW5jdGlvbihpLGVsdCl7XG4gICAgICAgICAgICAgICAgICAgJChlbHQpLmNsaWNrKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhhdC4kZGVmLnJlc29sdmUodGhhdCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAsIGNvbmZpZ3VyZU1hcCA6IGZ1bmN0aW9uKG1hcCxtYXBjb25maWcsb3BlbnBvcHVwLHBvcHVwaWQsbWFya2Vycykge1xuICAgICAgICAgICAgdmFyIHRoYXQsIHRpbGVsYXllciwgc2NhbGUsIGJvdW5kcywgZWRnZVB0WDtcbiAgICAgICAgICAgIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgdGlsZWxheWVyID0gbmV3IEwuVGlsZUxheWVyKG1hcGNvbmZpZy50aWxlTGF5ZXIudXJsLCBtYXBjb25maWcudGlsZUxheWVyLm9wdHMpO1xuICAgICAgICAgICAgc2NhbGUgPSBMLmNvbnRyb2wuc2NhbGUobWFwY29uZmlnLnNjYWxlKTtcbiAgICAgICAgICAgIG1hcC5hZGRMYXllcih0aWxlbGF5ZXIpO1xuICAgICAgICAgICAgc2NhbGUuYWRkVG8obWFwKTtcbiAgICAgICAgICAgIGVkZ2VQdFggPSBMLkRvbVV0aWwuZ2V0Vmlld3BvcnRPZmZzZXQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FydGljbGUnKSkueDtcbiAgICAgICAgICAgIGJvdW5kcyA9IEwubGF0TG5nQm91bmRzKF8ubWFwKG1hcmtlcnMsZnVuY3Rpb24obWFya2VyKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxuZ0xhdCA9IG1hcmtlci5nZXQoJ2pzb24nKS5nZW9tZXRyeS5jb29yZGluYXRlcy5zbGljZSgwKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gTC5sYXRMbmcobG5nTGF0LnJldmVyc2UoKSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBpZiAoZWRnZVB0WCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIG1hcC5maXRCb3VuZHMoYm91bmRzKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZWRnZVB0WCAhPSBtYXAuZ2V0U2l6ZSgpLngpIHtcbiAgICAgICAgICAgICAgICAvLyBtYXAgdW5kZXJuZWF0aCBhcnRpY2xlXG4gICAgICAgICAgICAgICAgbWFwLmZpdEJvdW5kcyhib3VuZHMsIHtcbiAgICAgICAgICAgICAgICAgICAgJ3BhZGRpbmdCb3R0b21SaWdodCcgOiBbZG9jdW1lbnQuYm9keS5jbGllbnRXaWR0aCAtIGVkZ2VQdFgsMF1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gbWFwIGJlc2lkZSBhcnRpY2xlXG4gICAgICAgICAgICAgICAgbWFwLmZpdEJvdW5kcyhib3VuZHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWFwLmludmFsaWRhdGVTaXplKCk7XG4gICAgICAgICAgICAvLyB0cmFjayB0aGUgY3VycmVudGx5IG9wZW4gcG9wdXBcbiAgICAgICAgICAgIG1hcC5vbigncG9wdXBvcGVuJywgZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgICAgICAgICAgdmFyIHBvcHVwID0gZXZ0LnBvcHVwO1xuICAgICAgICAgICAgICAgIHZhciBwb3B1cExhdExuZyA9IHBvcHVwLmdldExhdExuZygpO1xuICAgICAgICAgICAgICAgIHRoYXQuaGFuZGxlUG9wdXBQb3NpdGlvbihtYXAscG9wdXApO1xuICAgICAgICAgICAgICAgIC8vIGV2ZW50IGxhdGVuY3kgYmV0d2VlbiBsZWFmbGV0IGFuZCBiYWNrYm9uZSBhcHBlYXJzIHRvIGNhdXNlIHBvcHVwcyB0byBjb2xsYXBzZVxuICAgICAgICAgICAgICAgIC8vIGVycmF0aWNhbGx5IGluIEZpcmVmb3ggd2hlbiBjbGlja2luZyBtYXAgcGluc1xuICAgICAgICAgICAgICAgIGlmIChuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSAhPSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBvcGVucG9wdXBbcG9wdXBpZChwb3B1cExhdExuZyldID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBvcGVucG9wdXBbcG9wdXBpZChwb3B1cExhdExuZyldID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG1hcC5vbigncG9wdXBjbG9zZScsIGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICAgICAgICAgIGlmIChuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSAhPSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBvcGVucG9wdXBbcG9wdXBpZChldnQucG9wdXAuZ2V0TGF0TG5nKCkpXSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG9wZW5wb3B1cFtwb3B1cGlkKGV2dC5wb3B1cC5nZXRMYXRMbmcoKSldID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLCBoYW5kbGVQb3B1cFBvc2l0aW9uIDogZnVuY3Rpb24obWFwLHBvcHVwKSB7XG4gICAgICAgICAgICB2YXIgZWRnZVB0WCwgJHBvcHVwV3JhcCwgcG9wdXBMYXRMbmcsIHBvcHVwUmlnaHRYLCBwYWQ7XG4gICAgICAgICAgICBwb3B1cExhdExuZyA9IHBvcHVwLmdldExhdExuZygpO1xuICAgICAgICAgICAgaWYgKHBvcHVwTGF0TG5nID09PSB1bmRlZmluZWQpIHJldHVybjtcbiAgICAgICAgICAgIGVkZ2VQdFggPSBMLkRvbVV0aWwuZ2V0Vmlld3BvcnRPZmZzZXQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FydGljbGUnKSkueDtcbiAgICAgICAgICAgIC8vIG1hcCBzaG91bGQgcGFuIHJpZ2h0L2Vhc3QgaWYgdGhlIHBvcHVwIGJhbGxvb24gaXMgY292ZXJlZCBieSB0aGUgYXJ0aWNsZTtcbiAgICAgICAgICAgIC8vIHBhZCBpcyBhIHNsaWdodCByZWxpZWYgYmV0d2VlbiB0aGUgcG9wdXAgYW5kIHRoZSBhcnRpY2xlXG4gICAgICAgICAgICAkcG9wdXBXcmFwID0gJChwb3B1cC5nZXRDb250ZW50KCkpLmNsb3Nlc3QoJy5sZWFmbGV0LXBvcHVwLWNvbnRlbnQtd3JhcHBlcicpLmZpcnN0KCk7XG4gICAgICAgICAgICBwYWQgPSBMLnBvaW50KHBvcHVwLm9wdGlvbnMuYXV0b1BhblBhZGRpbmdCb3R0b21SaWdodCB8fCBwb3B1cC5vcHRpb25zLmF1dG9QYW5QYWRkaW5nKTtcbiAgICAgICAgICAgIHBhZCA9IHBhZCA/IHBhZC54IDogMDtcbiAgICAgICAgICAgIHBvcHVwUmlnaHRYID0gJHBvcHVwV3JhcC5vZmZzZXQoKS5sZWZ0ICsgJHBvcHVwV3JhcC53aWR0aCgpICsgcGFkO1xuICAgICAgICAgICAgaWYgKGVkZ2VQdFggIT0gMCAmJiBwb3B1cFJpZ2h0WCA+IGVkZ2VQdFggJiYgZWRnZVB0WCAhPSBtYXAuZ2V0U2l6ZSgpLngpXG4gICAgICAgICAgICAgICAgbWFwLnBhbkJ5KFtwb3B1cFJpZ2h0WCAtIGVkZ2VQdFgsMF0pO1xuICAgICAgICB9XG4gICAgICAgICwgYWRkTWFya2VyVG9MYXllcjogZnVuY3Rpb24obWFya2VyTW9kZWwsbWFwLG9wZW5wb3B1cCxwb3B1cGlkLG1hcGNvbmZpZyxsYXllck1hcmtlcnMsaWNvbixpY29uVXJsKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCAgICAgICAgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIGdlb2pzb24gICAgID0gbWFya2VyTW9kZWwuZ2V0KCdqc29uJyk7XG4gICAgICAgICAgICB2YXIgbWFya2VyVmlldyAgPSBuZXcgTWFya2VyVmlldyh7XG4gICAgICAgICAgICAgICAgICBtb2RlbCAgICAgOiBtYXJrZXJNb2RlbFxuICAgICAgICAgICAgICAgICwgcm91dGVyICAgIDogdGhhdC5yb3V0ZXJcbiAgICAgICAgICAgICAgICAsIGljb25VcmwgICA6IGljb25VcmxcbiAgICAgICAgICAgICAgICAsIGljb25UaXRsZSA6IGdlb2pzb24ucHJvcGVydGllcy5sYXllclxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBtYXJrZXJWaWV3Lm9uKCdhY3RpdmUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0aGF0LmhhbmRsZVBvcHVwUG9zaXRpb24obWFwLG1hcmtlclZpZXcucG9wdXApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBtYXJrZXJWaWV3LnJlbmRlcigpO1xuICAgICAgICAgICAgTC5nZW9Kc29uKGdlb2pzb24sIHtcbiAgICAgICAgICAgICAgICAvLyBmZWF0dXJlIGlzIHRoZSBnZW9qc29uLCBhIHJhdyBKUyBvYmplY3RcbiAgICAgICAgICAgICAgICAvLyBtYXBNYXJrZXIgaXNcbiAgICAgICAgICAgICAgICBvbkVhY2hGZWF0dXJlOiBmdW5jdGlvbiAoZmVhdHVyZSwgbWFwTWFya2VyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGFkZCB0aGUgcG9wdXAgdG8gdGhpcyBtYXJrZXJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvcHVwID0gTC5wb3B1cChtYXBjb25maWcuZmVhdHVyZXMucG9wdXApO1xuICAgICAgICAgICAgICAgICAgICBtYXJrZXJWaWV3LnBvcHVwID0gcG9wdXA7XG4gICAgICAgICAgICAgICAgICAgIHBvcHVwLnNldENvbnRlbnQobWFya2VyVmlldy5lbCk7XG4gICAgICAgICAgICAgICAgICAgIG1hcE1hcmtlci5iaW5kUG9wdXAocG9wdXApO1xuICAgICAgICAgICAgICAgICAgICAvLyBvdmVycmlkZSB0aGUgZGVmYXVsdCBjbGljayBoYW5kbGVyIGZvciB0aGVcbiAgICAgICAgICAgICAgICAgICAgLy8gbWFya2VyLCB3aGljaCB3b3VsZCBjbG9zZSB0aGUgcG9wdXAgaWYgaXRcbiAgICAgICAgICAgICAgICAgICAgLy8gd2VyZSBhbHJlYWR5IG9wZW5cbiAgICAgICAgICAgICAgICAgICAgbWFwTWFya2VyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJyk7XG4gICAgICAgICAgICAgICAgICAgIG1hcE1hcmtlci5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlck1vZGVsLnRyaWdnZXIoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgbWFwTWFya2VyLm9uKCdtb3VzZW92ZXInLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGF0LmNvbmZpZy5tYXAuaG92ZXJQb3B1cCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wZW5wb3B1cFtwb3B1cGlkKG1hcE1hcmtlci5nZXRMYXRMbmcoKSldKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXBNYXJrZXIub3BlblBvcHVwKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAvLyBhcHBsaWNhdGlvbiBvYmplY3QsIG5vdCBsZWFmbGV0anNcbiAgICAgICAgICAgICAgICAgICAgbWFya2VyTW9kZWwub24oJ2FjdGl2ZScsIGZ1bmN0aW9uKGFydGlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3BlbnBvcHVwW3BvcHVwaWQobWFwTWFya2VyLmdldExhdExuZygpKV0pIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcE1hcmtlci5vcGVuUG9wdXAoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIG9wZW5wb3B1cFtwb3B1cGlkKG1hcE1hcmtlci5nZXRMYXRMbmcoKSldID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIC8vIGFkZCBtYXBtYXJrZXIgdG8gbGF5ZXIgYnkgbGF5ZXIgdHlwZVxuICAgICAgICAgICAgICAgICAgICBpZiAoXy5oYXMobGF5ZXJNYXJrZXJzLCBnZW9qc29uLnByb3BlcnRpZXMubGF5ZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllck1hcmtlcnNbZ2VvanNvbi5wcm9wZXJ0aWVzLmxheWVyXS5wdXNoKG1hcE1hcmtlcik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllck1hcmtlcnNbZ2VvanNvbi5wcm9wZXJ0aWVzLmxheWVyXSA9IFttYXBNYXJrZXJdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBwb2ludFRvTGF5ZXI6IGZ1bmN0aW9uIChmZWF0dXJlLCBsYXRsbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEwubWFya2VyKGxhdGxuZywge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogICAgICAgIGljb24sXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGlja2FibGU6ICAgISFmZWF0dXJlLnByb3BlcnRpZXMudGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAgICAgICAoZmVhdHVyZS5wcm9wZXJ0aWVzLm1hcmtlcm5hbWUgfHwgJycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogICAgIG1hcGNvbmZpZy5mZWF0dXJlcy5vcGFjaXR5LFxuICAgICAgICAgICAgICAgICAgICAgICAgcmlzZU9uSG92ZXI6IG1hcGNvbmZpZy5mZWF0dXJlcy5yaXNlT25Ib3ZlclxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIF8uZXh0ZW5kKE1hcFZpZXcucHJvdG90eXBlLEFzeW5jSW5pdCk7XG4gICAgcmV0dXJuIE1hcFZpZXc7XG59KTtcbiIsIi8qZ2xvYmFsIGRlZmluZSovXG5kZWZpbmUoJ3ZpZXdzL21hcmtlcicsIFtcbiAgICAnanF1ZXJ5JyxcbiAgICAndW5kZXJzY29yZScsXG4gICAgJ2JhY2tib25lJyxcbiAgICAndGV4dCFwYXJ0aWFscy9tYXJrZXIuaHRtbCdcbl0sIGZ1bmN0aW9uKCQsXyxCYWNrYm9uZSx0bXBsKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBNYXJrZXJWaWV3ID0gQmFja2JvbmUuVmlldy5leHRlbmQoe1xuICAgICAgICB0ZW1wbGF0ZTogXy50ZW1wbGF0ZSh0bXBsKSxcbiAgICAgICAgZWw6ICcnLFxuICAgICAgICByb3V0ZXI6IG51bGwsXG4gICAgICAgIGljb25Vcmw6ICcnLFxuICAgICAgICBwb3B1cDogbnVsbCxcbiAgICAgICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oYXJncykge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgdGhhdC5yb3V0ZXIgPSBhcmdzLnJvdXRlcjtcbiAgICAgICAgICAgIHRoYXQuaWNvblVybCA9IGFyZ3MuaWNvblVybDtcbiAgICAgICAgICAgIHRoYXQuaWNvblRpdGxlID0gYXJncy5pY29uVGl0bGU7XG4gICAgICAgICAgICB0aGF0Lm1vZGVsLm9uKCdhY3RpdmUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdXJsID0gJ2FydGljbGUvJyArIHRoYXQubW9kZWwuYXJ0aWNsZS5nZXQoJ2FydGljbGVpZCcpO1xuICAgICAgICAgICAgICAgIHRoYXQucm91dGVyLm5hdmlnYXRlKHVybCwge3RyaWdnZXI6IHRydWV9KTtcbiAgICAgICAgICAgICAgICB0aGF0LnRyaWdnZXIoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLCByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy4kZWwuaHRtbChcbiAgICAgICAgICAgICAgICB0aGlzLnRlbXBsYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgYXJ0aWNsZWlkOiAgdGhpcy5tb2RlbC5hcnRpY2xlLmdldCgnYXJ0aWNsZWlkJyksXG4gICAgICAgICAgICAgICAgICAgIGdlb2pzb246ICAgIHRoaXMubW9kZWwuYXJ0aWNsZS5nZXRHZW9qc29uKCksXG4gICAgICAgICAgICAgICAgICAgIGljb25Vcmw6ICAgIHRoaXMuaWNvblVybCxcbiAgICAgICAgICAgICAgICAgICAgaWNvblRpdGxlOiAgdGhpcy5pY29uVGl0bGVcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuJGVsLmZpbmQoJ2ltZy5pY29uJykucG9wb3Zlcih7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyOiB0aGlzLiRlbC5maW5kKCdzcGFuLmljb24nKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gTWFya2VyVmlldztcbn0pO1xuIiwiLypnbG9iYWwgZGVmaW5lKi9cbmRlZmluZSgndmlld3MvbWVudScsIFtcbiAgICAgICdqcXVlcnknXG4gICAgLCAndW5kZXJzY29yZSdcbiAgICAsICdiYWNrYm9uZSdcbiAgICAsICd0ZXh0IXBhcnRpYWxzL21lbnUuaHRtbCdcbiAgICAsICdtaXhpbnMvZG9td2F0Y2hlcidcbiAgICAsICd2aWV3cy9hcnRpY2xlL21lbnUnXG5dLCBmdW5jdGlvbigkLF8sQmFja2JvbmUsbWVudVRtcGwsRE9NV2F0Y2hlcixBcnRpY2xlTWVudVZpZXcpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIE1lbnVWaWV3ID0gQmFja2JvbmUuVmlldy5leHRlbmQoe1xuICAgICAgICB0ZW1wbGF0ZTogXy50ZW1wbGF0ZShtZW51VG1wbCksXG4gICAgICAgICAgaWQ6ICAgICAgJ21lbnUnXG4gICAgICAgICwgdGFnTmFtZTogJ2RpdidcbiAgICAgICAgLCBpc3N1ZTogICBudWxsXG4gICAgICAgICwgY29uZmlnOiAge31cbiAgICAgICAgLCBpbml0aWFsaXplOiBmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgICAgICB0aGlzLmNvbmZpZyA9IGFyZ3MuY29uZmlnO1xuICAgICAgICAgICAgdGhpcy5pc3N1ZSAgPSBhcmdzLmlzc3VlO1xuICAgICAgICB9LFxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgaWYgKCQoJyMnICsgdGhhdC5pZCkuY2hpbGRyZW4oKS5sZW5ndGggIT09IDApIHJldHVybjtcbiAgICAgICAgICAgIHZhciBpdGVtcyA9IHRoaXMuY29uZmlnLm1lbnU7XG4gICAgICAgICAgICAvLyByZW5kZXIgZWFjaCBpdGVtIGZyb20gdGhlIGNvbmZpZyBmaWxlIHRvIGEgPGxpPlxuICAgICAgICAgICAgLy8gbXVzdCBiZSBkb25lIGFzeW5jIGR1ZSB0byByZXRyaWV2YWwgb2YgcGFydGlhbCBmaWxlc1xuICAgICAgICAgICAgdmFyIHByb21pc2VzID0gW107XG4gICAgICAgICAgICAgLy8gY2FjaGUgb2YgdGVtcGxhdGUgc3RyaW5nczogdXJsID0+IHRlbXBsXG4gICAgICAgICAgICB2YXIgdGVtcGxhdGVzID0ge307XG4gICAgICAgICAgICB2YXIgY29sbGVjdGlvbnMgPSB7fTtcbiAgICAgICAgICAgIF8uZWFjaChpdGVtcywgZnVuY3Rpb24oaXRlbSl7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVzW2l0ZW0ucGFydGlhbF0gPSAnJztcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS50eXBlID09PSAnbWVudScpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBpdGVtLmNvbGxlY3Rpb24gPT09IFwiY29sbGVjdGlvbnMvYXJ0aWNsZXNcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbnNbaXRlbS5jb2xsZWN0aW9uXSA9IHRoYXQuaXNzdWUuZ2V0KCdjb2xsZWN0aW9uJyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmhhbmRsZWQgY29sbGVjdGlvbiB0eXBlIHJlcXVlc3RlZDogXCIgKyBpdGVtLmNvbGxlY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBfLmVhY2goXy5rZXlzKHRlbXBsYXRlcyksIGZ1bmN0aW9uKHVybCkge1xuICAgICAgICAgICAgICAgIHZhciAkZGVmID0gJC5EZWZlcnJlZCgpO1xuICAgICAgICAgICAgICAgIHJlcXVpcmUoWyd0ZXh0IScgKyB1cmxdLCBmdW5jdGlvbih0ZW1wbCkge1xuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZXNbdXJsXSA9IF8udGVtcGxhdGUodGVtcGwpO1xuICAgICAgICAgICAgICAgICAgICAkZGVmLnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBwcm9taXNlcy5wdXNoKCRkZWYucHJvbWlzZSgpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gcmVuZGVyIHRoZSBtZW51IGFzIGEgPGRpdj5cbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gJyc7XG4gICAgICAgICAgICAkLndoZW4uYXBwbHkoJCwgcHJvbWlzZXMpLmRvbmUoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgXy5mb3JFYWNoKGl0ZW1zLCBmdW5jdGlvbihpdGVtLGkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9IGl0ZW0ucGFydGlhbDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNvcnRlciA9IHt9O1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3ViQ29udGVudCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc29ydEtleXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gJ3BhZ2UnIHx8IGl0ZW0udHlwZSA9PT0gJ3NlcCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgKz0gKHRlbXBsYXRlc1t1cmxdKShpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpdGVtLnR5cGUgPT09ICdtZW51Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbnNbaXRlbS5jb2xsZWN0aW9uXS5tb2RlbHMuZm9yRWFjaChmdW5jdGlvbihtb2RlbCxqKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhyZWYgICAgPSBpdGVtLml0ZW0uaHJlZi5yZXBsYWNlKCc6aScsIGopO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbXYgICAgID0gbmV3IEFydGljbGVNZW51Vmlldyh7bW9kZWw6bW9kZWx9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ICA9IGFtdi5yZW5kZXIoe2hyZWY6ICcjJyArIGhyZWZ9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGxpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5lZWQgYW4gPGxpPiBlbGVtZW50IGhlcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGxpID0gJChyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzdWx0IGluc3RhbmNlb2YgRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0Lm5vZGVOYW1lID09PSAnQk9EWScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRsaSA9ICQocmVzdWx0LmlubmVySFRNTCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzdWx0Lm5vZGVOYW1lID09PSAnTEknKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbGkgPSAkKHJlc3VsdC5vdXRlckhUTUwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBkb2N1bWVudCBlbGVtZW50IGZvciBzdWJtZW51OiAnICsgcmVzdWx0LnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCByZXN1bHQgdHlwZSBmb3Igc3VibWVudTogJyArIHJlc3VsdC50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRsaS5hdHRyKCdkYXRhLXNvcnQta2V5JykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc29ydGVyWyRsaS5hdHRyKCdkYXRhLXNvcnQta2V5JyldID0gJGxpLmNsb25lKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc29ydGVyWyRsaS5maW5kKCdhJykudGV4dCgpXSA9ICRsaS5jbG9uZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgc29ydEtleXMgPSBfLmtleXMoc29ydGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvcnRLZXlzLnNvcnQoZnVuY3Rpb24oYSxiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEubG9jYWxlQ29tcGFyZShiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5lYWNoKHNvcnRLZXlzLCBmdW5jdGlvbihrZXkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YkNvbnRlbnQgKz0gc29ydGVyW2tleV1bMF0ub3V0ZXJIVE1MO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ICs9ICh0ZW1wbGF0ZXNbdXJsXSkoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBpdGVtLmxhYmVsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBzdWJDb250ZW50XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAkKCcjJyArIHRoYXQuaWQpLmVtcHR5KCkuYXBwZW5kKHRoYXQudGVtcGxhdGUoe2NvbnRlbnQ6IGNvbnRlbnR9KSk7XG4gICAgICAgICAgICAgICAgLy8gY29uZmlybSB0aGF0IHRoZSBtZW51IGhhcyBsb2FkZWRcbiAgICAgICAgICAgICAgICB2YXIgJGZhaWxEZWYgPSAkLkRlZmVycmVkKCk7XG4gICAgICAgICAgICAgICAgJGZhaWxEZWYuZmFpbChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICB0aGF0LnJlbmRlcigpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoYXQud2F0Y2hET00oNTAwLCAnIycgKyB0aGF0LmlkLCAkZmFpbERlZik7XG4gICAgICAgICAgICB9KS5mYWlsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBidWlsZCBtZW51LlwiKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgXy5leHRlbmQoTWVudVZpZXcucHJvdG90eXBlLERPTVdhdGNoZXIpO1xuICAgIHJldHVybiBNZW51Vmlldztcbn0pO1xuIiwiLypnbG9iYWwgZGVmaW5lKi9cbmRlZmluZSgndmlld3MvcGFnZScsIFtcbiAgICAnanF1ZXJ5JywgXG4gICAgJ3VuZGVyc2NvcmUnLCBcbiAgICAnYmFja2JvbmUnLFxuICAgICdtaXhpbnMvZG9td2F0Y2hlcicsXG4gICAgJ3RleHQhcGFydGlhbHMvcGFnZS5odG1sJ1xuXSwgZnVuY3Rpb24oJCxfLEJhY2tib25lLERPTVdhdGNoZXIscGFnZSkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgUGFnZVZpZXcgPSBCYWNrYm9uZS5WaWV3LmV4dGVuZCh7XG4gICAgICAgIGVsOiAnYm9keScsXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgdmFyICRkZWYgPSAkLkRlZmVycmVkKCk7XG4gICAgICAgICAgICAkZGVmLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgJCh0aGF0LmVsKS5hcHBlbmQocGFnZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMud2F0Y2hET00oMTAwMCx0aGF0LmVsLCRkZWYpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgXy5leHRlbmQoUGFnZVZpZXcucHJvdG90eXBlLERPTVdhdGNoZXIpO1xuICAgIHJldHVybiBQYWdlVmlldztcbn0pO1xuIiwiLypnbG9iYWwgZGVmaW5lKi9cbmRlZmluZSgndmlld3MvcGFydGlhbCcsIFtcbiAgICAgICdqcXVlcnknXG4gICAgLCAndW5kZXJzY29yZSdcbiAgICAsICdiYWNrYm9uZSdcbiAgICAsICdtaXhpbnMvZG9td2F0Y2hlcidcbiAgICAsICdtaXhpbnMvYXN5bmNJbml0J1xuXSwgZnVuY3Rpb24oJCxfLEJhY2tib25lLERPTVdhdGNoZXIsQXN5bmNJbml0KSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBQYXJ0aWFsVmlldyA9IEJhY2tib25lLlZpZXcuZXh0ZW5kKHtcbiAgICAgICAgZWw6ICcnLFxuICAgICAgICBwYWdlOiAnJyxcbiAgICAgICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24ob3B0cykge1xuICAgICAgICAgICAgdmFyIHRoYXQgID0gdGhpcztcbiAgICAgICAgICAgIHRoYXQuZWwgICA9IG9wdHMuZWw7XG4gICAgICAgICAgICB0aGF0LiRkZWYgPSAkLkRlZmVycmVkKCk7XG4gICAgICAgICAgICByZXF1aXJlKFsndGV4dCEnICsgb3B0cy5wYWdlXSwgZnVuY3Rpb24oaHRtbCkge1xuICAgICAgICAgICAgICAgIHRoYXQucGFnZSA9IGh0bWw7XG4gICAgICAgICAgICAgICAgdGhhdC4kZGVmLnJlc29sdmUodGhhdCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgJHdhdGNoRGVmID0gJC5EZWZlcnJlZCgpO1xuICAgICAgICAgICAgdGhhdC5pbml0KCkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAkKHRoYXQuZWwpLmFwcGVuZCh0aGF0LnBhZ2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLndhdGNoRE9NKDEwMDAsdGhhdC5lbCwkd2F0Y2hEZWYpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgXy5leHRlbmQoUGFydGlhbFZpZXcucHJvdG90eXBlLERPTVdhdGNoZXIpO1xuICAgIF8uZXh0ZW5kKFBhcnRpYWxWaWV3LnByb3RvdHlwZSxBc3luY0luaXQpO1xuICAgIHJldHVybiBQYXJ0aWFsVmlldztcbn0pO1xuIiwiLypnbG9iYWwgZGVmaW5lICovXG5kZWZpbmUoJ21vZGVscy9lcnJvci91c2VyJywgW1xuICAgICdiYWNrYm9uZSdcbl0sIGZ1bmN0aW9uKEJhY2tib25lKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBVc2VyRXJyb3JNb2RlbCA9IEJhY2tib25lLk1vZGVsLmV4dGVuZCh7XG4gICAgICAgIGRlZmF1bHRzOiB7XG4gICAgICAgICAgICBcIm1zZ1wiIDogXCJcIlxuICAgICAgICB9LFxuICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgICAgICB0aGlzLnNldCgnbXNnJywgYXJncy5tZXNzYWdlKTtcbiAgICAgICAgfVxuICAgIH0pOyAgICBcbiAgICByZXR1cm4gVXNlckVycm9yTW9kZWw7XG59KTtcbiIsIi8qZ2xvYmFsIGRlZmluZSovXG4vKlxuICogVGhpcyBpcyBtZWFudCB0byBiZSBleHRlbmRlZCBhcyBhbiBhYnN0cmFjdCBiYXNlIGNsYXNzIGZvciB0aGVcbiAqIHNlY3Rpb25zIG9mIGFuIGFydGljbGUuXG4gKi9cbmRlZmluZSgndmlld3MvYXJ0aWNsZS9tZW51JywgW1xuICAgICdqcXVlcnknLCBcbiAgICAndW5kZXJzY29yZScsIFxuICAgICdiYWNrYm9uZScsXG4gICAgJ21peGlucy94bWwyaHRtbCcsXG4gICAgJ3RleHQheHNsL2FydGljbGUtbWVudS54c2wnXG5dLCBmdW5jdGlvbigkLF8sQmFja2JvbmUsWE1MMkhUTUwsYW1Yc2wpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIEFydGljbGVNZW51VmlldyA9IEJhY2tib25lLlZpZXcuZXh0ZW5kKHtcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbihwYXJhbXMpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIC8vIHRoaXMgdmlldyBpcyBtZWFudCB0byBiZSBjYWxsZWQgb25seSBhZnRlciB0aGUgY29ycmVzcG9uZGluZ1xuICAgICAgICAgICAgLy8gYXJ0aWNsZSBtb2RlbCBoYXMgYmVlbiBpbml0aWFsaXplZFxuICAgICAgICAgICAgaWYgKHRoaXMubW9kZWwuaW5pdCgpLnN0YXRlKCkgIT09ICdyZXNvbHZlZCcpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBcIlVuaW5pdGlhbGl6ZWQgYXJ0aWNsZSBpbiBBcnRpY2xlTWVudVZpZXdcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBtZW51aXRlbSA9IHRoYXQueG1sMmh0bWwodGhhdC5tb2RlbC5nZXQoJ3htbCcpLCBhbVhzbCwgcGFyYW1zKTtcbiAgICAgICAgICAgIHJldHVybiBtZW51aXRlbTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIF8uZXh0ZW5kKEFydGljbGVNZW51Vmlldy5wcm90b3R5cGUsWE1MMkhUTUwpO1xuICAgIHJldHVybiBBcnRpY2xlTWVudVZpZXc7XG59KTtcbiIsIi8qZ2xvYmFsIGRlZmluZSovXG5kZWZpbmUoJ3ZpZXdzL2Vycm9yL3VzZXInLCBbXG4gICAgJ2pxdWVyeScsIFxuICAgICdiYWNrYm9uZScsIFxuICAgICd0ZXh0IXBhcnRpYWxzL2Vycm9yL3VzZXIuaHRtbCdcbl0sIGZ1bmN0aW9uKCQsQmFja2JvbmUsdG1wbCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgVXNlckVycm9yVmlldyA9IEJhY2tib25lLlZpZXcuZXh0ZW5kKHtcbiAgICAgICAgdGVtcGxhdGU6IF8udGVtcGxhdGUodG1wbCksXG4gICAgICAgIGVsOiAkKCcjZXJyb3JEaWFsb2cnKSxcbiAgICAgICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLiRlbC5odG1sKHRoaXMudGVtcGxhdGUodGhpcy5tb2RlbC5hdHRyaWJ1dGVzKSk7XG4gICAgICAgICAgICB0aGlzLiRlbC5tb2RhbCh7a2V5Ym9hcmQ6IHRydWUsIHNob3c6IHRydWV9KTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIFVzZXJFcnJvclZpZXc7XG59KTtcbiIsInJlcXVpcmUuY29uZmlnKHtcbiAgcGF0aHM6IHtcbiAgICB0ZXh0OiAgICAgICAnLy9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvcmVxdWlyZS10ZXh0LzIuMC4xMi90ZXh0Lm1pbicsXG4gICAganF1ZXJ5OiAgICAgJy8vY29kZS5qcXVlcnkuY29tL2pxdWVyeS0yLjEuNC5taW4nLFxuICAgIGJvb3RzdHJhcDogICcvL21heGNkbi5ib290c3RyYXBjZG4uY29tL2Jvb3RzdHJhcC8zLjMuNC9qcy9ib290c3RyYXAubWluJyxcbiAgICBiYWNrYm9uZTogICAnLy9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvYmFja2JvbmUuanMvMS4xLjIvYmFja2JvbmUtbWluJyxcbiAgICB1bmRlcnNjb3JlOiAnLy9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvdW5kZXJzY29yZS5qcy8xLjguMy91bmRlcnNjb3JlLW1pbicsXG4gICAgbGVhZmxldDogICAgJy8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2xlYWZsZXQvMC43LjMvbGVhZmxldCcsXG4gICAgc2xpZGVzanM6ICAgJy8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL3NsaWRlc2pzLzMuMC9qcXVlcnkuc2xpZGVzLm1pbicsXG4gICAgbGlnaHRib3g6ICAgJy8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL21hZ25pZmljLXBvcHVwLmpzLzEuMC4wL2pxdWVyeS5tYWduaWZpYy1wb3B1cC5taW4nLFxuICAgIHBhcnRpYWxzOiAgICcuLi9wYXJ0aWFscycsXG4gICAgeHNsOiAgICAgICAgJy4uL3NjcmlwdC94c2wnLFxuICAgIHBhZ2VzOiAgICAgICcuLi9wYWdlcydcbiAgfSxcbiAgc2hpbToge1xuICAgIGJvb3RzdHJhcDoge1xuICAgICAgZGVwczogWydqcXVlcnknXVxuICAgIH0sXG4gICAgYmFja2JvbmU6IHtcbiAgICAgICAgJ2RlcHMnOiBbJ2pxdWVyeScsICd1bmRlcnNjb3JlJ10sXG4gICAgICAgICdleHBvcnRzJzogJ0JhY2tib25lJ1xuICAgIH0sXG4gICAgdW5kZXJzY29yZToge1xuICAgICAgICAnZXhwb3J0cyc6ICdfJ1xuICAgIH0sXG4gICAgdGV4dDoge1xuICAgICAgICAnZGVwcyc6IFtdXG4gICAgfSxcbiAgICBzbGlkZXNqczoge1xuICAgICAgICBkZXBzOiBbJ2pxdWVyeSddXG4gICAgfSxcbiAgICBsaWdodGJveDoge1xuICAgICAgZGVwczogWydqcXVlcnknXVxuICAgIH1cbiAgfVxufSk7XG5yZXF1aXJlKFtcbiAgICAnanF1ZXJ5JyxcbiAgICAnbW9kZWxzL2Vycm9yL3VzZXInLFxuICAgICd2aWV3cy9lcnJvci91c2VyJyxcbiAgICAnbW9kZWxzL2FwcCcsXG4gICAgJ3ZpZXdzL2FwcCcsXG4gICAgJ2Jvb3RzdHJhcCdcbl0sIGZ1bmN0aW9uKCQsVXNlckVycm9yTW9kZWwsVXNlckVycm9yVmlldyxBcHBNb2RlbCxBcHBWaWV3KSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBjb25maWdmaWxlID0gJCgnI21haW4nKS5hdHRyKCdkYXRhLWNvbmZpZycpO1xuICAgIGlmIChjb25maWdmaWxlKSB7XG4gICAgICAgICQuZ2V0SlNPTihjb25maWdmaWxlLCBmdW5jdGlvbihzaXRlY29uZmlnKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhciBhcHAgPSBuZXcgQXBwVmlldyh7XG4gICAgICAgICAgICAgICAgICAgIG1vZGVsOiAobmV3IEFwcE1vZGVsKHtjb25maWc6IHNpdGVjb25maWd9KSlcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIW9wdHMuY29uZmlnLmRlYnVnKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ldyBVc2VyRXJyb3JWaWV3KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsOiBuZXcgVXNlckVycm9yTW9kZWwoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1zZzogZS50b1N0cmluZygpXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLmZhaWwoZnVuY3Rpb24oanF4aHIsIHRleHRTdGF0dXMsIGVycm9yKSB7XG4gICAgICAgICAgICBuZXcgVXNlckVycm9yVmlldyh7XG4gICAgICAgICAgICAgICAgbW9kZWw6IG5ldyBVc2VyRXJyb3JNb2RlbCh7XG4gICAgICAgICAgICAgICAgICAgIG1zZzogXCJGYWlsZWQgdG8gbG9hZCBzaXRlIGNvbmZpZyBmaWxlICdcIiArIGNvbmZpZ2ZpbGUgKyBcIicgXCIgKyBlcnJvclxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbmV3IFVzZXJFcnJvclZpZXcoe1xuICAgICAgICAgICAgbW9kZWw6IG5ldyBVc2VyRXJyb3JNb2RlbCh7XG4gICAgICAgICAgICAgICAgbXNnOiBcIk5vIGNvbmZpZ3VyYXRpb24gZmlsZW5hbWUgc3BlY2lmaWVkIGluIGhvbWUgcGFnZS5cIlxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgfVxufSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
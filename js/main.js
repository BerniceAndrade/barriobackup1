define("collections/articles",["jquery","underscore","backbone","models/article"],function(e,c,n,o){"use strict";var r=n.Collection.extend({model:o});return r});
define("collections/markers",["jquery","underscore","backbone","models/marker"],function(e,r,n,o){"use strict";var c=n.Collection.extend({model:o});return c});
define("mixins/asyncInit",["jquery","underscore"],function(n,e){"use strict";var i={$def:null,init:function(){return this.$def.promise()}};return i});
define("mixins/domwatcher",["jquery"],function(e){"use strict";var t={watchDOM:function(t,o,n){if(!o)throw"Empty selector in watchDOM()";if(0===e(o).length){var d=function(){e(o).length>0&&(e(document.body).off("DOMNodeInserted",d),n.resolve())};e(document.body).on("DOMNodeInserted",d),window.setTimeout(function(){e(document.body).off("DOMNodeInserted",d),n.reject()},t)}else n.resolve()}};return t});
define("mixins/fetchxml",["jquery"],function(e){"use strict";var r={fetchXML:function(r){var t=e.Deferred();return e.ajax({type:"GET",url:r,dataType:"xml",success:function(e){t.resolve(e)},error:function(e,r,n){t.reject()}}),t.promise()}};return r});
define("mixins/xml2html",["jquery","underscore"],function(e,t){"use strict";var r={_doc:function(e){var t;if("string"==typeof e)t=(new DOMParser).parseFromString(e,"text/xml");else{if(!(e instanceof Document))throw new Error("Unrecognized document input in XML2HTML");t=e}if(null==t||!t.hasOwnProperty("getElementsByTagName")&&t.getElementsByTagName("parsererror").length>0)throw new Error("Failed to parse document in xml2html");return t},xml2html:function(e,r,n,o){var i=this._doc(e),m=this._doc(r),a=new XSLTProcessor;a.importStylesheet(m),"object"==typeof n&&t.each(t.keys(n),function(e){a.setParameter(null,e,n[e])});var s;try{var c=a.transformToDocument(i);s=-1!=navigator.userAgent.indexOf("Firefox")?"text"===o?c.documentElement.textContent:c.documentElement:"text"===o?c.documentElement.textContent:s=c.body.innerHTML}catch(u){throw new Error("Error in XSLT transform: "+u.toString())}return s}};return r});
define("models/app",["jquery","underscore","backbone","routes/router","models/issue"],function(e,n,o,i,r){"use strict";var s=o.Model.extend({initialize:function(e){var n=new r({config:e.config});new i({routes:e.config.pages.routes,config:e.config,issue:n})}});return s});
define("models/article",["jquery","underscore","backbone","mixins/fetchxml","mixins/asyncInit","mixins/xml2html","text!xsl/geojson.xsl"],function(e,t,n,o,i,s,r){"use strict";var l=n.Model.extend({initialize:function(){var t=this;t.$def=e.Deferred();var n=t.fetchXML(t.get("path"));e.when(n).done(function(e){t.set("xml",e),t._mkGeojson(),null!==t.geojson&&t.set("placeType",t.geojson.properties.layer),t.$def.resolve(t)}).fail(function(){t.$def.reject()})},defaults:{xml:null,placeType:null,iconUrl:""},select:function(){this.trigger("active")},unselect:function(){this.trigger("inactive")},toggle:function(){this.trigger("toggle")},geojson:null,getGeojson:function(){return null===this.geojson&&this._mkGeojson(),this.geojson},_mkGeojson:function(){try{var e=this.xml2html(this.get("xml"),r,{},"text");this.geojson=JSON.parse(e)}catch(t){throw new Error("Failed to parse to json: "+t.toString())}}});return t.extend(l.prototype,o),t.extend(l.prototype,i),t.extend(l.prototype,s),l});
define("models/issue",["jquery","underscore","backbone","models/article","collections/articles","mixins/asyncInit"],function(e,t,i,n,c,l){"use strict";var r=i.Model.extend({initialize:function(i){var l=this;l.$def=e.Deferred();var r=i.config.articles.pathBase;r.match(/\/$/)||(r+="/");var a=i.config.articles.files,o=new c;l.config=i.config,l.set("collection",o);var s=t.map(t.range(a.length),function(){return void 0});t.each(a,function(e,t){s[t]=new n({articleid:t,articledir:r,path:r+e})});var f=t.map(s,function(e){return e.init()});e.when({},f).fail(function(){l.$def.reject()}),e.when.apply(null,f).done(function(){o.add(s),l.on("select",function(e){l._selectArticle(e)}),l.$def.resolve(l)}),e.when.apply(null,f).always(function(){t.forEach(f,function(e){"rejected"===e.state()&&l.$def.reject()}),l.$def.resolve(l)})},defaults:{activeArticle:null},_selectArticle:function(e){var t,i=this,n=i.get("collection");if("object"==typeof e)t=e;else{if("number"!=typeof e&&"string"!=typeof e)throw"Bad argument to models/issue";t=n.at(e)}(null===this.get("activeArticle")||this.get("activeArticle")!=e)&&(this.get("activeArticle")&&this.get("activeArticle").unselect(),i.set("activeArticle",t),t.init().done(function(){i.trigger("update",t),t.select()}))}});return t.extend(r.prototype,l),r});
define("models/map",["jquery","underscore","backbone","collections/markers","models/marker","mixins/asyncInit"],function(e,o,n,i,r,t){"use strict";var s=n.Model.extend({initialize:function(o){var n=this;if(n.$def=e.Deferred(),n.issue=o.issue,n.set("siteconfig",o.config),void 0===n.issue)throw new Error("Missing issue model in map model");if(n.set("router",o.router),!o.router)throw new Error("No router in MapModel");var i=e.Deferred();e.getJSON(o.config.map.config,function(e){n.set("mapconfig",e),i.resolve()}).fail(function(e,o,n){i.reject(),console.log("Failed to load map config file: "+n)}),e.when.apply({},[n.issue.init(),i]).done(function(){n._makeCollection(n.issue.get("collection").models,{success:function(){n.$def.resolve(n)},fail:function(){n.$def.reject()}})}).fail(function(){n.$def.reject()}).always(function(){n.$def.reject()})},defaults:{mapconfig:{},siteconfig:{},iconUrls:{}},_makeCollection:function(e,n){var t=this,s=new i;t.set("collection",s);var c=new Array(e.length),f=!1,a="",l=t.get("iconUrls"),u=t.attributes.siteconfig.markers.icons,d=o.shuffle(o.flatten(o.map(u,function(e){return o.map(e.files,function(o){return e.dir.concat(o)})})));if(e.forEach(function(e,o){var n=e.getGeojson()||{properties:{}},i=n.properties.layer;l[i]=l[i]||d.pop(),e.set("iconUrl",l[i])}),e.forEach(function(e,o){var n;try{n=new r({issue:t.issue,article:e,json:e.getGeojson(),router:t.router,iconUrl:l[e.get("placeType")]})}catch(i){return f=!0,void(a+="\n"+i.toString())}c[o]=n}),f)throw n.fail(),new Error(a);s.add(c),n.success()}});return o.extend(s.prototype,t),s});
define("models/marker",["jquery","underscore","backbone"],function(e,t,i){"use strict";var r=i.Model.extend({article:null,json:{},initialize:function(e){var t=this;t.app=e.app,t.article=e.article,t.router=e.router,e.issue.init().done(function(e){t.listenTo(t.article,"active",function(){t.trigger("active")}),t.listenTo(t.article,"toggle",function(){t.trigger("toggle")})})}});return r});
define("routes/router",["jquery","underscore","backbone","models/error/user","views/error/user","views/clear","views/issue","views/map","views/menu"],function(e,i,r,n,s,t,a,o,u){"use strict";var g=r.Router.extend({pages:{},config:{},issue:null,mapView:null,initialize:function(e){var n=this;this.config=e.config,this.pages=e.config.pages,this.issue=e.issue,this.issue.init().done(function(){i.has(n.pages.router,"history")&&n.pages.router.history&&r.history.start()})},navigate:function(e,i){r.history.fragment!==e&&r.history.navigate(e,i)},page:function(e){var r,n=this;try{if(e||(e=this.pages.home),r=this.pages.pages[e],void 0===r)throw new Error("Missing config in router/page")}catch(s){return this.page("404")}(new t).render(),i.each(r,function(r){var s,t={config:n.config,issue:n.issue,router:n},a=JSON.parse(JSON.stringify(r));if(i.has(a,"view"))s=a.view;else{if(!i.has(a,"partial")){if(i.has(confg,"full"))return void(window.location.href=a.full.page);throw new Error("Unsupported page type in router: "+e)}s="views/partial",a.partial.page=n.pages.pathBase+a.partial.page,t=i.extend(t,a.partial)}require([s],function(e){var i=new e(t);"views/map"===s&&(n.mapView=i),i.render()})})},article:function(i){var r=this,n={config:r.config,issue:r.issue,router:r};if(e("#titlepage").length>0&&e("#titlepage").remove(),0===e("#issue").length){var s=new a(n);s.render()}if(0===e("#map").length&&(r.mapView=new o(n),r.mapView.render()),0===e("#menu").children().length){var t=new u(n);t.render()}e.when.apply({},[r.mapView.init()]).done(function(){r.issue.trigger("select",i)})}});return g});
define("views/app",["jquery","underscore","backbone"],function(e,n,i){"use strict";var o=i.View.extend({el:"body",initialize:function(){e(window).resize(function(){document.location.reload()})}});return o});
define("views/article",["jquery","underscore","backbone","mixins/domwatcher","mixins/xml2html","text!xsl/article.xsl","text!partials/image-popover.html","text!partials/image-popover-content.html","text!partials/lightbox-title.html","slidesjs","lightbox"],function(e,t,i,l,s,o,a,n,r){"use strict";var d=i.View.extend({id:"article",legendClass:"",initialize:function(e){var t=this;t.config=e.config,t.legendClass="."+t.model.attributes.placeType.replace(/\s+/g,"-")},render:function(){var t=this;if(t.$el=e("#"+t.id),0===t.$el.find("#"+t.model.cid).length){var i=this.xml2html(this.model.get("xml"),o,{"article-dir":t.config.articles.pathBase,iconUrl:t.model.get("iconUrl"),cid:t.model.cid});try{e(".article-content").remove(),e("#"+this.id).append(i)}catch(l){console.log("article load error: "+l.toString())}if(0===e("img.slidesjs-slide").length)e("#footer").remove(),e("article").removeClass("before-footer").addClass("no-footer");else try{t.postprocess()}catch(l){throw new Error("Failed to handle article images")}return t.$el.find(".article-marker").click(function(e,i){t.model.toggle()}).hover(function(i){e(".leaflet-control-layers.leaflet-control").addClass("leaflet-control-layers-expanded"),e(".leaflet-control-layers.leaflet-control").find(t.legendClass).addClass("legend-highlight")},function(i){e(".leaflet-control-layers.leaflet-control").removeClass("leaflet-control-layers-expanded"),e(".leaflet-control-layers.leaflet-control").find(t.legendClass).removeClass("legend-highlight")}),t}},remove:function(){},postprocess:function(){var i=this,l=e("#article article").height()-e("#header").outerHeight(!0);e("#body").css({height:l});var s=t.template(n);e("img.slidesjs-slide").each(function(t,i){var l=i.getAttribute("id"),o=e(".popover."+l),n=o.find(".head").text();e(i).attr("alt",o.find(".desc").text());var r=s({attr:o.find(".attr").text()});e(i).popover({container:"body",html:!0,content:r,title:n,template:a,trigger:"hover",placement:"left"}),e(i).click(function(t){e(i).popover("hide")})});var o=[];return i.$el.find("img.slidesjs-slide").each(function(t,i){var l=e.Deferred();e(i).load(function(){e(i).removeClass("remove"),l.resolve()}),e(i).error(function(){window.setTimeout(function(){l.reject()},500)}),o.push(l)}),e.when.apply({},o).always(function(){e("img.slidesjs-slide.remove").remove(),e(".image-loading").removeClass("image-loading"),e("#slides").slidesjs({navigation:{active:e("img.slidesjs-slide").length>1,effect:"fade"},pagination:{active:e("img.slidesjs-slide").length>1,effect:"fade"},effect:{fade:{speed:100,crossfade:!0}},callback:{loaded:function(t){var i=e(".slidesjs-control").children(":eq("+(t-1)+")");i.css({visibility:"hidden"}),i.css({height:"auto",width:"auto",maxHeight:e(".slidesjs-container").height(),maxWidth:e(".slidesjs-container").width(),position:"relative"});var l=(e(".slidesjs-container").width()-i.width())/2;l-=parseInt(i.css("padding-left"),10),i.css({left:l}),i.css({visibility:"visible"})},start:function(t){e(".slidesjs-control").children().css({visibility:"hidden"})},complete:function(t){var i=t-1,l=e(".slidesjs-control").children(":eq("+i+")");l.css({height:"auto",width:"auto",maxHeight:e(".slidesjs-container").height(),maxWidth:e(".slidesjs-container").width(),position:"relative"}),l.css({visibility:"visible"})}}})}),e(".gallery-item").magnificPopup({type:"image",gallery:{enabled:!0},image:{titleSrc:function(i){var l=i.el.attr("id"),s=e(".popover."+l),o=t.template(r),a=o({title:s.find(".head").text(),attr:s.find(".attr").text()});return a}}}),e(".glyphicon.glyphicon-expand").on("click",function(t){e(".gallery-item").magnificPopup("open")}),i}});return t.extend(d.prototype,l),t.extend(d.prototype,s),d});
define("views/clear",["jquery","underscore","backbone"],function(e,n,r,t){"use strict";var c=r.View.extend({el:"body",render:function(){e("body").empty()}});return c});
define("views/issue",["jquery","underscore","backbone","text!partials/issue.html","views/article"],function(e,i,t,n,o){"use strict";var r=t.View.extend({el:"#issue",template:i.template(n),initialize:function(e){var i=this;i.model=e.issue,i.model.on("update",function(e){i.select(e)})},render:function(){this.$el.remove(),e("body").append(n)},select:function(e){var i=this,t=new o({model:e,config:i.model.config,issue:i,router:i.model.router});e.on("active",t.render,t),e.on("inactive",t.remove,t)}});return r});
define("views/map",["jquery","underscore","backbone","leaflet","text!partials/map.html","text!partials/marker-legend.html","models/map","views/marker","mixins/asyncInit"],function(e,t,o,n,r,i,a,p,l){"use strict";var c=o.View.extend({id:"map",tagName:"div",initialize:function(t){var o=this;o.$def=e.Deferred(),o.config=t.config,o.model=new a(t),o.router=t.router},render:function(){var o=this;e("#"+o.id).children().length>0||(e("body").append(r),this.model.init().done(function(){var r=o.model.get("collection"),a=o.model.get("mapconfig"),p=new n.Map(a.id,a.map),l=t.template(i),c={},s={},u={},d=function(e){return e.lat.toString()+e.lng.toString()};o.configureMap(p,a,c,d,r.models),r.forEach(function(e){var t=e.get("json")||{properties:{}},r=(t.properties.layer,a.features.icon);r.iconUrl=e.get("iconUrl")||"";var i=n.icon(r);o.addMarkerToLayer(e,p,c,d,a,s,i,r.iconUrl)}),t.each(t.keys(s),function(e){var t=e.replace(/\s+/g,"-"),r=l({iconUrl:o.model.get("iconUrls")[e],title:e,klass:t});u[r]=n.layerGroup(s[e])}),n.control.layers(null,u,a.control.layers.options).addTo(p),e("input.leaflet-control-layers-selector").each(function(t,o){e(o).click()}),o.$def.resolve(o)}))},configureMap:function(e,o,r,i,a){var p,l,c,s,u;p=this,l=new n.TileLayer(o.tileLayer.url,o.tileLayer.opts),c=n.control.scale(o.scale),e.addLayer(l),c.addTo(e),u=n.DomUtil.getViewportOffset(document.getElementById("article")).x,s=n.latLngBounds(t.map(a,function(e){var t=e.get("json").geometry.coordinates.slice(0);return n.latLng(t.reverse())})),0===u?e.fitBounds(s):u!=e.getSize().x?e.fitBounds(s,{paddingBottomRight:[document.body.clientWidth-u,0]}):e.fitBounds(s),e.invalidateSize(),e.on("popupopen",function(t){var o=t.popup,n=o.getLatLng();p.handlePopupPosition(e,o),r[i(n)]=-1!=navigator.userAgent.indexOf("Firefox")?!0:!0}),e.on("popupclose",function(e){r[i(e.popup.getLatLng())]=-1!=navigator.userAgent.indexOf("Firefox")?!1:!1})},handlePopupPosition:function(t,o){var r,i,a,p,l;a=o.getLatLng(),void 0!==a&&(r=n.DomUtil.getViewportOffset(document.getElementById("article")).x,i=e(o.getContent()).closest(".leaflet-popup-content-wrapper").first(),l=n.point(o.options.autoPanPaddingBottomRight||o.options.autoPanPadding),l=l?l.x:0,p=i.offset().left+i.width()+l,0!=r&&p>r&&r!=t.getSize().x?t.panBy([p-r,0]):t.getBounds().contains(o.getLatLng())||(t.closePopup(o),t.openPopup(o)))},addMarkerToLayer:function(e,o,r,i,a,l,c,s){var u=this,d=e.get("json"),g=new p({model:e,router:u.router,iconUrl:s,iconTitle:d.properties.layer});g.on("active",function(){u.handlePopupPosition(o,g.popup)}),g.on("toggle",function(){g.mapMarker.togglePopup()}),g.render(),n.geoJson(d,{onEachFeature:function(o,p){var c=n.popup(a.features.popup);g.popup=c,g.mapMarker=p,c.setContent(g.el),p.bindPopup(c),p.removeEventListener("click"),p.on("click",function(){e.trigger("active")}),p.on("mouseover",function(){u.config.map.hoverPopup&&(r[i(p.getLatLng())]||p.openPopup())}),e.on("active",function(e){r[i(p.getLatLng())]||p.openPopup()}),r[i(p.getLatLng())]=!1,t.has(l,d.properties.layer)?l[d.properties.layer].push(p):l[d.properties.layer]=[p]},pointToLayer:function(e,t){return n.marker(t,{icon:c,clickable:!!e.properties.text,title:e.properties.markername||"",opacity:a.features.opacity,riseOnHover:a.features.riseOnHover})}})}});return t.extend(c.prototype,l),c});
define("views/marker",["jquery","underscore","backbone","text!partials/marker.html"],function(e,l,t,i){"use strict";var r=t.View.extend({template:l.template(i),el:"",router:null,iconUrl:"",popup:null,mapMarker:null,legendClass:"",initialize:function(e){var l=this;l.router=e.router,l.iconUrl=e.iconUrl,l.iconTitle=e.iconTitle,l.legendClass="."+l.iconTitle.replace(/\s+/g,"-"),l.model.on("active",function(){var e="article/"+l.model.article.get("articleid");l.router.navigate(e,{trigger:!0}),l.trigger("active")}),l.model.on("toggle",function(){l.trigger("toggle")})},render:function(){var l=this;this.$el.html(this.template({articleid:this.model.article.get("articleid"),geojson:this.model.article.getGeojson(),iconUrl:this.iconUrl,iconTitle:this.iconTitle})),this.$el.find("img.icon").hover(function(t){e(".leaflet-control-layers.leaflet-control").addClass("leaflet-control-layers-expanded"),e(".leaflet-control-layers.leaflet-control").find(l.legendClass).addClass("legend-highlight")},function(t){e(".leaflet-control-layers.leaflet-control").removeClass("leaflet-control-layers-expanded"),e(".leaflet-control-layers.leaflet-control").find(l.legendClass).removeClass("legend-highlight")})}});return r});
define("views/menu",["jquery","underscore","backbone","text!partials/menu.html","mixins/domwatcher","views/article/menu"],function(e,t,n,i,r,o){"use strict";var a=n.View.extend({template:t.template(i),id:"menu",tagName:"div",issue:null,config:{},initialize:function(e){this.config=e.config,this.issue=e.issue},render:function(){var n=this;if(0===e("#"+n.id).children().length){var i=this.config.menu,r=[],a={},c={};t.each(i,function(e){if(a[e.partial]="","menu"===e.type){if("collections/articles"!==e.collection)throw new Error("Unhandled collection type requested: "+e.collection);c[e.collection]=n.issue.get("collection")}}),t.each(t.keys(a),function(n){var i=e.Deferred();require(["text!"+n],function(e){a[n]=t.template(e),i.resolve()}),r.push(i.promise())});var l="";e.when.apply(e,r).done(function(){t.forEach(i,function(n,i){var r=n.partial,u={},s="",f=[];"page"===n.type||"sep"===n.type?l+=a[r](n):"menu"===n.type&&(c[n.collection].models.forEach(function(t,i){var r,a=n.item.href.replace(":i",i),c=new o({model:t}),l=c.render({href:"#"+a});if("string"==typeof l)r=e(l);else{if(!(l instanceof Element))throw new Error("Unsupported result type for submenu: "+l.toString());if("BODY"===l.nodeName)r=e(l.innerHTML);else{if("LI"!==l.nodeName)throw new Error("Unsupported document element for submenu: "+l.toString());r=e(l.outerHTML)}}r.attr("data-sort-key")?u[r.attr("data-sort-key")]=r.clone():u[r.find("a").text()]=r.clone()}),f=t.keys(u),f.sort(function(e,t){return e.localeCompare(t)}),t.each(f,function(e){s+=u[e][0].outerHTML}),l+=a[r]({label:n.label,items:s}))})}).then(function(){e("#"+n.id).empty().append(n.template({content:l}));var t=e.Deferred();t.fail(function(){n.render()}),n.watchDOM(500,"#"+n.id,t)}).fail(function(){throw new Error("Failed to build menu.")})}}});return t.extend(a.prototype,r),a});
define("views/page",["jquery","underscore","backbone","mixins/domwatcher","text!partials/page.html"],function(e,t,n,r,i){"use strict";var a=n.View.extend({el:"body",render:function(){var t=this,n=e.Deferred();n.then(function(){e(t.el).append(i)}),this.watchDOM(1e3,t.el,n)}});return t.extend(a.prototype,r),a});
define("views/partial",["jquery","underscore","backbone","mixins/domwatcher","mixins/asyncInit"],function(e,t,n,i,r){"use strict";var a=n.View.extend({el:"",page:"",initialize:function(t){var n=this;n.el=t.el,n.$def=e.Deferred(),require(["text!"+t.page],function(e){n.page=e,n.$def.resolve(n)})},render:function(){var t=this,n=e.Deferred();t.init().then(function(){e(t.el).append(t.page)}),this.watchDOM(1e3,t.el,n)}});return t.extend(a.prototype,i),t.extend(a.prototype,r),a});
define("models/error/user",["backbone"],function(e){"use strict";var s=e.Model.extend({defaults:{msg:""},initialize:function(e){this.set("msg",e.message)}});return s});
define("views/article/menu",["jquery","underscore","backbone","mixins/xml2html","text!xsl/article-menu.xsl"],function(e,t,i,n,r){"use strict";var l=i.View.extend({render:function(e){var t=this;if("resolved"!==this.model.init().state())throw"Uninitialized article in ArticleMenuView";var i=t.xml2html(t.model.get("xml"),r,e);return i}});return t.extend(l.prototype,n),l});
define("views/error/user",["jquery","backbone","text!partials/error/user.html"],function(e,t,r){"use strict";var i=t.View.extend({template:_.template(r),el:e("#errorDialog"),initialize:function(){this.render()},render:function(){return this.$el.html(this.template(this.model.attributes)),this.$el.modal({keyboard:!0,show:!0}),this}});return i});
require.config({paths:{text:"//cdnjs.cloudflare.com/ajax/libs/require-text/2.0.12/text.min",jquery:"//code.jquery.com/jquery-2.1.4.min",bootstrap:"//maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min",backbone:"//cdnjs.cloudflare.com/ajax/libs/backbone.js/1.1.2/backbone-min",underscore:"//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min",leaflet:"//cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.3/leaflet",slidesjs:"//cdnjs.cloudflare.com/ajax/libs/slidesjs/3.0/jquery.slides.min",lightbox:"//cdnjs.cloudflare.com/ajax/libs/magnific-popup.js/1.0.0/jquery.magnific-popup.min",partials:"../partials",xsl:"../script/xsl",pages:"../pages"},shim:{bootstrap:{deps:["jquery"]},backbone:{deps:["jquery","underscore"],exports:"Backbone"},underscore:{exports:"_"},text:{deps:[]},slidesjs:{deps:["jquery"]},lightbox:{deps:["jquery"]}}}),require(["jquery","models/error/user","views/error/user","models/app","views/app","bootstrap"],function(e,s,o,r,a){"use strict";var i=e("#main").attr("data-config");i?e.getJSON(i,function(e){try{{new a({model:new r({config:e})})}}catch(i){opts.config.debug||new o({model:new s({msg:i.toString()})})}}).fail(function(e,r,a){new o({model:new s({msg:"Failed to load site config file '"+i+"' "+a})})}):new o({model:new s({msg:"No configuration filename specified in home page."})})});
//# sourceMappingURL=data:application/json;base64,
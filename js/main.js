define("collections/articles",["jquery","underscore","backbone","models/article"],function(e,c,n,o){"use strict";var r=n.Collection.extend({model:o});return r});
define("collections/markers",["jquery","underscore","backbone","models/marker"],function(e,r,n,o){"use strict";var c=n.Collection.extend({model:o});return c});
define("mixins/asyncInit",["jquery","underscore"],function(n,e){"use strict";var i={$def:null,init:function(){return this.$def.promise()}};return i});
define("mixins/domwatcher",["jquery"],function(e){"use strict";var t={watchDOM:function(t,o,n){if(!o)throw"Empty selector in watchDOM()";if(0===e(o).length){var d=function(){e(o).length>0&&(e(document.body).off("DOMNodeInserted",d),n.resolve())};e(document.body).on("DOMNodeInserted",d),window.setTimeout(function(){e(document.body).off("DOMNodeInserted",d),n.reject()},t)}else n.resolve()}};return t});
define("mixins/fetchxml",["jquery"],function(e){"use strict";var r={fetchXML:function(r){var t=e.Deferred();return e.ajax({type:"GET",url:r,dataType:"xml",success:function(e){t.resolve(e)},error:function(e,r,n){t.reject()}}),t.promise()}};return r});
define("mixins/xml2html",["jquery","underscore"],function(e,t){"use strict";var r={_doc:function(e){var t;if("string"==typeof e)t=(new DOMParser).parseFromString(e,"text/xml");else{if(!(e instanceof Document))throw new Error("Unrecognized document input in XML2HTML");t=e}if(null==t||!t.hasOwnProperty("getElementsByTagName")&&t.getElementsByTagName("parsererror").length>0)throw new Error("Failed to parse document in xml2html");return t},xml2html:function(e,r,n,o){var i=this._doc(e),m=this._doc(r),a=new XSLTProcessor;a.importStylesheet(m),"object"==typeof n&&t.each(t.keys(n),function(e){a.setParameter(null,e,n[e])});var s;try{var c=a.transformToDocument(i);s=-1!=navigator.userAgent.indexOf("Firefox")?"text"===o?c.documentElement.textContent:c.documentElement:"text"===o?c.documentElement.textContent:s=c.body.innerHTML}catch(u){throw new Error("Error in XSLT transform: "+u.toString())}return s}};return r});
define("models/article",["jquery","underscore","backbone","mixins/fetchxml","mixins/asyncInit","mixins/xml2html","text!xsl/geojson.xsl","text!xsl/cited-range.xsl"],function(e,t,n,o,s,i,r,l){"use strict";var a=n.Model.extend({initialize:function(){var t=this;t.$def=e.Deferred();var n=t.fetchXML(t.get("path"));e.when(n).done(function(e){t.set("xml",e),t._mkGeojson(),t._mkCitedRange(),null!==t.geojson&&t.set("placeType",t.geojson.properties.layer),t.$def.resolve(t)}).fail(function(){t.$def.reject()})},defaults:{xml:null,placeType:null,iconUrl:"",citedRange:{}},geojson:null,getGeojson:function(){return null===this.geojson&&this._mkGeojson(),this.geojson},_mkGeojson:function(){try{var e=this.xml2html(this.get("xml"),r,{},"text");this.geojson=JSON.parse(e)}catch(t){throw new Error("Failed to parse geojson: "+t.toString())}},_mkCitedRange:function(){try{var e=this.xml2html(this.get("xml"),l,{},"text");this.set("citedRange",JSON.parse(e))}catch(t){throw new Error("Failed to parse cited range json: "+t.toString())}}});return t.extend(a.prototype,o),t.extend(a.prototype,s),t.extend(a.prototype,i),a});
define("models/issue",["jquery","underscore","backbone","models/article","collections/articles","mixins/asyncInit"],function(e,t,n,i,r,o){"use strict";var c=n.Model.extend({initialize:function(n){var o=this;o.$def=e.Deferred();var c=n.config.articles.pathBase;c.match(/\/$/)||(c+="/");var a=n.config.articles.files,s=new r;o.config=n.config,o.set("collection",s);var f=t.map(t.range(a.length),function(){return void 0});t.each(a,function(e,t){f[t]=new i({articleid:t,articledir:c,path:c+e})});var l=t.map(f,function(e){return e.init()});e.when.apply(null,l).done(function(){s.add(f),o.setIcons(),o.$def.resolve(o)}).always(function(){t.forEach(l,function(e){"rejected"===e.state()&&o.$def.reject()}),o.$def.reject()})},setIcons:function(){var e=this,n=e.config.markers.icons,i=t.shuffle(t.flatten(t.map(n,function(e){return t.map(e.files,function(t){return e.dir.concat(t)})}))),r=i.pop(),o=[];e.get("collection").forEach(function(e,t){var n=e.getGeojson()||{properties:{}},c=n.properties.layer;o[c]=o[c]||i.pop()||r,e.set("iconUrl",o[c])})},getArticle:function(e){var t,n=this.get("collection");return"object"==typeof e?t=e:("number"==typeof e||"string"==typeof e)&&(t=n.at(e)),t}});return t.extend(c.prototype,o),c});
define("models/map",["jquery","underscore","backbone","mixins/asyncInit"],function(e,n,i,o){"use strict";var t=i.Model.extend({initialize:function(n){var i=this;i.$def=e.Deferred(),e.getJSON(n.config.map.config,function(e){i.set("mapconfig",e),i.$def.resolve(i)}).fail(function(e,n,o){console.log("Failed to load map config file: "+o),i.$def.reject()})},defaults:{mapconfig:{}}});return n.extend(t.prototype,o),t});
define("routes/router",["jquery","underscore","backbone","models/error/user","views/error/user","views/clear","controllers/issue","controllers/map","views/menu"],function(e,r,i,t,n,o,s,a,l){"use strict";var u=i.Router.extend({pages:{},config:{},issueController:null,mapController:null,initialize:function(e){var t=this;this.config=e.config,this.pages=e.config.pages,this.issueController=new s({router:this,config:this.config}),this.issueController.init().done(function(){r.has(t.pages.router,"history")&&t.pages.router.history&&i.history.start()})},navigate:function(e,r){i.history.fragment!==e&&i.history.navigate(e,r)},page:function(e){var i,t=this,n=!1;try{if(e||(e=this.pages.home),i=this.pages.pages[e],void 0===i)throw new Error("Missing config in router/page")}catch(s){return this.page("404")}(new o).render(),r.each(i,function(i){var o,s={config:t.config,issue:t.issueController.model,router:t},l=JSON.parse(JSON.stringify(i));if(r.has(l,"view"))o=l.view;else{if(!r.has(l,"partial")){if(r.has(confg,"full"))return void(window.location.href=l.full.page);throw new Error("Unsupported page type in router: "+e)}o="views/partial",l.partial.page=t.pages.pathBase+l.partial.page,s=r.extend(s,l.partial)}"views/map"===o?(t.mapController=new a(s),n=!0):require([o],function(e){var r=new e(s);r.render()})}),n||(t.mapController=null)},article:function(r){var i=this,t={config:i.config,issue:i.issueController.model,router:i};e("#titlepage").length>0&&e("#titlepage").remove(),e("#page").length>0&&e("#page").remove(),null===i.mapController&&(i.mapController=new a(t)),0===e("#menu").children().length&&new l(t).render(),i.mapController.init().done(function(){var e=i.issueController.model.getArticle(r);e.trigger("active",e)})}});return u});
define("views/app",["jquery","underscore","backbone"],function(e,n,i){"use strict";var o=i.View.extend({el:"body",initialize:function(){e(window).resize(function(){document.location.reload()})}});return o});
define("views/article",["jquery","underscore","backbone","views/article/gallery","mixins/xml2html","text!xsl/article.xsl"],function(e,i,t,r,l,o){"use strict";var n=t.View.extend({id:"article",initialize:function(e){var i=this;i.config=e.config},render:function(){var i=this;if(i.$el=e("#"+i.id),0===i.$el.find("#"+i.model.cid).length){var t=this.xml2html(this.model.get("xml"),o,{"article-dir":i.config.articles.pathBase,iconUrl:i.model.get("iconUrl"),cid:i.model.cid});try{e(".article-content").remove(),e("#"+this.id).append(t)}catch(l){console.log("article load error: "+l.toString())}return e("img.slidesjs-slide").length>0?(new r).render():(e("#footer").remove(),e("article").removeClass("before-footer").addClass("no-footer")),i.$el.find(".article-marker").click(function(e,t){i.model.trigger("toggle",i.model)}),i}},remove:function(){}});return i.extend(n.prototype,l),n});
define("views/clear",["jquery","underscore","backbone"],function(e,n,r,t){"use strict";var c=r.View.extend({el:"body",render:function(){e("body").empty()}});return c});
define("views/issue",["jquery","underscore","backbone","text!partials/issue.html","views/article"],function(e,i,t,n,r){"use strict";var s=t.View.extend({el:"#issue",template:i.template(n),initialize:function(e){var i=this;i.config=e.config},render:function(){this.$el.remove(),e("body").append(n)},renderArticle:function(e){new r({model:e,config:this.model.config,issue:this,router:this.model.router}).render()}});return s});
define("views/map",["jquery","underscore","backbone","leaflet","text!partials/map.html","views/marker","mixins/asyncInit"],function(e,i,n,a,r,t,m){"use strict";var o=n.View.extend({id:"map",tagName:"div",markerViews:[],mapconfig:{},initialize:function(i){var n=this;n.$def=e.Deferred(),n.model=i.model,n.issue=i.issue,e.when.apply({},[n.issue.init(),n.model.init()]).done(function(){n.mapconfig=n.model.get("mapconfig"),e("#"+this.id).length>0||e("#"+this.id).children().length>0||(n._initMap(),n.$def.resolve(n))})},_initMap:function(){var n=this;0===e("#"+this.id).length&&(e("body").append(r),n.map=new a.Map(n.mapconfig.id,n.mapconfig.map),new a.TileLayer(n.mapconfig.tileLayer.url,n.mapconfig.tileLayer.opts).addTo(n.map),new a.control.scale(n.mapconfig.scale).addTo(n.map),n.markerViews=i.map(n.issue.get("collection").models,function(e){return new t({model:e,map:n.map,mapconfig:n.mapconfig})}))},renewViews:function(){var e=this;e.markerViews=i.map(e.issue.get("collection").models,function(i){return i.markerView||(i.markerView=new t({model:i,map:e.map,mapconfig:e.mapconfig})),i.markerView}),i.forEach(e.markerViews,function(e){e.render()}),e.trigger("markers",e.markerViews)},render:function(){var e=this;e._initMap(),i.forEach(e.markerViews,function(e){e.render()}),e.trigger("markers",e.markerViews)}});return i.extend(o.prototype,m),o});
define("views/marker",["jquery","underscore","backbone","text!partials/marker.html","text!partials/marker-legend.html"],function(e,r,t,i,n){"use strict";var o=t.View.extend({template:r.template(i),el:"",markerLayer:null,map:null,mapconfig:null,initialize:function(e){var r=this;r.map=e.map,r.mapconfig=e.mapconfig,r.initMarkerLayer()},initMarkerLayer:function(){var e=this,r=this.model.getGeojson(),t=e.mapconfig.features.icon;t.iconUrl=this.model.get("iconUrl")||"";var i=L.icon(t);e.markerLayer=L.geoJson(r,{onEachFeature:function(r,t){var i=L.popup(e.mapconfig.features.popup);i.setContent(e.template({articleid:e.model.get("articleid"),geojson:e.model.getGeojson()})),t.bindPopup(i),t.removeEventListener("click"),t.on("click",function(r){e.trigger("click",r)}),t.on("mouseover",function(r){e.trigger("mouseover",r)})},pointToLayer:function(r,t){return L.marker(t,{icon:i,clickable:!!r.properties.text,title:r.properties.markername||"",opacity:e.mapconfig.features.opacity,riseOnHover:e.mapconfig.features.riseOnHover})}})},render:function(){this.markerLayer.addTo(this.map)}});return o});
define("views/menu",["jquery","underscore","backbone","text!partials/menu.html","mixins/domwatcher","views/article/menu"],function(e,t,n,i,r,o){"use strict";var a=n.View.extend({template:t.template(i),id:"menu",tagName:"div",issue:null,config:{},initialize:function(e){this.config=e.config,this.issue=e.issue},render:function(){var n=this;if(0===e("#"+n.id).children().length){var i=this.config.menu,r=[],a={},c={};t.each(i,function(e){if(a[e.partial]="","menu"===e.type){if("collections/articles"!==e.collection)throw new Error("Unhandled collection type requested: "+e.collection);c[e.collection]=n.issue.get("collection")}}),t.each(t.keys(a),function(n){var i=e.Deferred();require(["text!"+n],function(e){a[n]=t.template(e),i.resolve()}),r.push(i.promise())});var l="";e.when.apply(e,r).done(function(){t.forEach(i,function(n,i){var r=n.partial,u={},s="",f=[];"page"===n.type||"sep"===n.type?l+=a[r](n):"menu"===n.type&&(c[n.collection].models.forEach(function(t,i){var r,a=n.item.href.replace(":i",i),c=new o({model:t}),l=c.render({href:"#"+a});if("string"==typeof l)r=e(l);else{if(!(l instanceof Element))throw new Error("Unsupported result type for submenu: "+l.toString());if("BODY"===l.nodeName)r=e(l.innerHTML);else{if("LI"!==l.nodeName)throw new Error("Unsupported document element for submenu: "+l.toString());r=e(l.outerHTML)}}r.attr("data-sort-key")?u[r.attr("data-sort-key")]=r.clone():u[r.find("a").text()]=r.clone()}),f=t.keys(u),f.sort(function(e,t){return e.localeCompare(t)}),t.each(f,function(e){s+=u[e][0].outerHTML}),l+=a[r]({label:n.label,items:s}))})}).then(function(){e("#"+n.id).empty().append(n.template({content:l}));var t=e.Deferred();t.fail(function(){n.render()}),n.watchDOM(500,"#"+n.id,t)}).fail(function(){throw new Error("Failed to build menu.")})}}});return t.extend(a.prototype,r),a});
define("views/page",["jquery","underscore","backbone","mixins/domwatcher","text!partials/page.html"],function(e,t,n,r,i){"use strict";var a=n.View.extend({el:"body",render:function(){var t=this,n=e.Deferred();n.then(function(){e(t.el).append(i)}),this.watchDOM(1e3,t.el,n)}});return t.extend(a.prototype,r),a});
define("views/partial",["jquery","underscore","backbone","mixins/domwatcher","mixins/asyncInit"],function(e,t,n,i,r){"use strict";var a=n.View.extend({el:"",page:"",initialize:function(t){var n=this;n.el=t.el,n.$def=e.Deferred(),require(["text!"+t.page],function(e){n.page=e,n.$def.resolve(n)})},render:function(){var t=this,n=e.Deferred();t.init().then(function(){e(t.el).append(t.page)}),this.watchDOM(1e3,t.el,n)}});return t.extend(a.prototype,i),t.extend(a.prototype,r),a});
define("models/error/user",["backbone"],function(e){"use strict";var s=e.Model.extend({defaults:{msg:""},initialize:function(e){this.set("msg",e.message)}});return s});
define("views/article/gallery",["jquery","underscore","backbone","views/article/gallery/popover","views/article/gallery/lightbox","views/article/gallery/slides"],function(e,i,r,n,l,a){"use strict";var o=r.View.extend({id:"article",initialize:function(){},remove:function(){},render:function(){var i=e("#article article").height()-e("#header").outerHeight(!0);e("#body").css({height:i});var r=[];e("img.slidesjs-slide").each(function(i,n){var l=e.Deferred();e(n).load(function(){e(n).removeClass("remove"),l.resolve()}),e(n).error(function(){window.setTimeout(function(){l.reject()},500)}),r.push(l)}),e.when.apply({},r).always(function(){e("img.slidesjs-slide.remove").remove(),e(".image-loading").removeClass("image-loading"),(new n).render(),(new l).render(),(new a).render()})}});return o});
define("views/article/menu",["jquery","underscore","backbone","mixins/xml2html","text!xsl/article-menu.xsl"],function(e,t,i,n,r){"use strict";var l=i.View.extend({render:function(e){var t=this;if("resolved"!==this.model.init().state())throw"Uninitialized article in ArticleMenuView";var i=t.xml2html(t.model.get("xml"),r,e);return i}});return t.extend(l.prototype,n),l});
define("views/error/user",["jquery","backbone","text!partials/error/user.html"],function(e,t,r){"use strict";var i=t.View.extend({template:_.template(r),el:e("#errorDialog"),initialize:function(){this.render()},render:function(){return this.$el.html(this.template(this.model.attributes)),this.$el.modal({keyboard:!0,show:!0}),this}});return i});
require.config({paths:{text:"//cdnjs.cloudflare.com/ajax/libs/require-text/2.0.12/text.min",jquery:"//code.jquery.com/jquery-2.1.4.min",bootstrap:"//maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min",backbone:"//cdnjs.cloudflare.com/ajax/libs/backbone.js/1.1.2/backbone-min",underscore:"//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min",leaflet:"//cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.3/leaflet",slidesjs:"//cdnjs.cloudflare.com/ajax/libs/slidesjs/3.0/jquery.slides.min",lightbox:"//cdnjs.cloudflare.com/ajax/libs/magnific-popup.js/1.0.0/jquery.magnific-popup.min",partials:"../partials",xsl:"../script/xsl",pages:"../pages"},shim:{bootstrap:{deps:["jquery"]},backbone:{deps:["jquery","underscore"],exports:"Backbone"},underscore:{exports:"_"},text:{deps:[]},slidesjs:{deps:["jquery"]},lightbox:{deps:["jquery"]}}}),require(["jquery","models/error/user","views/error/user","models/app","views/app","bootstrap"],function(e,s,o,r,a){"use strict";var i=e("#main").attr("data-config");i?e.getJSON(i,function(e){try{{new a({model:new r({config:e})})}}catch(i){opts.config.debug||new o({model:new s({msg:i.toString()})})}}).fail(function(e,r,a){new o({model:new s({msg:"Failed to load site config file '"+i+"' "+a})})}):new o({model:new s({msg:"No configuration filename specified in home page."})})});
//# sourceMappingURL=data:application/json;base64,